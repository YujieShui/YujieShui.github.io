<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深度学习环境的搭建</title>
      <link href="/post/bb0e0670.html"/>
      <url>/post/bb0e0670.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/system-2660914_1920.jpg" alt="题图:https://pixabay.com/photos/system-web-network-connection-2660914/"></p><p>一份深度学习环境配置的备忘。</p><a id="more"></a><h1 id="安装-Ubuntu16-04"><a href="#安装-Ubuntu16-04" class="headerlink" title="安装 Ubuntu16.04"></a>安装 Ubuntu16.04</h1><p>推荐使用 Linux 系统，可以少给自己找些麻烦，既然要吃程序员这口饭，使用 Linux 这关是逃不开的。</p><p>Linux 有许多发行版，具体用哪个版本倒不必过分细究，不过还是推荐使用稳定的、使用人数多的发行版，比如 Ubuntu16.04 LST。</p><p>首先需要做一个 U 盘启动盘，接着分区。最好上 SSD 用来装系统，再挂一个 4T 的机械硬盘，分区可以如下：</p><ol><li>系统区用 efi 格式，200M 或者 300M 左右差不多了</li><li>swap 分区，32G 左右差不多</li><li>剩余部分 EXT4 格式挂到根目录<code>/</code>下</li><li>最后把机械硬盘挂载上</li></ol><p>系统安装上之后还有些动作是需要做的：</p><ol><li>更换默认的源</li><li>安装个搜狗输入法，打字方便不少</li><li>安装个 open ssh，肯定会远程连的</li></ol><p>其实还有的折腾，装机先到这里吧。</p><h1 id="常出版本问题的库"><a href="#常出版本问题的库" class="headerlink" title="常出版本问题的库"></a>常出版本问题的库</h1><p>有几个库经常出一些问题，比如说 numpy、cuda/cudnn 和  protobuf。</p><h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2><p>Numpy是不得不用的python科学计算基础库，被几乎所有的深度学习框架依赖，目前版本已经到1.6。</p><p><strong>Tips：Numpy出问题，基本上就是版本问题</strong>，框架未必支持最新版，最好不要装最新版本的，要自己制定版本安装。</p><h2 id="cuda-cudnn"><a href="#cuda-cudnn" class="headerlink" title="cuda/cudnn"></a>cuda/cudnn</h2><p>搞深度学习得有块 GPU 吧，我看有很多人用 cuda8，不过还是比较推荐安装 cuda10，最近刚出的 TensorFlow2.0 就必须使用 cuda10。先安装 nvidia-driver ，再安装 cuda。</p><blockquote><p>注:NVIDIM 的驱动要在 cuda 之前安装，见NVIDIA 环境配置这一小节。</p></blockquote><p>官网下载链接 <a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-downloads</a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 显卡驱动安装</span><br><span class="line"></span><br><span class="line">1.下载官网内Linux版本的.run安装包</span><br><span class="line">2. cd xxx/xxx #以目录usr/ser为例,通过cd usr/ser进入安装包存放目录</span><br><span class="line">3. sudo service lightdm stop #关闭图形界面</span><br><span class="line">4. ctrl+alt+F1 #若此时长时间黑屏，通过此命令进入命令行</span><br><span class="line">5. cd xxx/xxx #在命令行进入安装包存放目录</span><br><span class="line">6. sudo bash NVIDIA-Linux-x86_64-xx.xx.run --no-opengl-files  </span><br><span class="line">#只安装驱动文件，默认enter选项，进入命令行 </span><br><span class="line">#–no-opengl-files 只安装驱动文件，不安装OpenGL文件。这个参数最重要</span><br><span class="line">7. sudo reboot #重启电脑。</span><br><span class="line">8. nvidia-smi或nvidia-settings  #显示驱动详细信息，即安装成功</span><br></pre></td></tr></table></figure><h2 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h2><p>当初安装 caffe 的时候，因为 protobuf 的版本问题被折腾得够呛，可以用 <code>protobuf --version</code> 看看当前的版本，不出意外因该是 <code>2.6.1</code>，有点低。</p><p>建议自己找个目录安装 <code>3.4</code> 以上的版本，和系统隔离，让一些包比如caffe编译的时候依赖上自己的这个库。</p><p><a href="https://github.com/protocolbuffers/protobuf/releases" target="_blank" rel="noopener">https://github.com/protocolbuffers/protobuf/releases</a></p><h1 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h1><p>接着可以安装 opencv、caffe、tensorflow、pytorch、anaconda 了。</p><h2 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h2><p>OpenCV 安装写过一篇：<a href="https://shuiyujie.com/post/5359e313.html">Ubuntu16.04配置OpenCV环境</a>。</p><p>还有视频教学的: <a href="http://space.bilibili.com/365916694" target="_blank" rel="noopener">http://space.bilibili.com/365916694</a>?</p><h2 id="NVIDIA-环境配置"><a href="#NVIDIA-环境配置" class="headerlink" title="NVIDIA 环境配置"></a>NVIDIA 环境配置</h2><p><img src="http://image.shuiyujie.com/2019-09-23-00-19-01.png" alt="nvidim-smi"></p><p>配置 nvidia-driver 环境，官网下载链接： <a href="https://www.nvidia.com/Download/index.aspx?lang=cn。" target="_blank" rel="noopener">https://www.nvidia.com/Download/index.aspx?lang=cn。</a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 命令行下载</span><br><span class="line">sudo ubuntu-drivers devices</span><br><span class="line"></span><br><span class="line"># 以上命令可能会遇到问题</span><br><span class="line">The program &apos;ubuntu-drivers&apos; is currently not installed. You can install it by typing:</span><br><span class="line">sudo apt install ubuntu-drivers-common</span><br><span class="line"></span><br><span class="line"># 进入命令行界面 Ctrl + ALt + F1</span><br><span class="line"># 比如当我们安装 NVIDIA 的驱动程序时，就需要先关闭 X server</span><br><span class="line">sudo service lightdm stop</span><br><span class="line"></span><br><span class="line"># 以上命令可能遇到问题</span><br><span class="line">Failed to stop lightdm.service: Unit lightdm.service not loaded.</span><br><span class="line">how-to-install-nvidia-run</span><br><span class="line"></span><br><span class="line"># 安装命令</span><br><span class="line"># 只安装驱动文件，不安装 opengl 文件</span><br><span class="line">sudo ./NVIDIA*.run -no-opengl-files </span><br><span class="line"># 重启 X service</span><br><span class="line">sudo service lightdm start</span><br><span class="line"># 查看驱动安装结果</span><br><span class="line">nvdia-smi</span><br></pre></td></tr></table></figure><p><a href="https://www.zybuluo.com/upuil/note/922035" target="_blank" rel="noopener">Ubuntu 16.04 关闭x server</a></p><p><a href="https://www.cnblogs.com/EasonJim/p/7128317.html" target="_blank" rel="noopener">Ubuntu中LightDM是什么（转）</a></p><p><strong>nvdia 驱动安装常见问题</strong></p><ul><li><p>笔记本双显卡系统，登录界面无限循环，无法进入桌面</p></li><li><ul><li>普通笔记本默认采用集显作为视频输出，此时没有关闭 opengl 文件的安装，会继续使用 ubuntu 默认的 nouveau 驱动，而后者已经被禁掉</li><li>sudo ./NVIDIA*.run -no-opengl-files 只安装驱动文件，不安装 opengl 文件</li></ul></li><li><p>The Nouveau Kernel driver is currently in use by your system</p></li><li><ul><li>禁用 ubuntu 默认的驱动 nouveau</li><li>vim /etc/modprobe.d/blacklist.conf</li><li>blacklist nouveau  # 禁用 nouveau 驱动</li><li>sudo update0initramfs -u    # 更新 kernel</li><li>lsmod | grep nouveau # 查看是否更新</li></ul></li><li><p><a href="https://gist.github.com/wangruohui/df039f0dc434d6486f5d4d098aa52d07" target="_blank" rel="noopener">https://gist.github.com/wangruohui/df039f0dc434d6486f5d4d098aa52d07</a></p></li></ul><h2 id="Caffe"><a href="#Caffe" class="headerlink" title="Caffe"></a>Caffe</h2><p>Caffe 挺不好装的，可以 fork 一下这个项目 <a href="https://github.com/longpeng2008/Caffe_Long" target="_blank" rel="noopener">https://github.com/longpeng2008/Caffe_Long</a> 然后参照 这个 <a href="https://github.com/longpeng2008/Caffe_Long/blob/master/Makefile.config" target="_blank" rel="noopener">Makefile</a>。这里最好指定 opencv 和 protobuf 的位置。</p><ol><li>nvidia-driver, cuda, caffe 是递进的依赖关系，后者必须依赖于前置，另外 cudnn 的安装时可选的</li><li>本文安装方法只使用与 ubuntu 系统</li><li>一般安装过程不顺利，问题出在 nvida-driver 上</li></ol><h2 id="Caffe-安装"><a href="#Caffe-安装" class="headerlink" title="Caffe 安装"></a>Caffe 安装</h2><p>Caffe 安装可以参见 <a href="https://caffe.berkeleyvision.org/installation.html" target="_blank" rel="noopener">Caffe</a><a href="https://caffe.berkeleyvision.org/installation.html" target="_blank" rel="noopener"> Installation</a>，高于 17.04 的 ubuntu 可以一键安装 caffe，不过我们将在 ubuntu16.04 上安装 caffe。</p><p>安装 caffe 需要依赖很多东西，安装顺序也是有讲究的：</p><ol><li>升级 pip 和 pip3，理顺 ubuntu 上自带的的 python 环境</li><li>自行编译 protobuf <a href="https://github.com/protocolbuffers/protobuf/blob/master/src/README.md" target="_blank" rel="noopener">https://github.com/protocolbuffers/protobuf/blob/master/src/README.md</a></li><li>自行编译 openblas <a href="https://blog.csdn.net/y5492853/article/details/79558194" target="_blank" rel="noopener">https://blog.csdn.net/y5492853/article/details/79558194</a></li><li>安装 opencv <a href="http://wykvictor.github.io/2018/08/01/OpenCV-6.html" target="_blank" rel="noopener">http://wykvictor.github.io/2018/08/01/OpenCV-6.html</a> 这里需要自己再扩展一下，哪些装哪些不装</li><li>安装 NVIDIA 和 cuda</li><li>安装 caffe</li><li>最后安装 Anaconda，不然会对编译 opencv 造成影响  <a href="https://www.digitalocean.com/community/tutorials/how-to-install-the-anaconda-python-distribution-on-ubuntu-16-04" target="_blank" rel="noopener">How To Install the Anaconda Python Distribution on Ubuntu 16.04</a></li></ol><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev</span><br><span class="line">protobuf-compiler</span><br><span class="line">sudo apt-get install --no-install-recommends libboost-all-dev</span><br><span class="line">sudo apt-get install libatlas-base-dev</span><br><span class="line">sudo install OpenBLAS</span><br><span class="line">sudo apt-get install libopenblas-dev</span><br><span class="line">==============================================</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 使用三哥定制版本的 caffe</span></span><br><span class="line">git clone https://github.com/YujieShui/Caffe_Long</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 接着修改 makefile</span></span><br><span class="line"></span><br><span class="line">==============================================</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 这个是使用官网版本的 caffe，我这里使用三哥定制版本的 caffe</span></span><br><span class="line">git clone https://github.com/BVLC/caffe.git</span><br><span class="line">cd caffe</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 此时编译就会遇到很多的问题,看接下里给出的解决方案,再编译</span></span><br><span class="line">cp Makefile.config.example Makefile.config</span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure><h2 id="Caffe-配置文件解析"><a href="#Caffe-配置文件解析" class="headerlink" title="Caffe 配置文件解析"></a>Caffe 配置文件解析</h2><figure class="highlight makefile hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">## Refer to http://caffe.berkeleyvision.org/installation.html </span></span><br><span class="line"><span class="hljs-comment"># Contributions simplifying and improving our build system are welcome! </span></span><br><span class="line"><span class="hljs-comment"># cuDNN acceleration switch (uncomment to build with cuDNN). </span></span><br><span class="line"><span class="hljs-comment"># 是否使用 cudnn 加速</span></span><br><span class="line"><span class="hljs-comment"># USE_CUDNN := 1 </span></span><br><span class="line"><span class="hljs-comment"># CPU-only switch (uncomment to build without GPU support). </span></span><br><span class="line"><span class="hljs-comment"># CPU_ONLY := 1 </span></span><br><span class="line"><span class="hljs-comment"># uncomment to disable IO dependencies and corresponding data layers </span></span><br><span class="line"><span class="hljs-comment"># 是否使用功能 opencv</span></span><br><span class="line"><span class="hljs-comment"># USE_OPENCV := 0 </span></span><br><span class="line"><span class="hljs-comment"># 是否使用 LEVELDB 输入格式</span></span><br><span class="line"><span class="hljs-comment"># USE_LEVELDB := 0 </span></span><br><span class="line"><span class="hljs-comment"># 是否使用 USE_LMDB 输入格式</span></span><br><span class="line"><span class="hljs-comment"># USE_LMDB := 0 </span></span><br><span class="line"><span class="hljs-comment"># uncomment to allow MDB_NOLOCK when reading LMDB files (only if necessary) </span></span><br><span class="line"><span class="hljs-comment"># You should not set this flag if you will be reading LMDBs with any </span></span><br><span class="line"><span class="hljs-comment"># possibility of simultaneous read and write </span></span><br><span class="line"><span class="hljs-comment"># ALLOW_LMDB_NOLOCK := 1 </span></span><br><span class="line"><span class="hljs-comment"># Uncomment if you're using OpenCV 3 </span></span><br><span class="line"><span class="hljs-comment"># 是否使用 opencv3，这里开启</span></span><br><span class="line">OPENCV_VERSION := 3 </span><br><span class="line"><span class="hljs-comment"># To customize your choice of compiler, uncomment and set the following. </span></span><br><span class="line"><span class="hljs-comment"># N.B. the default for Linux is g++ and the default for OSX is clang++ </span></span><br><span class="line"><span class="hljs-comment"># CUSTOM_CXX := g++ </span></span><br><span class="line"><span class="hljs-comment"># CUDA directory contains bin/ and lib/ directories that we need. </span></span><br><span class="line"><span class="hljs-comment"># cuda 的目录</span></span><br><span class="line">CUDA_DIR := /usr/local/cuda-8.0 </span><br><span class="line"><span class="hljs-comment"># On Ubuntu 14.04, if cuda tools are installed via </span></span><br><span class="line"><span class="hljs-comment"># "sudo apt-get install nvidia-cuda-toolkit" then use this instead: </span></span><br><span class="line"><span class="hljs-comment"># CUDA_DIR := /usr </span></span><br><span class="line"><span class="hljs-comment"># CUDA architecture setting: going with all of them. </span></span><br><span class="line"><span class="hljs-comment"># For CUDA &lt; 6.0, comment the *_50 lines for compatibility. </span></span><br><span class="line"><span class="hljs-comment"># 与 cuda 架构有关 http://www.caffecn.cn/?/question/1077</span></span><br><span class="line"><span class="hljs-comment"># cuda10 要注释掉前两个</span></span><br><span class="line">CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \ </span><br><span class="line">            -gencode arch=compute_20,code=sm_21 \ </span><br><span class="line">            -gencode arch=compute_30,code=sm_30 \ </span><br><span class="line">            -gencode arch=compute_35,code=sm_35 \ </span><br><span class="line">            -gencode arch=compute_50,code=sm_50 \ </span><br><span class="line">            -gencode arch=compute_50,code=compute_50 </span><br><span class="line"><span class="hljs-comment"># BLAS choice: </span></span><br><span class="line"><span class="hljs-comment"># 矩阵加速库选择</span></span><br><span class="line"><span class="hljs-comment"># atlas for ATLAS (default) </span></span><br><span class="line"><span class="hljs-comment"># mkl for MKL </span></span><br><span class="line"><span class="hljs-comment"># open for OpenBlas </span></span><br><span class="line">BLAS := open </span><br><span class="line"><span class="hljs-comment"># Custom (MKL/ATLAS/OpenBLAS) include and lib directories. </span></span><br><span class="line"><span class="hljs-comment"># Leave commented to accept the defaults for your choice of BLAS </span></span><br><span class="line"><span class="hljs-comment"># (which should work)! </span></span><br><span class="line">BLAS_INCLUDE := /opt/OpenBLAS/<span class="hljs-keyword">include</span> </span><br><span class="line">BLAS_LIB := /opt/OpenBLAS/lib </span><br><span class="line"><span class="hljs-comment"># Homebrew puts openblas in a directory that is not on the standard search path </span></span><br><span class="line"><span class="hljs-comment"># BLAS_INCLUDE := $(shell brew --prefix openblas)/include </span></span><br><span class="line"><span class="hljs-comment"># BLAS_LIB := $(shell brew --prefix openblas)/lib </span></span><br><span class="line"><span class="hljs-comment"># This is required only if you will compile the matlab interface. </span></span><br><span class="line"><span class="hljs-comment"># MATLAB directory should contain the mex binary in /bin. </span></span><br><span class="line"><span class="hljs-comment"># MATLAB_DIR := /usr/local/MATLAB/R2014b </span></span><br><span class="line"><span class="hljs-comment"># MATLAB_DIR := /Applications/MATLAB_R2012b.app </span></span><br><span class="line"><span class="hljs-comment"># <span class="hljs-doctag">NOTE:</span> this is required only if you will compile the python interface. </span></span><br><span class="line"><span class="hljs-comment"># We need to be able to find Python.h and numpy/arrayobject.h. </span></span><br><span class="line"><span class="hljs-comment"># python 路径和 python 接口，PYTHON_INCLUDE PYTHON_LIB， WITH_PYTHON_LAYER</span></span><br><span class="line">PYTHON_INCLUDE := /usr/<span class="hljs-keyword">include</span>/python2.7 \ </span><br><span class="line">/usr/lib/python2.7/dist-packages/numpy/core/<span class="hljs-keyword">include</span> </span><br><span class="line"><span class="hljs-comment"># Anaconda Python distribution is quite popular. Include path: </span></span><br><span class="line"><span class="hljs-comment"># Verify anaconda location, sometimes it's in root. </span></span><br><span class="line"><span class="hljs-comment"># ANACONDA_HOME := $(HOME)/anaconda </span></span><br><span class="line"><span class="hljs-comment"># PYTHON_INCLUDE := $(ANACONDA_HOME)/include \ </span></span><br><span class="line"><span class="hljs-comment"># $(ANACONDA_HOME)/include/python2.7 \ </span></span><br><span class="line"><span class="hljs-comment"># $(ANACONDA_HOME)/lib/python2.7/site-packages/numpy/core/include \ </span></span><br><span class="line"><span class="hljs-comment"># We need to be able to find libpythonX.X.so or .dylib. </span></span><br><span class="line">PYTHON_LIB := /usr/lib </span><br><span class="line"><span class="hljs-comment"># PYTHON_LIB := $(ANACONDA_HOME)/lib </span></span><br><span class="line"><span class="hljs-comment"># Homebrew installs numpy in a non standard path (keg only) </span></span><br><span class="line"><span class="hljs-comment"># PYTHON_INCLUDE += $(dir $(shell python -c 'import numpy.core; print(numpy.core.__file__)'))/include </span></span><br><span class="line"><span class="hljs-comment"># PYTHON_LIB += $(shell brew --prefix numpy)/lib </span></span><br><span class="line"><span class="hljs-comment"># Uncomment to support layers written in Python (will link against Python libs) </span></span><br><span class="line">WITH_PYTHON_LAYER := 1 </span><br><span class="line"><span class="hljs-comment"># Whatever else you find you need goes here. </span></span><br><span class="line"><span class="hljs-comment"># 其它依赖库，这里依赖了自己编译的 protobuf 和 opencv</span></span><br><span class="line">INCLUDE_DIRS := <span class="hljs-variable">$(PYTHON_INCLUDE)</span> /usr/local/<span class="hljs-keyword">include</span> /usr/local/<span class="hljs-keyword">include</span> /usr/<span class="hljs-keyword">include</span>/hdf5/serial /home/longpeng/opts/opencv3.2/<span class="hljs-keyword">include</span> /home/longpeng/opts/protobuf3.1/<span class="hljs-keyword">include</span> /usr/local/lib/python2.7/dist-packages/numpy/core/<span class="hljs-keyword">include</span>/ </span><br><span class="line">LIBRARY_DIRS := <span class="hljs-variable">$(PYTHON_LIB)</span> /usr/local/lib /usr/lib /usr/local/lib64 /usr/lib/x86_64-linux-gnu/hdf5/serial /usr/local/cuda-8.0/lib64 /home/longpeng/opts/opencv3.2/lib /home/longpeng/opts/protobuf3.1/lib </span><br><span class="line"><span class="hljs-comment"># If Homebrew is installed at a non standard location (for example your home directory) and you use it for general dependencies </span></span><br><span class="line"><span class="hljs-comment"># INCLUDE_DIRS += $(shell brew --prefix)/include </span></span><br><span class="line"><span class="hljs-comment"># LIBRARY_DIRS += $(shell brew --prefix)/lib </span></span><br><span class="line"><span class="hljs-comment"># Uncomment to use `pkg-config` to specify OpenCV library paths. </span></span><br><span class="line"><span class="hljs-comment"># (Usually not necessary -- OpenCV libraries are normally installed in one of the above $LIBRARY_DIRS.) </span></span><br><span class="line"><span class="hljs-comment"># USE_PKG_CONFIG := 1 </span></span><br><span class="line">BUILD_DIR := build </span><br><span class="line">DISTRIBUTE_DIR := distribute </span><br><span class="line"><span class="hljs-comment">#build with support for Python layers </span></span><br><span class="line">WITH_PYTHON_LAYER:=1 </span><br><span class="line"><span class="hljs-comment"># Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171 </span></span><br><span class="line"><span class="hljs-comment"># DEBUG := 1 </span></span><br><span class="line"><span class="hljs-comment"># The ID of the GPU that 'make runtest' will use to run unit tests. </span></span><br><span class="line">TEST_GPUID := 0 </span><br><span class="line"><span class="hljs-comment"># enable pretty build (comment to see full commands) </span></span><br><span class="line">Q ?= @</span><br></pre></td></tr></table></figure><h2 id="Caffe-编译问题列表"><a href="#Caffe-编译问题列表" class="headerlink" title="Caffe 编译问题列表"></a>Caffe 编译问题列表</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># without using a build folder, for me there will be linking problem says libcaffe.o cant not find “xxx&quot;</span><br><span class="line">https://github.com/BVLC/caffe/issues/2348#issuecomment-97093859</span><br><span class="line"></span><br><span class="line"># fatal error: hdf5.h: No such file or directory</span><br><span class="line">http://homeway.me/2018/01/25/setup-caffe-for-deep-learning/</span><br><span class="line"></span><br><span class="line"># Unsupported gpu architecture ‘compute_20&apos;</span><br><span class="line">https://blog.csdn.net/kemgine/article/details/78781377</span><br><span class="line">http://www.caffecn.cn/?/question/1077</span><br><span class="line"></span><br><span class="line"># 使用 opencv3</span><br><span class="line">OPENCV_VERSION := 3</span><br><span class="line">https://github.com/BVLC/caffe/issues/3517</span><br><span class="line"></span><br><span class="line"># 是否使用 python 定义网络,要打开</span><br><span class="line"># Uncomment to support layers written in Python (will link against Python libs)</span><br><span class="line">WITH_PYTHON_LAYER := 1</span><br></pre></td></tr></table></figure><h2 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h2><p>Anaconda 在 OpenCV 和 Caffe 装好之后装，不然会导致 OpenCV 和 Caffe 的 Python 库依赖到 Anaconda 上去，我们希望它们使用系统的 Python。</p><p>具体安装我有写过一篇: <a href="https://shuiyujie.com/post/9d29b615.html">如何使用Anaconda</a></p><h2 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h2><p>现在 TensorFlow2.0 已经出了，不过没有发行正式版，无法通过 anaconda 安装，需要通过 pip 进行安装。</p><p>前面的环境配置好之后，TensorFlow 的安装并不难。</p><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>其它可能还会安装一下 Docker，日常用的软件等。原则就是用到啥就下载啥，用啥自己心里要有数，别把环境搞乱就行。</p><p>不过也别害怕，不是生产环境顶多重新配，就是会浪费点时间，还是谨慎点好。</p><p><a href="https://study.163.com/course/courseLearn.htm?courseId=1209092816&amp;share=1&amp;shareId=1029322902#/learn/video?lessonId=1278977185&amp;courseId=1209092816" target="_blank" rel="noopener">Ubuntu平台实录——CUDA安装</a></p>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> deeplearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习模型评估</title>
      <link href="/post/b75ba217.html"/>
      <url>/post/b75ba217.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/feedback-3240007_1920.jpg" alt="题图:https://pixabay.com/illustrations/feedback-satisfaction-employee-3240007/"></p><p>如何衡量一个模型的质量？</p><a id="more"></a><h1 id="分类评测指标"><a href="#分类评测指标" class="headerlink" title="分类评测指标"></a>分类评测指标</h1><p>图像分类是计算机视觉中最基础的一个任务，也是几乎所有的基准模型进行比较的任务，从最开始比较简单的10分类的灰度图像手写数字识别mnist，到后来更大一点的10分类的cifar10和100分类的cifar100，到后来的imagenet，图像分类任务伴随着数据库的增长，一步一步提升到了今天的水平。现在在Imagenet这样的超过1000万图像，2万类的数据集中，计算机的图像分类水准已经超过了人类。</p><p>图像分类，顾名思义就是一个模式分类问题，它的目标是将不同的图像，划分到不同的类别，实现最小的分类误差，这里我们只考虑单标签分类问题，即每一个图片都有唯一的类别。</p><p><strong>对于单个标签分类的问题，评价指标主要有Accuracy，Precision，Recall，F-score，PR曲线，ROC和AUC。</strong></p><p>在计算这些指标之前，我们先计算几个基本指标，这些指标是基于二分类的任务，也可以拓展到多分类。</p><ul><li>标签为正样本，分类为正样本的数目为True Positive，简称TP。</li><li>标签为正样本，分类为负样本的数目为False Negative，简称FN。</li><li>标签为负样本，分类为正样本的数目为False Positive，简称FP。</li><li>标签为负样本，分类为负样本的数目为True Negative，简称TN。</li></ul><p>判别是否为正例只需要设一个概率阈值T，预测概率大于阈值T的为正类，小于阈值T的为负类，默认就是0.5。如果我们减小这个阀值T，更多的样本会被识别为正类，这样可以提高正类的召回率，但同时也会带来更多的负类被错分为正类。如果增加阈值T，则正类的召回率降低，精度增加。</p><p>如果是多类，比如ImageNet1000分类比赛中的1000类，预测类别就是预测概率最大的那一类。</p><h2 id="准确率Accuracy"><a href="#准确率Accuracy" class="headerlink" title="准确率Accuracy"></a>准确率Accuracy</h2><p>单标签分类任务中每一个样本都只有一个确定的类别，预测到该类别就是分类正确，没有预测到就是分类错误，因此最直观的指标就是Accuracy，也就是准确率。</p><p>$Accuracy=(TP+TN)/(TP+FP+TN+FN)$，表示的就是所有样本都正确分类的概率，可以使用不同的阈值T。</p><p>在ImageNet中使用的Accuracy指标包括Top_1 Accuracy和Top_5 Accuracy，Top_1 Accuracy就是前面计算的Accuracy。</p><p>记样本$x_{i}$的类别为$y_{i}$，类别种类为$(0,1,…,C)$，预测类别函数为$f$，则Top-1的计算方法如下：</p><p><img src="http://image.shuiyujie.com/2019-09-21-00-50-52.png" style="zoom:25%;"></p><p>如果给出概率最大的5个预测类别，只要包含了真实的类别，则判定预测正确，计算出来的指标就是Top-5。</p><p>目前在ImageNet上，Top-5的指标已经超过95%，而Top-1的指标还在80%左右。</p><h2 id="精确度Precision和召回率Recall"><a href="#精确度Precision和召回率Recall" class="headerlink" title="精确度Precision和召回率Recall"></a>精确度Precision和召回率Recall</h2><p>如果我们只考虑正样本的指标，有两个很常用的指标，精确度和召回率。</p><table><thead><tr><th></th><th>公式</th><th>说明</th></tr></thead><tbody><tr><td>正样本精确率</td><td>$Precision=TP/(TP+FP)$</td><td>所有被分类为正样本的数据，有多少真的是正样本</td></tr><tr><td>正样本召回率</td><td>$Recall=TP/(TP+FN)$</td><td>所有正样本，被正确分为正样本的比例</td></tr></tbody></table><h2 id="PR曲线"><a href="#PR曲线" class="headerlink" title="PR曲线"></a>PR曲线</h2><p>通常召回率越高，精确度越低，根据不同的值可以绘制Recall-Precision曲线，如下。</p><p><img src="http://image.shuiyujie.com/2019-09-21-00-38-29.png" alt="PR曲线"></p><p>横轴就是recall，纵轴就是precision，曲线越接近右上角，说明其性能越好，可以用该曲线与坐标轴包围的面积来定量评估，值在0～1之间。</p><h2 id="F1-score"><a href="#F1-score" class="headerlink" title="F1 score"></a>F1 score</h2><p>有的时候我们不仅关注正样本的准确率，也关心其召回率，但是又不想用Accuracy来进行衡量，一个折中的指标是采用F-score。</p><p>$F1 score=2·Precision·Recall/(Precision+Recall)$，只有在召回率Recall和精确率Precision都高的情况下，F1 score才会很高，因此F1 score是一个综合性能的指标。</p><h2 id="ROC曲线与AUC指标"><a href="#ROC曲线与AUC指标" class="headerlink" title="ROC曲线与AUC指标"></a>ROC曲线与AUC指标</h2><p>以上的准确率Accuracy，精确度Precision，召回率Recall，F1 score，混淆矩阵都只是一个单一的数值指标，如果我们想观察分类算法在不同的参数下的表现情况，就可以使用一条曲线，即ROC曲线，全称为receiver operating characteristic。</p><p>ROC曲线可以用于评价一个分类器在不同阈值下的表现情况。</p><p>在ROC曲线中，每个点的横坐标是false positive rate(FPR)，纵坐标是true positive rate(TPR)，描绘了分类器在True Positive和False Positive间的平衡，两个指标的计算如下：</p><p>$TPR=TP/(TP+FN)$，代表分类器预测的正类中实际正实例占所有正实例的比例。</p><p>$FPR=FP/(FP+TN)$，代表分类器预测的正类中实际负实例占所有负实例的比例，FPR越大，预测正类中实际负类越多。</p><p>ROC曲线通常如下：</p><p><img src="http://image.shuiyujie.com/2019-09-21-00-40-45.png" alt="ROC曲线"></p><p>其中有4个关键的点：</p><ul><li>点(0,0)：FPR=TPR=0，分类器预测所有的样本都为负样本。</li><li>点(1,1)：FPR=TPR=1，分类器预测所有的样本都为正样本。</li><li>点(0,1)：FPR=0, TPR=1，此时FN＝0且FP＝0，所有的样本都正确分类。</li><li>点(1,0)：FPR=1，TPR=0，此时TP＝0且TN＝0，最差分类器，避开了所有正确答案。</li></ul><p><strong>ROC曲线相对于PR曲线有个很好的特性：当测试集中的正负样本的分布变化的时候，ROC曲线能够保持不变，即对正负样本不均衡问题不敏感。</strong></p><p>比如负样本的数量增加到原来的10倍，TPR不受影响，FPR的各项也是成比例的增加，并不会有太大的变化。所以不均衡样本问题通常选用ROC作为评价标准。</p><p>ROC曲线越接近左上角，该分类器的性能越好，若一个分类器的ROC曲线完全包住另一个分类器，那么可以判断前者的性能更好。</p><p>如果我们想通过两条ROC曲线来定量评估两个分类器的性能，就可以使用<strong>AUC指标</strong>。</p><p>AUC（Area Under Curve）为ROC曲线下的面积，它表示的就是一个概率，这个面积的数值不会大于1。随机挑选一个正样本以及一个负样本，AUC表征的就是有多大的概率，分类器会对正样本给出的预测值高于负样本，当然前提是正样本的预测值的确应该高于负样本。</p><h1 id="检索与回归指标"><a href="#检索与回归指标" class="headerlink" title="检索与回归指标"></a>检索与回归指标</h1><h2 id="IOU"><a href="#IOU" class="headerlink" title="IOU"></a>IOU</h2><p><img src="http://image.shuiyujie.com/2019-09-21-00-45-23.png" alt="IOU"></p><p>IoU全称Intersection-over-Union， 即交并比，在目标检测领域中，定义为两个矩形框面积的交集和并集的比值，$IoU=A∩B/A∪B$。</p><p>如果完全重叠，则IoU等于1，是最理想的情况。一般在检测任务中，IoU大于等于0.5就认为召回，如果设置更高的IoU阈值，则召回率下降，同时定位框也越更加精确。</p><p>在图像分割中也会经常使用IoU，此时就不必限定为两个矩形框的面积。比如对于二分类的前背景分割，那么IoU=(真实前景像素面积∩预测前景像素面积)/(真实前景像素面积∪预测前景像素面积)，这一个指标，通常比直接计算每一个像素的分类正确概率要低，也对错误分类更加敏感。</p><h2 id="AP和mAP"><a href="#AP和mAP" class="headerlink" title="AP和mAP"></a>AP和mAP</h2><p>Average Precision简称AP，这是一个在检索任务和回归任务中经常使用的指标，实际等于Precision-Recall曲线下的面积，这个曲线在上一小节已经说过。</p><p>在PASCAL VOC 2010年以前的比赛中，AP的具体计算方法如下：</p><p>设置11个阈值c$[0, 0.1, 0.2, … , 1]$，计算recall大于等于每一个阈值时的最大 precision，AP就是这 11 个值的平均值。根据上表中的计算方法，选择不同的N时会有不同的 precision 和 recall，所以也有可能有不同的N落在同样的recall区间，此时就需要选择其中最大的精度值，这时候曲线上的点就不一定对应同一个阈值时的recall。</p><p>AP就是这11个precision的平均值，将所有类别的AP再取平均，就得到了mAP。</p><p>PASCAL VOC 2010年提出了一个更好的指标，去除了11点的设定，对于样本不均衡的类的计算更加有效。</p><p>假设有N个id，其中有M个label，则取M个recall节点，从0到1按照1/M的等间距，对于每个recall值，计算出大于该recall值的最大precision，然后对这M个precision值取平均得到最后的AP值，mAP的计算方法不变。</p><p>AP衡量的是学出来的模型在一个类别上的好坏，mAP衡量的是学出的模型在所有类别上的好坏。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] Yuan Y, Guo Q, Lu X, et al. Image quality assessment[J]. Neurocomputing, 2015: 227-241.</p><p>[2] Kamble V, Bhurchandi K M. No-reference image quality assessment algorithms: A survey[J]. Optik, 2015, 126(11): 1090-1097.</p><p>[3] 龙鹏. MRI医学图像增强与分割新方法[D]. 中国科学院大学, 2015.</p><p>[4] Xu Q , Huang G , Yuan Y , et al. An empirical study on evaluation metrics of generative adversarial networks[J]. 2018.</p>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deeplearning </tag>
            
            <tag> 模型评估 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机视觉中的数据增强</title>
      <link href="/post/8e94d850.html"/>
      <url>/post/8e94d850.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://image.shuiyujie.com/2019-09-20-23-18-07.png" alt="数据增强"></p><p>在实际工作中有很大一个难题就是收集到足够的数据，而数据就像是燃料，没有足够的数据训练的模型效果不会太好。所以要保证完美完成任务，有两件事必须要做好：</p><ol><li>寻找更多的数据</li><li>充分利用已有的数据进行数据增强</li></ol><p>本文就来聊聊数据增强的话题。</p><blockquote><p>覆盖主流数据增强算法</p><p><a href="https://github.com/aleju/imgaug" target="_blank" rel="noopener">https://github.com/aleju/imgaug</a></p><p>数据增强注意事项：</p><ol><li>在线使用，不要离线生产样本</li><li>不要过度使用，过多的数据增强可能增加训练难度和事件</li><li>有些任务某些增强不能做，比如姿态估计中随机反转，旋转</li></ol></blockquote><a id="more"></a><h1 id="为什么要了解数据增强"><a href="#为什么要了解数据增强" class="headerlink" title="为什么要了解数据增强"></a>为什么要了解数据增强</h1><h2 id="Q-多少数据才能满足项目要求？"><a href="#Q-多少数据才能满足项目要求？" class="headerlink" title="Q: 多少数据才能满足项目要求？"></a>Q: 多少数据才能满足项目要求？</h2><ol><li>任务类型有关，越精细任务要求越多（分类 &gt; 检测 &gt; 分割）</li><li>任务难度 ImageNet（每个类约500个），Place365（每个类约5000个）</li><li>精度要求有关（学术任务，工业级产品）</li></ol><h2 id="Q-数据增强和泛化能力的关系？"><a href="#Q-数据增强和泛化能力的关系？" class="headerlink" title="Q: 数据增强和泛化能力的关系？"></a>Q: 数据增强和泛化能力的关系？</h2><p>增强模型泛化能力的方法：</p><ul><li>显示正则化（模型集成，参数正则化等）</li><li>隐式正则化（数据增强，随机梯度下降等）</li></ul><h2 id="Q-什么是数据增强？"><a href="#Q-什么是数据增强？" class="headerlink" title="Q: 什么是数据增强？"></a>Q: 什么是数据增强？</h2><p>数据增强也叫数据扩增，意思是在不实质性的增加数据的情况下，让有限的数据产生等价于更多数据的价值。</p><p>eg. 分辨率大小为 256x256 的图像，随机裁剪成 224x224 的代销，一张图就可以产生 32x32 张不同的图，数据量将近扩充 1000 倍。</p><h2 id="Q-通过裁剪得到的很多图像相似度很高，那么这样的数据增强有效果么？"><a href="#Q-通过裁剪得到的很多图像相似度很高，那么这样的数据增强有效果么？" class="headerlink" title="Q: 通过裁剪得到的很多图像相似度很高，那么这样的数据增强有效果么？"></a>Q: 通过裁剪得到的很多图像相似度很高，那么这样的数据增强有效果么？</h2><p>操作虽然简单，但是有效果，如果辅助其他数据增强的方法，将获得更好的多样性，这就是数据增强的本质。</p><h1 id="常见数据增强的方法"><a href="#常见数据增强的方法" class="headerlink" title="常见数据增强的方法"></a>常见数据增强的方法</h1><p><strong>单样本几何变换</strong></p><blockquote><p>翻转，旋转，裁剪，缩放</p><p>没有改变图像本身的内容，选择了图像的一部分或者像素的空间重分布</p></blockquote><p><strong>单样本像素内容变换</strong></p><blockquote><p>噪声，模糊，颜色扰动</p><p>内容改动大，多样性强</p></blockquote><p><strong>多样本插值 SMOT</strong></p><blockquote><p>Synthetic Minority Over-sampling Technique 方法，近邻样本(Xn,Yn)插值</p></blockquote><p><strong>Sample Pairing</strong></p><blockquote><p>随机抽取两张图片分别经过基础数据增强操作（如随机翻转等）处理后，直接叠加合成一个新的样本，标签为原样本标签中的一种</p></blockquote><p><strong>多样本插值 Mixup</strong></p><blockquote><p>ICLR2018, Facebook 的研究 Mixup，图像和标签都进行线性插值</p></blockquote><h1 id="自动选择数据增强方法"><a href="#自动选择数据增强方法" class="headerlink" title="自动选择数据增强方法"></a>自动选择数据增强方法</h1><p><img src="http://image.shuiyujie.com/2019-09-20-23-26-11.png" alt="AutoAugmentation"></p><p>学习已有数据增强操作的组合，不同的任务，需要不同的数据增强操作。</p><p><strong>AutoAugmentation 原理</strong></p><ul><li>从 16 个<strong>常用数据增强操作</strong>中选择 5 个操作，随机产生使用该操作的概率和相应的幅度，将其称为一个 sub-policy，一共产生 5 个 sub-polices</li><li>对训练过程中每一个 batch 的图片，随机采用 5 个 sub-polices 操作中的一种</li><li>通过模型在验证集上的泛化能力来反馈，使用的优化方法是增强学习方法</li><li>经过 80~100 个 epoch 后网络开始学习到有效的 sub-policies</li><li>之后串接这 5 个 sub-policies，然后再进行最后的训练</li></ul><p><img src="http://image.shuiyujie.com/2019-09-20-23-27-25.png" alt="16 个常用的数据增强操作"></p><h1 id="从零制作新的样本"><a href="#从零制作新的样本" class="headerlink" title="从零制作新的样本"></a>从零制作新的样本</h1><p><img src="http://image.shuiyujie.com/2019-09-20-23-29-12.png" alt="GAN"></p><p>使用生成对抗网络，生成新的样本。</p><h1 id="开源框架中的数据增强"><a href="#开源框架中的数据增强" class="headerlink" title="开源框架中的数据增强"></a>开源框架中的数据增强</h1><ul><li>caffe 中数据增强：<ul><li>caffe.proto 中增加参数</li><li>Datatransform 中 .cpp 函数实现</li><li>Datatransform 中 .cpp 函数调用</li><li>train.prototxt 中网络配置</li><li>在 <a href="https://github.com/YujieShui/Caffe_Long/blob/master/src/caffe/proto/caffe.proto" target="_blank" rel="noopener">caffe.proto </a>中增加参数</li></ul></li><li>TensorFlow 数据增强 —— tf.image API</li><li>pytorch 数据增强 —— torchvision.transforms API</li><li>mxnet 数据增强 —— mxnet.image API</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] Chawla N V, Bowyer K W, Hall L O, et al. SMOTE: synthetic minority over-sampling technique[J]. Journal of Artificial Intelligence Research, 2002, 16(1):321-357.</p><p>[2] Inoue H. Data Augmentation by Pairing Samples for Images Classification[J]. 2018.</p><p>[3] Zhang H, Cisse M, Dauphin Y N, et al. mixup: Beyond Empirical Risk Minimization[J]. 2017.</p><p>[4] Goodfellow I J, Pouget-Abadie J, Mirza M, et al. Generative Adversarial Networks[J]. Advances in Neural Information Processing Systems, 2014, 3:2672-2680.</p><p>[5] Cubuk E D, Zoph B, Mane D, et al. AutoAugment: Learning Augmentation Policies from Data.[J]. arXiv: Computer Vision and Pattern Recognition, 2018.</p>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deeplearning </tag>
            
            <tag> 数据增强 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据集-ImageNet</title>
      <link href="/post/9dd18af0.html"/>
      <url>/post/9dd18af0.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://image.shuiyujie.com/2019-09-20-22-13-48.png" alt="ImageNet"></p><p><strong><a href="http://www.image-net.org/" target="_blank" rel="noopener">ImageNet</a></strong>  是李飞飞实验室主导的一个项目,目标是构建一个计算机视觉研究的大型数据库,关键词从 WordNet 中选取.完整的 ImageNet 数据集有 1400 多万幅图片,涵盖 2 万多个类别的标注与超过百万的边界狂标注,每一个类别大概是 500~1000 张图片,标注采用亚马逊的众包平台,这个平台之后被用于构建各种数据集。</p><p>2009年CVPR会议室李飞飞实验室正式发布了 ImageNet，此后从2010年到2017年共举办了8届 Large Scale Visual Recognition Challenge，即为人熟知的 yILSVRC比赛，包括图像分类，目标检测，目标定位单元。</p><p>数据集地址: <a href="http://www.image-net.org/" target="_blank" rel="noopener">http://www.image-net.org/.</a> </p><a id="more"></a><p>在最开始的时候， ImageNetR是一个连经费都申请不到的整理数据的项目，为很多专注于算法研究的学术人员不耻，但科技公司的竞赛热情以及数据集史无前例的多样性，让陷身于过拟合的算法，从数据集本身看到了新的出路，之后极大的推进了计算机视觉任务的发展。</p><p>由于类别多， ImageNet MNIST数据集整理过程中那样简单的将所有图片分成互不相干的10类，而是采用了中树形结构的组织方式。比如从哺乳动物关键词开始整理，然后不断细分到有胎盘哺乳动物，到肉食动物，到犬科动物，到狗，到工作中的狗，到哈士奇。</p><p><img src="http://image.shuiyujie.com/2019-09-20-22-15-44.png" alt="dog in imageNet"></p><h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><p>2005年，李飞飞从加州理工大学拿到电子工程学博士学位后进入了学术界，开始在伊利诺伊州香槟分校担任教职。那时她看到整个学术界和工业界重心都放在如何做出更好的算法，认为无论数据如何，只要算法好就会有好的决策。她意识到了这样做的局限，并且想到了一个解决方法，就是做一个能详细描绘出整个世界物体的数据集。她回忆起当时的情景深情地说道；“当时每个人对此都是一副怀疑的态度，但是 Kai Li（ 李凯，普林斯顿Princeton大学教授，美国工程院院士） 做了两件厉害的事情，他说：‘飞飞，你的教授生涯刚刚开始，你想要做的事情，我实验室的所有的机器都可以拿来帮你，而且我还会给你一个学生。’如果没有这样的支持，我是没办法开始做 ImageNet 的。”于是李飞飞、Jia Deng（ 邓嘉，李飞飞的学生） 等研究员在 CVPR 2009 上发表了一篇名为《ImageNet: A Large-Scale Hierarchical Image Database》的论文，没过多久，这个数据集就迅速发展成一项竞赛，通过对数据集中的物体进行识别，选出识别错误率最低的算法。</p><h1 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h1><p>自2010年以来，每年度ImageNet大规模视觉识别挑战赛（ILSVRC），研究团队在给定的数据集上评估其算法，并在几项视觉识别任务中争夺更高的准确性。 ILSVRC旨在“追踪2005年建立的规模较小的PASCAL VOC挑战”，该挑战仅包含大约20000个图像和20个目标类别。 ILSVRC使用仅包含1000个图像类别或“类别”的“修剪”列表，其中120个品种中有90个由完整的ImageNet架构分类。 2010年在图像处理方面取得了显着进展。 2011年左右，ILSVRC分类错误率为25%。 2012年，深卷积神经网络达到了16%;在接下来的几年中，错误率下降到几个百分点。虽然2012年的突破是“前所未有的组合”，但大幅量化的改进标志着全行业人工智能繁荣的开始。到2015年，研究人员报告说，软件在狭窄的ILSVRC任务中超出人类能力。然而，作为挑战组织者之一的Olga Russakovsky在2015年指出，这些计划只需将图像识别为属于千分之一的图像;人类可以识别更多的类别，并且（不像程序）可以判断图像的上下文。2017年，38个竞争团队中有29个错误率低于5%。识别错误率已经远远低于人类的5.1%， ImageNet宣布ILSVRC比赛不再举办，原因是已经失去意义，大家都这么高啦，差别都都很小，再比下去有点浪费大师们的时间。另外就是这个比赛已经证明了在视觉感知这块计算机已经可以战胜人类了，ImageNet竞赛初衷已经实现。</p><h1 id="影响力"><a href="#影响力" class="headerlink" title="影响力"></a>影响力</h1><p>ImageNet竞赛极大的推动深度学习在计算机视觉领域的应用，同时也是更多的认识到数据与算法是同等重要，改变过去了只是偏面强调算法的做法，提升了数据在深度学习中的地位。李飞飞独辟蹊径的研究之路从数据开始，颠覆与革新了很多人的认知，也让她自己功成名就成为享誉世界的学术大神。同时让深度学习走到到舞台的中心，推动了学术发展与工程技术的进步，很多中国的公司与高校也积极参加了此项赛事并且屡次都有斩获，但是这其中媒体报道的比较多的有两件事情：一是在2015年的百度多次提交违反比赛规则问题，百度解除了深度学习研究院杰出科学家吴韧的职务以平息此次事件影响。二是在最后一届2017年的比赛中国家千人计划学者，新加坡国立大学副教授、360集团副总裁、人工智能研究院院长颜水成团队获得多个项目比赛的第一名，用他自己的话说，抗日战争打八年都胜利了，ImageNet他也参加了八次比赛终于来到第一的位置上，可以说是名至实归。</p><h1 id="启示"><a href="#启示" class="headerlink" title="启示"></a>启示</h1><p>关于ImageNet竞赛给我们带来的启示是任何成功都不是偶然的，都是长期坚持与努力的付出，李飞飞从创建ImageNet到正式发布开始2010年的第一届比赛用了三年时间、Hinton大神专注神经网络学习与研究，为了回应外界对他质疑，派其高徒Alex应用卷积神经网络参加ImageNet数据大赛，结果大获全胜，从此开创了深度神经网络空前的高潮。而在此之前，Hinton大神的团队曾经面临着研究经费都没有着落的窘境。颜水成从开始参加竞赛到最后笑傲群雄用了八年时间。这个世界哪有随随便便就可以成功的事情，深处在这个浮躁的时代，守得了自己的内心、坚持住自己的努力，不负光阴岁月，才有资格说失败两字。不是一番寒彻骨、哪有梅花扑鼻香！</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NDIyMjM1NA==&amp;mid=2649030010&amp;idx=1&amp;sn=76e0123bf24064c4cb1eb7acacac86fd&amp;chksm=87134307b064ca1169f6412000bd44da1852ca2854f659fb341356d2d1e61a1c883a555fb0ca&amp;mpshare=1&amp;scene=1&amp;srcid=0417IV2IkrVUDSwHZDft59VS#rd" target="_blank" rel="noopener">【数据】深度学习从“数据集”开始</a></p><h1 id="分类标签"><a href="#分类标签" class="headerlink" title="分类标签"></a>分类标签</h1><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">https://gist.github.com/yrevar/942d3a0ac09ec9e5eb3a</span><br><span class="line">n01440764 鱼</span><br><span class="line">n01443537 鱼</span><br><span class="line">n01484850 鱼</span><br><span class="line">n01491361 鱼</span><br><span class="line">n01494475 鱼</span><br><span class="line">n01496331 鱼</span><br><span class="line">n01498041 鱼</span><br><span class="line">n01514668 鸡</span><br><span class="line">n01514859 鸡</span><br><span class="line">n01518878 鸵鸟</span><br><span class="line">n01530575 鸟</span><br><span class="line">n01531178 鸟</span><br><span class="line">n01532829 鸟</span><br><span class="line">n01534433 鸟</span><br><span class="line">n01537544 鸟</span><br><span class="line">n01558993 鸟</span><br><span class="line">n01560419 鸟</span><br><span class="line">n01580077 鸟</span><br><span class="line">n01582220 鸟</span><br><span class="line">n01592084 鸟</span><br><span class="line">n01601694 鸟</span><br><span class="line">n01608432 鸟</span><br><span class="line">n01614925 鹰</span><br><span class="line">n01616318 鹰</span><br><span class="line">n01622779 猫头鹰</span><br><span class="line">n01629819 壁虎</span><br><span class="line">n01630670 壁虎</span><br><span class="line">n01631663 壁虎</span><br><span class="line">n01632458 壁虎</span><br><span class="line">n01632777 壁虎</span><br><span class="line">n01641577 蛤蟆</span><br><span class="line">n01644373 青蛙</span><br><span class="line">n01644900 青蛙</span><br><span class="line">n01664065 龟</span><br><span class="line">n01665541 龟</span><br><span class="line">n01667114 龟</span><br><span class="line">n01667778 龟</span><br><span class="line">n01669191 龟</span><br><span class="line">n01675722 蜥蜴</span><br><span class="line">n01677366 蜥蜴</span><br><span class="line">n01682714 蜥蜴</span><br><span class="line">n01685808 蜥蜴</span><br><span class="line">n01687978 蜥蜴</span><br><span class="line">n01688243 蜥蜴</span><br><span class="line">n01689811 蜥蜴</span><br><span class="line">n01692333 蜥蜴</span><br><span class="line">n01693334 蜥蜴</span><br><span class="line">n01694178 蜥蜴</span><br><span class="line">n01695060 蜥蜴</span><br><span class="line">n01697457 鳄鱼</span><br><span class="line">n01698640 鳄鱼</span><br><span class="line">n01704323 恐龙</span><br><span class="line">n01728572 蛇</span><br><span class="line">n01728920 蛇</span><br><span class="line">n01729322 蛇</span><br><span class="line">n01729977 蛇</span><br><span class="line">n01734418 蛇</span><br><span class="line">n01735189 蛇</span><br><span class="line">n01737021 蛇</span><br><span class="line">n01739381 蛇</span><br><span class="line">n01740131 蛇</span><br><span class="line">n01742172 蛇</span><br><span class="line">n01744401 蛇</span><br><span class="line">n01748264 蛇</span><br><span class="line">n01749939 蛇</span><br><span class="line">n01751748 蛇</span><br><span class="line">n01753488 蛇</span><br><span class="line">n01755581 蛇</span><br><span class="line">n01756291 蛇</span><br><span class="line">n01768244 化石</span><br><span class="line">n01770081 蜘蛛</span><br><span class="line">n01770393 蝎子</span><br><span class="line">n01773157 蜘蛛</span><br><span class="line">n01773549 蜘蛛</span><br><span class="line">n01773797 蜘蛛</span><br><span class="line">n01774384 蜘蛛</span><br><span class="line">n01774750 蜘蛛</span><br><span class="line">n01775062 蜘蛛</span><br><span class="line">n01776313 蜘蛛</span><br><span class="line">n01784675 蜈蚣</span><br><span class="line">n01795545 鸟</span><br><span class="line">n01796340 鸟</span><br><span class="line">n01797886 鸟</span><br><span class="line">n01798484 鸟</span><br><span class="line">n01806143 孔雀</span><br><span class="line">n01806567 鸟</span><br><span class="line">n01807496 鸟</span><br><span class="line">n01817953 鸟</span><br><span class="line">n01818515 鸟</span><br><span class="line">n01819313 鸟</span><br><span class="line">n01820546 鸟</span><br><span class="line">n01824575 鸟</span><br><span class="line">n01828970 鸟</span><br><span class="line">n01829413 鸟</span><br><span class="line">n01833805 鸟</span><br><span class="line">n01843065 鸟</span><br><span class="line">n01843383 鸟</span><br><span class="line">n01847000 鸭子</span><br><span class="line">n01855032 鹅</span><br><span class="line">n01855672 鹅</span><br><span class="line">n01860187 鹅</span><br><span class="line">n01871265 大象</span><br><span class="line">n01872401 刺猬</span><br><span class="line">n01873310 鸭嘴兽</span><br><span class="line">n01877812 袋鼠</span><br><span class="line">n01882714 考拉</span><br><span class="line">n01883070 土拨鼠</span><br><span class="line">n01910747 水母</span><br><span class="line">n01914609 珊瑚</span><br><span class="line">n01917289 珊瑚</span><br><span class="line">n01924916 海洋生物</span><br><span class="line">n01930112 海蛇</span><br><span class="line">n01943899 海螺</span><br><span class="line">n01944390 蜗牛</span><br><span class="line">n01945685 蜗牛</span><br><span class="line">n01950731 海洋生物</span><br><span class="line">n01955084 海洋生物</span><br><span class="line">n01968897 海螺</span><br><span class="line">n01978287 螃蟹</span><br><span class="line">n01978455 螃蟹</span><br><span class="line">n01980166 螃蟹</span><br><span class="line">n01981276 螃蟹</span><br><span class="line">n01983481 龙虾</span><br><span class="line">n01984695 龙虾</span><br><span class="line">n01985128 龙虾</span><br><span class="line">n01986214 寄居蟹</span><br><span class="line">n01990800 海洋生物</span><br><span class="line">n02002556 鸟</span><br><span class="line">n02002724 鸟</span><br><span class="line">n02006656 鸟</span><br><span class="line">n02007558 鸟</span><br><span class="line">n02009229 鸟</span><br><span class="line">n02009912 鸟</span><br><span class="line">n02011460 鸟</span><br><span class="line">n02012849 鸟</span><br><span class="line">n02013706 鸟</span><br><span class="line">n02017213 鸟</span><br><span class="line">n02018207 鸟</span><br><span class="line">n02018795 鸟</span><br><span class="line">n02025239 鸟</span><br><span class="line">n02027492 鸟</span><br><span class="line">n02028035 鸟</span><br><span class="line">n02033041 鸟</span><br><span class="line">n02037110 鸟</span><br><span class="line">n02051845 鸟</span><br><span class="line">n02056570 企鹅</span><br><span class="line">n02058221 鸟</span><br><span class="line">n02066245 鲸鱼</span><br><span class="line">n02071294 鲸鱼</span><br><span class="line">n02074367 海象</span><br><span class="line">n02077923 海狮</span><br><span class="line">n02085620 狗</span><br><span class="line">n02085782 狗</span><br><span class="line">n02085936 狗</span><br><span class="line">n02086079 狗</span><br><span class="line">n02086240 狗</span><br><span class="line">n02086646 狗</span><br><span class="line">n02086910 狗</span><br><span class="line">n02087046 狗</span><br><span class="line">n02087394 狗</span><br><span class="line">n02088094 狗</span><br><span class="line">n02088238 狗</span><br><span class="line">n02088364 狗</span><br><span class="line">n02088466 狗</span><br><span class="line">n02088632 狗</span><br><span class="line">n02089078 狗</span><br><span class="line">n02089867 狗</span><br><span class="line">n02089973 狗</span><br><span class="line">n02090379 狗</span><br><span class="line">n02090622 狗</span><br><span class="line">n02090721 狗</span><br><span class="line">n02091032 狗</span><br><span class="line">n02091134 狗</span><br><span class="line">n02091244 狗</span><br><span class="line">n02091467 狗</span><br><span class="line">n02091635 狗</span><br><span class="line">n02091831 狗</span><br><span class="line">n02092002 狗</span><br><span class="line">n02092339 狗</span><br><span class="line">n02093256 狗</span><br><span class="line">n02093428 狗</span><br><span class="line">n02093647 狗</span><br><span class="line">n02093754 狗</span><br><span class="line">n02093859 狗</span><br><span class="line">n02093991 狗</span><br><span class="line">n02094114 狗</span><br><span class="line">n02094258 狗</span><br><span class="line">n02094433 狗</span><br><span class="line">n02095314 狗</span><br><span class="line">n02095570 狗</span><br><span class="line">n02095889 狗</span><br><span class="line">n02096051 狗</span><br><span class="line">n02096177 狗</span><br><span class="line">n02096294 狗</span><br><span class="line">n02096437 狗</span><br><span class="line">n02096585 狗</span><br><span class="line">n02097047 狗</span><br><span class="line">n02097130 狗</span><br><span class="line">n02097209 狗</span><br><span class="line">n02097298 狗</span><br><span class="line">n02097474 狗</span><br><span class="line">n02097658 狗</span><br><span class="line">n02098105 狗</span><br><span class="line">n02098286 狗</span><br><span class="line">n02098413 狗</span><br><span class="line">n02099267 狗</span><br><span class="line">n02099429 狗</span><br><span class="line">n02099601 狗</span><br><span class="line">n02099712 狗</span><br><span class="line">n02099849 狗</span><br><span class="line">n02100236 狗</span><br><span class="line">n02100583 狗</span><br><span class="line">n02100735 狗</span><br><span class="line">n02100877 狗</span><br><span class="line">n02101006 狗</span><br><span class="line">n02101388 狗</span><br><span class="line">n02101556 狗</span><br><span class="line">n02102040 狗</span><br><span class="line">n02102177 狗</span><br><span class="line">n02102318 狗</span><br><span class="line">n02102480 狗</span><br><span class="line">n02102973 狗</span><br><span class="line">n02104029 狗</span><br><span class="line">n02104365 狗</span><br><span class="line">n02105056 狗</span><br><span class="line">n02105162 狗</span><br><span class="line">n02105251 狗</span><br><span class="line">n02105412 狗</span><br><span class="line">n02105505 狗</span><br><span class="line">n02105641 狗</span><br><span class="line">n02105855 狗</span><br><span class="line">n02106030 狗</span><br><span class="line">n02106166 狗</span><br><span class="line">n02106382 狗</span><br><span class="line">n02106550 狗</span><br><span class="line">n02106662 狗</span><br><span class="line">n02107142 狗</span><br><span class="line">n02107312 狗</span><br><span class="line">n02107574 狗</span><br><span class="line">n02107683 狗</span><br><span class="line">n02107908 狗</span><br><span class="line">n02108000 狗</span><br><span class="line">n02108089 狗</span><br><span class="line">n02108422 狗</span><br><span class="line">n02108551 狗</span><br><span class="line">n02108915 狗</span><br><span class="line">n02109047 狗</span><br><span class="line">n02109525 狗</span><br><span class="line">n02109961 狗</span><br><span class="line">n02110063 狗</span><br><span class="line">n02110185 狗</span><br><span class="line">n02110341 狗</span><br><span class="line">n02110627 狗</span><br><span class="line">n02110806 狗</span><br><span class="line">n02110958 狗</span><br><span class="line">n02111129 狗</span><br><span class="line">n02111277 狗</span><br><span class="line">n02111500 狗</span><br><span class="line">n02111889 狗</span><br><span class="line">n02112018 狗</span><br><span class="line">n02112137 狗</span><br><span class="line">n02112350 狗</span><br><span class="line">n02112706 狗</span><br><span class="line">n02113023 狗</span><br><span class="line">n02113186 狗</span><br><span class="line">n02113624 狗</span><br><span class="line">n02113712 狗</span><br><span class="line">n02113799 狗</span><br><span class="line">n02113978 狗</span><br><span class="line">n02114367 狼</span><br><span class="line">n02114548 狼</span><br><span class="line">n02114712 狼</span><br><span class="line">n02114855 狼</span><br><span class="line">n02115641 狼</span><br><span class="line">n02115913 狼</span><br><span class="line">n02116738 狼</span><br><span class="line">n02117135 狼</span><br><span class="line">n02119022 狐狸</span><br><span class="line">n02119789 狐狸</span><br><span class="line">n02120079 狐狸</span><br><span class="line">n02120505 狐狸</span><br><span class="line">n02123045 猫</span><br><span class="line">n02123159 猫</span><br><span class="line">n02123394 猫</span><br><span class="line">n02123597 猫</span><br><span class="line">n02124075 猫</span><br><span class="line">n02125311 猫</span><br><span class="line">n02127052 猫</span><br><span class="line">n02128385 豹</span><br><span class="line">n02128757 豹</span><br><span class="line">n02128925 豹</span><br><span class="line">n02129165 狮子</span><br><span class="line">n02129604 老虎</span><br><span class="line">n02130308 豹</span><br><span class="line">n02132136 熊</span><br><span class="line">n02133161 熊</span><br><span class="line">n02134084 熊</span><br><span class="line">n02134418 熊</span><br><span class="line">n02137549 猫鼬</span><br><span class="line">n02138441 猫鼬</span><br><span class="line">n02165105 昆虫</span><br><span class="line">n02165456 昆虫</span><br><span class="line">n02167151 昆虫</span><br><span class="line">n02168699 昆虫</span><br><span class="line">n02169497 昆虫</span><br><span class="line">n02172182 昆虫</span><br><span class="line">n02174001 昆虫</span><br><span class="line">n02177972 昆虫</span><br><span class="line">n02190166 昆虫</span><br><span class="line">n02206856 昆虫</span><br><span class="line">n02219486 昆虫</span><br><span class="line">n02226429 昆虫</span><br><span class="line">n02229544 昆虫</span><br><span class="line">n02231487 昆虫</span><br><span class="line">n02233338 昆虫</span><br><span class="line">n02236044 昆虫</span><br><span class="line">n02256656 昆虫</span><br><span class="line">n02259212 昆虫</span><br><span class="line">n02264363 昆虫</span><br><span class="line">n02268443 蜻蜓</span><br><span class="line">n02268853 蜻蜓</span><br><span class="line">n02276258 蝴蝶</span><br><span class="line">n02277742 蝴蝶</span><br><span class="line">n02279972 蝴蝶</span><br><span class="line">n02280649 蝴蝶</span><br><span class="line">n02281406 蝴蝶</span><br><span class="line">n02281787 蝴蝶</span><br><span class="line">n02317335 海星</span><br><span class="line">n02319095 海胆</span><br><span class="line">n02321529 海洋生物</span><br><span class="line">n02325366 兔子</span><br><span class="line">n02326432 兔子</span><br><span class="line">n02328150 兔子</span><br><span class="line">n02342885 鼠</span><br><span class="line">n02346627 鼠</span><br><span class="line">n02356798 松鼠</span><br><span class="line">n02361337 鼠</span><br><span class="line">n02363005 鼠</span><br><span class="line">n02364673 鼠</span><br><span class="line">n02389026 马</span><br><span class="line">n02391049 斑马</span><br><span class="line">n02395406 猪</span><br><span class="line">n02396427 猪</span><br><span class="line">n02397096 猪</span><br><span class="line">n02398521 河马</span><br><span class="line">n02403003 牛</span><br><span class="line">n02408429 牛</span><br><span class="line">n02410509 牛</span><br><span class="line">n02412080 羊</span><br><span class="line">n02415577 羊</span><br><span class="line">n02417914 羊</span><br><span class="line">n02422106 羊</span><br><span class="line">n02422699 羊</span><br><span class="line">n02423022 羊</span><br><span class="line">n02437312 骆驼</span><br><span class="line">n02437616 羊驼</span><br><span class="line">n02441942 狸</span><br><span class="line">n02442845 狸</span><br><span class="line">n02443114 狸</span><br><span class="line">n02443484 狸</span><br><span class="line">n02444819 狸</span><br><span class="line">n02445715 狸</span><br><span class="line">n02447366 狸</span><br><span class="line">n02454379 穿山甲</span><br><span class="line">n02457408 树懒</span><br><span class="line">n02480495 狒狒</span><br><span class="line">n02480855 猩猩</span><br><span class="line">n02481823 猴子</span><br><span class="line">n02483362 猴子</span><br><span class="line">n02483708 猴子</span><br><span class="line">n02484975 猴子</span><br><span class="line">n02486261 猴子</span><br><span class="line">n02486410 猴子</span><br><span class="line">n02487347 猴子</span><br><span class="line">n02488291 猴子</span><br><span class="line">n02488702 猴子</span><br><span class="line">n02489166 猴子</span><br><span class="line">n02490219 猴子</span><br><span class="line">n02492035 猴子</span><br><span class="line">n02492660 猴子</span><br><span class="line">n02493509 猴子</span><br><span class="line">n02493793 猴子</span><br><span class="line">n02494079 猴子</span><br><span class="line">n02497673 猴子</span><br><span class="line">n02500267 猴子</span><br><span class="line">n02504013 大象</span><br><span class="line">n02504458 大象</span><br><span class="line">n02509815 浣熊</span><br><span class="line">n02510455 熊猫</span><br><span class="line">n02514041 鱼</span><br><span class="line">n02526121 鱼</span><br><span class="line">n02536864 鱼</span><br><span class="line">n02606052 鱼</span><br><span class="line">n02607072 鱼</span><br><span class="line">n02640242 鱼</span><br><span class="line">n02641379 鱼</span><br><span class="line">n02643566 鱼</span><br><span class="line">n02655020 鱼</span><br><span class="line">n02666196 算盘</span><br><span class="line">n02667093 穆斯林</span><br><span class="line">n02669723 学士服</span><br><span class="line">n02672831 手风琴</span><br><span class="line">n02676566 吉他</span><br><span class="line">n02687172 航空母舰</span><br><span class="line">n02690373 飞机</span><br><span class="line">n02692877 飞艇</span><br><span class="line">n02699494 教堂</span><br><span class="line">n02701002 救护车 check</span><br><span class="line">n02704792 水陆两用车 check</span><br><span class="line">n02708093 钟</span><br><span class="line">n02727426 箱子</span><br><span class="line">n02730930 围裙</span><br><span class="line">n02747177 垃圾箱</span><br><span class="line">n02749479 枪</span><br><span class="line">n02769748 背包</span><br><span class="line">n02776631 面包柜</span><br><span class="line">n02777292 体操</span><br><span class="line">n02782093 热气球</span><br><span class="line">n02783161 钢笔</span><br><span class="line">n02786058 邦迪</span><br><span class="line">n02787622 乐器</span><br><span class="line">n02788148 楼梯</span><br><span class="line">n02790996 杠铃</span><br><span class="line">n02791124 座椅</span><br><span class="line">n02791270 理发</span><br><span class="line">n02793495 木屋</span><br><span class="line">n02794156 表</span><br><span class="line">n02795169 酒桶</span><br><span class="line">n02797295 手推车</span><br><span class="line">n02799071 棒球</span><br><span class="line">n02802426 篮球</span><br><span class="line">n02804414 婴儿</span><br><span class="line">n02804610 乐器</span><br><span class="line">n02807133 游泳</span><br><span class="line">n02808304 婴儿毛巾</span><br><span class="line">n02808440 浴缸</span><br><span class="line">n02814533 轿车 check</span><br><span class="line">n02814860 灯塔</span><br><span class="line">n02815834 烧杯</span><br><span class="line">n02817516 守卫</span><br><span class="line">n02823428 啤酒</span><br><span class="line">n02823750 啤酒</span><br><span class="line">n02825657 建筑</span><br><span class="line">n02834397 围兜</span><br><span class="line">n02835271 双人自行车</span><br><span class="line">n02837789 比基尼</span><br><span class="line">n02840245 笔记本</span><br><span class="line">n02841315 望远镜</span><br><span class="line">n02843684 信箱</span><br><span class="line">n02859443 小屋</span><br><span class="line">n02860847 雪橇</span><br><span class="line">n02865351 项链</span><br><span class="line">n02869837 帽子</span><br><span class="line">n02870880 书柜</span><br><span class="line">n02871525 书店</span><br><span class="line">n02877765 瓶盖</span><br><span class="line">n02879718 弓箭</span><br><span class="line">n02883205 领结</span><br><span class="line">n02892201 墓碑</span><br><span class="line">n02892767 胸罩</span><br><span class="line">n02894605 海岸</span><br><span class="line">n02895154 盔甲</span><br><span class="line">n02906734 扫帚</span><br><span class="line">n02909870 水桶</span><br><span class="line">n02910353 皮带</span><br><span class="line">n02916936 防弹背心</span><br><span class="line">n02917067 火车</span><br><span class="line">n02927161 肉铺</span><br><span class="line">n02930766 出租车 check</span><br><span class="line">n02939185 锅</span><br><span class="line">n02948072 蜡烛</span><br><span class="line">n02950826 炮</span><br><span class="line">n02951358 艇</span><br><span class="line">n02951585 订书机</span><br><span class="line">n02963159 毛衣</span><br><span class="line">n02965783 反光镜</span><br><span class="line">n02966193 旋转木马</span><br><span class="line">n02966687 工具箱</span><br><span class="line">n02971356 盒子</span><br><span class="line">n02974003 轮胎</span><br><span class="line">n02977058 取款机</span><br><span class="line">n02978881 磁带</span><br><span class="line">n02979186 磁带</span><br><span class="line">n02980441 城堡</span><br><span class="line">n02981792 帆船</span><br><span class="line">n02988304 cd播放器</span><br><span class="line">n02992211 大提琴</span><br><span class="line">n02992529 手机</span><br><span class="line">n02999410 铁链</span><br><span class="line">n03000134 铁丝网</span><br><span class="line">n03000247 铁丝网</span><br><span class="line">n03000684 电锯</span><br><span class="line">n03014705 木箱</span><br><span class="line">n03016953 木柜</span><br><span class="line">n03017168 锣鼓</span><br><span class="line">n03018349 柜子</span><br><span class="line">n03026506 袜子</span><br><span class="line">n03028079 教堂</span><br><span class="line">n03032252 剧院</span><br><span class="line">n03041632 刀</span><br><span class="line">n03042490 堡垒</span><br><span class="line">n03045698 斗篷</span><br><span class="line">n03047690 鞋子</span><br><span class="line">n03062245 瓶子</span><br><span class="line">n03063599 杯子</span><br><span class="line">n03063689 壶</span><br><span class="line">n03065424 螺旋</span><br><span class="line">n03075370 锁</span><br><span class="line">n03085013 键盘</span><br><span class="line">n03089624 糖果</span><br><span class="line">n03095699 船</span><br><span class="line">n03100240 轿车 check</span><br><span class="line">n03109150 开瓶器</span><br><span class="line">n03110669 号（乐器）</span><br><span class="line">n03124043 靴子</span><br><span class="line">n03124170 帽子</span><br><span class="line">n03125729 婴儿床</span><br><span class="line">n03126707 起重机</span><br><span class="line">n03127747 头盔</span><br><span class="line">n03127925 木箱</span><br><span class="line">n03131574 婴儿床</span><br><span class="line">n03133878 电饭锅</span><br><span class="line">n03134739 推球</span><br><span class="line">n03141823 拐杖</span><br><span class="line">n03146219 盔甲</span><br><span class="line">n03160309 水库</span><br><span class="line">n03179701 办公桌</span><br><span class="line">n03180011 电脑</span><br><span class="line">n03187595 电话机</span><br><span class="line">n03188531 尿布</span><br><span class="line">n03196217 闹钟</span><br><span class="line">n03197337 手表</span><br><span class="line">n03201208 餐桌</span><br><span class="line">n03207743 垫子</span><br><span class="line">n03207941 洗碗柜</span><br><span class="line">n03208938 车轮</span><br><span class="line">n03216828 港口</span><br><span class="line">n03218198 雪橇</span><br><span class="line">n03220513 穹顶</span><br><span class="line">n03223299 地毯</span><br><span class="line">n03240683 油田</span><br><span class="line">n03249569 鼓</span><br><span class="line">n03250847 鼓棒</span><br><span class="line">n03255030 哑铃</span><br><span class="line">n03259280 锅</span><br><span class="line">n03271574 风扇</span><br><span class="line">n03272010 电吉他</span><br><span class="line">n03272562 火车 check</span><br><span class="line">n03290653 电视机</span><br><span class="line">n03291819 信</span><br><span class="line">n03297495 咖啡机</span><br><span class="line">n03314780 化妆品</span><br><span class="line">n03325584 绒毛</span><br><span class="line">n03337140 柜子</span><br><span class="line">n03344393 喷泉</span><br><span class="line">n03345487 消防车 check</span><br><span class="line">n03347037 壁炉</span><br><span class="line">n03355925 旗杆</span><br><span class="line">n03372029 笛子</span><br><span class="line">n03376595 座椅</span><br><span class="line">n03379051 橄榄球</span><br><span class="line">n03384352 叉车</span><br><span class="line">n03388043 喷泉</span><br><span class="line">n03388183 钢笔</span><br><span class="line">n03388549 床</span><br><span class="line">n03393912 火车</span><br><span class="line">n03394916 圆号</span><br><span class="line">n03400231 平底锅</span><br><span class="line">n03404251 裘皮</span><br><span class="line">n03417042 卡车 check</span><br><span class="line">n03424325 面具</span><br><span class="line">n03425413 加油</span><br><span class="line">n03443371 酒杯</span><br><span class="line">n03444034 卡丁车</span><br><span class="line">n03445777 高尔夫</span><br><span class="line">n03445924 高尔夫车</span><br><span class="line">n03447447 小船</span><br><span class="line">n03447721 锣鼓</span><br><span class="line">n03450230 婚纱</span><br><span class="line">n03452741 钢琴</span><br><span class="line">n03457902 大棚</span><br><span class="line">n03459775 轿车 车标 check</span><br><span class="line">n03461385 菜场</span><br><span class="line">n03467068 断头台</span><br><span class="line">n03476684 发饰</span><br><span class="line">n03476991 发蜡</span><br><span class="line">n03478589 坦克</span><br><span class="line">n03481172 榔头</span><br><span class="line">n03482405 竹筒</span><br><span class="line">n03483316 吹风机</span><br><span class="line">n03485407 pos机</span><br><span class="line">n03485794 手帕</span><br><span class="line">n03492542 硬盘</span><br><span class="line">n03494278 口风琴</span><br><span class="line">n03495258 竖琴</span><br><span class="line">n03496892 起重机</span><br><span class="line">n03498962 斧头</span><br><span class="line">n03527444 手枪</span><br><span class="line">n03529860 电视机</span><br><span class="line">n03530642 蜂巢</span><br><span class="line">n03532672 钩子</span><br><span class="line">n03534580 裙子</span><br><span class="line">n03535780 体操</span><br><span class="line">n03538406 马车</span><br><span class="line">n03544143 沙漏</span><br><span class="line">n03584254 音乐播放器</span><br><span class="line">n03584829 电熨斗</span><br><span class="line">n03590841 南瓜灯</span><br><span class="line">n03594734 牛仔裤</span><br><span class="line">n03594945 吉普车 check</span><br><span class="line">n03595614 T恤</span><br><span class="line">n03598930 拼图</span><br><span class="line">n03599486 黄包车</span><br><span class="line">n03602883 操纵杆</span><br><span class="line">n03617480 和服</span><br><span class="line">n03623198 护具</span><br><span class="line">n03627232 绳结</span><br><span class="line">n03630383 医生</span><br><span class="line">n03633091 勺子</span><br><span class="line">n03637318 灯</span><br><span class="line">n03642806 笔记本电脑</span><br><span class="line">n03649909 割草机</span><br><span class="line">n03657121 镜头盖</span><br><span class="line">n03658185 小刀</span><br><span class="line">n03661043 图书馆</span><br><span class="line">n03662601 救生船</span><br><span class="line">n03666591 打火机</span><br><span class="line">n03670208 加长车 check</span><br><span class="line">n03673027 轮船</span><br><span class="line">n03676483 口红</span><br><span class="line">n03680355 鞋子</span><br><span class="line">n03690938 护肤品</span><br><span class="line">n03691459 音响</span><br><span class="line">n03692522 放大镜</span><br><span class="line">n03697007 原木</span><br><span class="line">n03706229 指南针</span><br><span class="line">n03709823 包</span><br><span class="line">n03710193 邮箱</span><br><span class="line">n03710637 泳衣</span><br><span class="line">n03710721 泳衣</span><br><span class="line">n03717622 窨井盖</span><br><span class="line">n03720891 手摇铃</span><br><span class="line">n03721384 木琴</span><br><span class="line">n03724870 面具</span><br><span class="line">n03729826 火柴</span><br><span class="line">n03733131 绳子</span><br><span class="line">n03733281 迷宫</span><br><span class="line">n03733805 烧杯</span><br><span class="line">n03742115 冰箱</span><br><span class="line">n03743016 石柱</span><br><span class="line">n03759954 话筒</span><br><span class="line">n03761084 微波炉</span><br><span class="line">n03763968 军人</span><br><span class="line">n03764736 水壶</span><br><span class="line">n03769881 小客车 check</span><br><span class="line">n03770439 短裙</span><br><span class="line">n03770679 面包车 check</span><br><span class="line">n03773504 导弹</span><br><span class="line">n03775071 手套</span><br><span class="line">n03775546 碗</span><br><span class="line">n03776460 房车</span><br><span class="line">n03777568 老爷车</span><br><span class="line">n03777754 路由器</span><br><span class="line">n03781244 建筑</span><br><span class="line">n03782006 显示器</span><br><span class="line">n03785016 摩托车 check</span><br><span class="line">n03786901 砚</span><br><span class="line">n03787032 学士帽</span><br><span class="line">n03788195 建筑</span><br><span class="line">n03788365 蚊帐</span><br><span class="line">n03791053 助动车 check</span><br><span class="line">n03792782 自行车 check</span><br><span class="line">n03792972 帐篷</span><br><span class="line">n03793489 键盘鼠标</span><br><span class="line">n03794056 捕鼠夹</span><br><span class="line">n03796401 货车 卡车 check</span><br><span class="line">n03803284 狗嘴套</span><br><span class="line">n03804744 钉子</span><br><span class="line">n03814639 颈托</span><br><span class="line">n03814906 项链</span><br><span class="line">n03825788 奶瓶</span><br><span class="line">n03832673 笔记本电脑</span><br><span class="line">n03837869 建筑</span><br><span class="line">n03838899 黑管</span><br><span class="line">n03840681 埙</span><br><span class="line">n03841143 仪表盘</span><br><span class="line">n03843555 机油滤清器</span><br><span class="line">n03854065 管风琴</span><br><span class="line">n03857828 示波器</span><br><span class="line">n03866082 礼服</span><br><span class="line">n03868242 牛车</span><br><span class="line">n03868863 呼吸器</span><br><span class="line">n03871628 零食</span><br><span class="line">n03873416 划桨</span><br><span class="line">n03874293 水轮</span><br><span class="line">n03874599 锁</span><br><span class="line">n03876231 刷子</span><br><span class="line">n03877472 睡衣</span><br><span class="line">n03877845 建筑</span><br><span class="line">n03884397 乐器</span><br><span class="line">n03887697 纸巾</span><br><span class="line">n03888257 降落伞</span><br><span class="line">n03888605 体操</span><br><span class="line">n03891251 长椅</span><br><span class="line">n03891332 停车缴费器</span><br><span class="line">n03895866 火车 check</span><br><span class="line">n03899768 院子</span><br><span class="line">n03902125 公用电话</span><br><span class="line">n03903868 柱子</span><br><span class="line">n03908618 文具袋</span><br><span class="line">n03908714 卷笔刀</span><br><span class="line">n03916031 香水</span><br><span class="line">n03920288 培养皿</span><br><span class="line">n03924679 打印机</span><br><span class="line">n03929660 吉他拨片</span><br><span class="line">n03929855 头盔</span><br><span class="line">n03930313 栅栏</span><br><span class="line">n03930630 轿车 check</span><br><span class="line">n03933933 桥</span><br><span class="line">n03935335 储蓄罐</span><br><span class="line">n03937543 药丸</span><br><span class="line">n03938244 枕头</span><br><span class="line">n03942813 乒乓球</span><br><span class="line">n03944341 风车</span><br><span class="line">n03947888 帆船</span><br><span class="line">n03950228 茶壶</span><br><span class="line">n03954731 刨子</span><br><span class="line">n03956157 建筑</span><br><span class="line">n03958227 塑料袋</span><br><span class="line">n03961711 碗架</span><br><span class="line">n03967562 推土机</span><br><span class="line">n03970156 搋子</span><br><span class="line">n03976467 相机</span><br><span class="line">n03976657 杆子</span><br><span class="line">n03977966 警车 check</span><br><span class="line">n03980874 披风</span><br><span class="line">n03982430 桌球</span><br><span class="line">n03983396 瓶子</span><br><span class="line">n03991062 盆栽</span><br><span class="line">n03992509 陶艺</span><br><span class="line">n03995372 钻机</span><br><span class="line">n03998194 毯子</span><br><span class="line">n04004767 打印机</span><br><span class="line">n04005630 监狱</span><br><span class="line">n04008634 导弹</span><br><span class="line">n04009552 投影仪</span><br><span class="line">n04019541 冰球</span><br><span class="line">n04023962 拳击</span><br><span class="line">n04026417 手提袋</span><br><span class="line">n04033901 羽毛笔</span><br><span class="line">n04033995 床 被子</span><br><span class="line">n04037443 赛车</span><br><span class="line">n04039381 网球</span><br><span class="line">n04040759 加热器</span><br><span class="line">n04041544 收音机</span><br><span class="line">n04044716 卫星接收器</span><br><span class="line">n04049303 酒桶</span><br><span class="line">n04065272 房车</span><br><span class="line">n04067472 鱼竿</span><br><span class="line">n04069434 相机</span><br><span class="line">n04070727 冰箱</span><br><span class="line">n04074963 遥控器</span><br><span class="line">n04081281 餐厅</span><br><span class="line">n04086273 手枪</span><br><span class="line">n04090263 狙击枪</span><br><span class="line">n04099969 摇椅</span><br><span class="line">n04111531 烤箱</span><br><span class="line">n04116512 橡皮</span><br><span class="line">n04118538 橄榄球</span><br><span class="line">n04118776 尺</span><br><span class="line">n04120489 运动鞋</span><br><span class="line">n04125021 保险箱</span><br><span class="line">n04127249 回形针</span><br><span class="line">n04131690 调料瓶</span><br><span class="line">n04133789 拖鞋</span><br><span class="line">n04136333 长裙</span><br><span class="line">n04141076 萨克斯</span><br><span class="line">n04141327 剑</span><br><span class="line">n04141975 秤</span><br><span class="line">n04146614 校车</span><br><span class="line">n04147183 帆船</span><br><span class="line">n04149813 计分板</span><br><span class="line">n04152593 显示器</span><br><span class="line">n04153751 螺丝</span><br><span class="line">n04154565 螺丝刀</span><br><span class="line">n04162706 安全带</span><br><span class="line">n04179913 缝纫机</span><br><span class="line">n04192698 盾牌</span><br><span class="line">n04200800 鞋店</span><br><span class="line">n04201297 榻榻米</span><br><span class="line">n04204238 购物篮</span><br><span class="line">n04204347 购物车</span><br><span class="line">n04208210 铲子</span><br><span class="line">n04209133 浴帽</span><br><span class="line">n04209239 浴帘</span><br><span class="line">n04228054 滑雪</span><br><span class="line">n04229816 面罩</span><br><span class="line">n04235860 睡袋</span><br><span class="line">n04238763 游标卡尺</span><br><span class="line">n04239074 移门</span><br><span class="line">n04243546 老虎机</span><br><span class="line">n04251144 游泳眼镜</span><br><span class="line">n04252077 滑雪车</span><br><span class="line">n04252225 铲雪车</span><br><span class="line">n04254120 洗手液</span><br><span class="line">n04254680 足球</span><br><span class="line">n04254777 袜子</span><br><span class="line">n04258138 太阳能板</span><br><span class="line">n04259630 帽子</span><br><span class="line">n04263257 碗</span><br><span class="line">n04264628 键盘</span><br><span class="line">n04265275 电热器</span><br><span class="line">n04266014 航天飞船</span><br><span class="line">n04270147 锅铲</span><br><span class="line">n04273569 快艇</span><br><span class="line">n04275548 蜘蛛网</span><br><span class="line">n04277352 毛线</span><br><span class="line">n04285008 运动型轿车 check</span><br><span class="line">n04286575 探照灯</span><br><span class="line">n04296562 乐队</span><br><span class="line">n04310018 蒸汽机车</span><br><span class="line">n04311004 桥</span><br><span class="line">n04311174 鼓</span><br><span class="line">n04317175 听诊器</span><br><span class="line">n04325704 担架</span><br><span class="line">n04326547 石堆</span><br><span class="line">n04328186 秒表</span><br><span class="line">n04330267 火炉</span><br><span class="line">n04332243 滤网</span><br><span class="line">n04335435 公交车 check</span><br><span class="line">n04336792 担架</span><br><span class="line">n04344873 沙发</span><br><span class="line">n04346328 皇宫</span><br><span class="line">n04347754 轮船</span><br><span class="line">n04350905 西装</span><br><span class="line">n04355338 日晷</span><br><span class="line">n04355933 墨镜</span><br><span class="line">n04356056 墨镜</span><br><span class="line">n04357314 防晒霜</span><br><span class="line">n04366367 桥</span><br><span class="line">n04367480 拖把</span><br><span class="line">n04370456 连帽衫</span><br><span class="line">n04371430 沙滩裤</span><br><span class="line">n04371774 秋千</span><br><span class="line">n04372370 开关</span><br><span class="line">n04376876 针筒</span><br><span class="line">n04380533 台灯</span><br><span class="line">n04389033 坦克</span><br><span class="line">n04392985 磁带播放器</span><br><span class="line">n04398044 茶壶</span><br><span class="line">n04399382 毛绒玩具</span><br><span class="line">n04404412 电视机</span><br><span class="line">n04409515 网球</span><br><span class="line">n04417672 草屋</span><br><span class="line">n04418357 幕布</span><br><span class="line">n04423845 指套</span><br><span class="line">n04428191 装甲车</span><br><span class="line">n04429376 皇位</span><br><span class="line">n04435653 瓦片</span><br><span class="line">n04442312 面包机</span><br><span class="line">n04443257 烟酒店</span><br><span class="line">n04447861 马桶</span><br><span class="line">n04456115 火炬</span><br><span class="line">n04458633 图腾</span><br><span class="line">n04461696 大卡车 check</span><br><span class="line">n04462240 玩具店</span><br><span class="line">n04465501 拖拉机</span><br><span class="line">n04467665 大货车 check</span><br><span class="line">n04476259 碟子 盘子</span><br><span class="line">n04479046 风衣</span><br><span class="line">n04482393 儿童自行车</span><br><span class="line">n04483307 船</span><br><span class="line">n04485082 三脚架</span><br><span class="line">n04486054 拱门</span><br><span class="line">n04487081 巴士 check</span><br><span class="line">n04487394 长号</span><br><span class="line">n04493381 浴缸</span><br><span class="line">n04501370 闸机</span><br><span class="line">n04505470 打字机</span><br><span class="line">n04507155 伞</span><br><span class="line">n04509417 独轮车</span><br><span class="line">n04515003 钢琴</span><br><span class="line">n04517823 吸尘器</span><br><span class="line">n04522168 花瓶</span><br><span class="line">n04523525 拱廊</span><br><span class="line">n04525038 珊瑚绒</span><br><span class="line">n04525305 自动贩卖机</span><br><span class="line">n04532106 教皇袍</span><br><span class="line">n04532670 桥</span><br><span class="line">n04536866 小提琴</span><br><span class="line">n04540053 排球</span><br><span class="line">n04542943 煎饼锅</span><br><span class="line">n04548280 挂钟</span><br><span class="line">n04548362 钱夹</span><br><span class="line">n04550184 柜子</span><br><span class="line">n04552348 飞机</span><br><span class="line">n04553703 台盆</span><br><span class="line">n04554684 洗衣机</span><br><span class="line">n04557648 水瓶</span><br><span class="line">n04560804 水壶</span><br><span class="line">n04562935 煤气包</span><br><span class="line">n04579145 水壶</span><br><span class="line">n04579432 哨子</span><br><span class="line">n04584207 头发</span><br><span class="line">n04589890 窗户</span><br><span class="line">n04590129 百叶窗</span><br><span class="line">n04591157 领带</span><br><span class="line">n04591713 葡萄酒</span><br><span class="line">n04592741 飞机</span><br><span class="line">n04596742 炒锅</span><br><span class="line">n04597913 勺子</span><br><span class="line">n04599235 围巾</span><br><span class="line">n04604644 栅栏</span><br><span class="line">n04606251 沉船</span><br><span class="line">n04612504 帆船</span><br><span class="line">n04613696 蒙古包</span><br><span class="line">n06359193 网页</span><br><span class="line">n06596364 海报</span><br><span class="line">n06785654 填字游戏</span><br><span class="line">n06794110 交通标志</span><br><span class="line">n06874185 交通灯</span><br><span class="line">n07248320 书</span><br><span class="line">n07565083 菜单</span><br><span class="line">n07579787 菜</span><br><span class="line">n07583066 菜</span><br><span class="line">n07584110 菜</span><br><span class="line">n07590611 菜</span><br><span class="line">n07613480 蛋糕</span><br><span class="line">n07614500 冰激凌</span><br><span class="line">n07615774 棒冰</span><br><span class="line">n07684084 面包</span><br><span class="line">n07693725 甜甜圈</span><br><span class="line">n07695742 面包</span><br><span class="line">n07697313 汉堡</span><br><span class="line">n07697537 热狗</span><br><span class="line">n07711569 焗饭</span><br><span class="line">n07714571 蔬菜</span><br><span class="line">n07714990 西蓝花</span><br><span class="line">n07715103 花椰菜</span><br><span class="line">n07716358 蔬菜</span><br><span class="line">n07716906 金瓜</span><br><span class="line">n07717410 南瓜</span><br><span class="line">n07717556 南瓜</span><br><span class="line">n07718472 黄瓜</span><br><span class="line">n07718747 蔬菜</span><br><span class="line">n07720875 青椒 黄椒 红椒</span><br><span class="line">n07730033 花</span><br><span class="line">n07734744 蘑菇</span><br><span class="line">n07742313 苹果</span><br><span class="line">n07745940 草莓</span><br><span class="line">n07747607 橙子</span><br><span class="line">n07749582 柠檬</span><br><span class="line">n07753113 水果</span><br><span class="line">n07753275 菠萝</span><br><span class="line">n07753592 香蕉</span><br><span class="line">n07754684 榴莲</span><br><span class="line">n07760859 水果</span><br><span class="line">n07768694 石榴</span><br><span class="line">n07802026 草垛</span><br><span class="line">n07831146 意大利面</span><br><span class="line">n07836838 甜品</span><br><span class="line">n07860988 面团</span><br><span class="line">n07871810 肉酱</span><br><span class="line">n07873807 披萨</span><br><span class="line">n07875152 派</span><br><span class="line">n07880968 肉卷</span><br><span class="line">n07892512 红酒</span><br><span class="line">n07920052 咖啡</span><br><span class="line">n07930864 茶</span><br><span class="line">n07932039 饮料杯</span><br><span class="line">n09193705 雪山</span><br><span class="line">n09229709 泡泡</span><br><span class="line">n09246464 悬崖</span><br><span class="line">n09256479 珊瑚</span><br><span class="line">n09288635 温泉</span><br><span class="line">n09332890 风景</span><br><span class="line">n09399592 小岛</span><br><span class="line">n09421951 沙滩</span><br><span class="line">n09428293 海滩</span><br><span class="line">n09468604 瀑布 溪流</span><br><span class="line">n09472597 火山</span><br><span class="line">n09835506 棒球</span><br><span class="line">n10148035 婚礼</span><br><span class="line">n10565667 潜水</span><br><span class="line">n11879895 油菜花</span><br><span class="line">n11939491 菊花</span><br><span class="line">n12057211 植物</span><br><span class="line">n12144580 玉米</span><br><span class="line">n12267677 松果</span><br><span class="line">n12620546 植物</span><br><span class="line">n12768682 栗子</span><br><span class="line">n12985857 菌菇</span><br><span class="line">n12998815 菌菇</span><br><span class="line">n13037406 菌菇</span><br><span class="line">n13040303 菌菇</span><br><span class="line">n13044778 菌菇</span><br><span class="line">n13052670 菌菇</span><br><span class="line">n13054560 菌菇</span><br><span class="line">n13133613 玉米</span><br><span class="line">n15075141 卷筒纸</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deeplearning </tag>
            
            <tag> dataset </tag>
            
            <tag> imagenet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习优化篇</title>
      <link href="/post/3f932fee.html"/>
      <url>/post/3f932fee.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://image.shuiyujie.com/36baea38fd0b45ee.png" alt="深度学习优化篇"></p><p>模型要想训得好，参数优化不可少。</p><a id="more"></a><h1 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h1><p>一个复杂的神经网络，是有许多层的，其中最基本的单位便是神经元。一个线性神经元不断堆叠下去，永远都是线性关系。这就无法解决非线性问题，而不同的非线性映射函数的选择，就是激活函数的研究课题了。</p><p>为了解决非线性的问题，在感知机的基础上发展出了多层神经网络的概念。多层神经网络由输入层、多个中间层，以及输出层组成。</p><p><img src="http://image.shuiyujie.com/2019-09-20-21-39-00.png" alt="激活函数"></p><p>解决非线性问题的还可以使用非线性的激活函数，比如 sigmoid function。在 Logistic Regression 中，我们将一个线性函数输入到 sigmoid function 中，能够很好地解决二分类的问题，使用 Softmax 还能进一步解决多分类问题。</p><p>最常用激活函数主要有这样几种：</p><ol><li>sigmoid 和 tanh 激活函数。</li><li>ReLU 激活函数</li><li>ReLU 的一大堆变种(LReLU，PReLU，RReLU，ELU，SELU，GELU等等)</li></ol><h1 id="参数初始化"><a href="#参数初始化" class="headerlink" title="参数初始化"></a>参数初始化</h1><p>2006年Hinton等人在science期刊上发表了论文“Reducing the dimensionality of data with neural networks”，揭开了新的训练深层神经网络算法的序幕。</p><p>利用无监督的<a href="https://www.jiqizhixin.com/articles/2018-05-07-7" target="_blank" rel="noopener">RBM网络</a>来进行预训练，进行图像的降维，取得比<a href="https://mp.weixin.qq.com/s?__biz=MzI0ODcxODk5OA==&amp;mid=2247498222&amp;idx=2&amp;sn=bf68b0a5e54ec6ea4af2dccfc11de34e&amp;scene=0#wechat_redirect" target="_blank" rel="noopener">PCA</a>更好的结果，通常这被认为是<strong>深度学习兴起的开篇</strong>。</p><p><strong>这么看来，是因为好的初始化方法的出现，才有了深层神经网络工程化落地的可能性。</strong></p><p>常用初始化的方法包括：</p><ul><li>随机初始化</li><li>标准初始化</li><li>Xavier初始化</li><li>He初始化</li></ul><h1 id="归一化方法"><a href="#归一化方法" class="headerlink" title="归一化方法"></a>归一化方法</h1><p>数据经过归一化和标准化后可以加快梯度下降的求解速度，这就是Batch Normalization等技术非常流行的原因，它使得可以使用更大的学习率更稳定地进行梯度传播，甚至增加网络的泛化能力。常见的归一化的方法有：</p><ul><li>Batch Normalization</li><li>Layer Normalization</li><li>Instance Normalization</li><li>Group Normalization</li><li>Weight Normalization</li></ul><h1 id="池化"><a href="#池化" class="headerlink" title="池化"></a>池化</h1><p><img src="http://image.shuiyujie.com/2019-09-20-21-43-19.png" alt="最大池化与平均池化"></p><ul><li>平均池化</li><li>最大池化</li><li>随机池化</li><li>从数据中学习池化</li></ul><h1 id="正则化方法"><a href="#正则化方法" class="headerlink" title="正则化方法"></a>正则化方法</h1><p><img src="http://image.shuiyujie.com/2019-09-20-22-04-03.png" alt="正则化方法"></p><ul><li>L1/L2参数惩罚</li><li>Dropout与Drop Connect</li><li>提前终止准则</li><li>样本扩充</li></ul><h1 id="最优化方法"><a href="#最优化方法" class="headerlink" title="最优化方法"></a>最优化方法</h1><p><img src="http://image.shuiyujie.com/2019-09-20-22-05-46.png" alt="最优化方法"></p><ul><li>SGD 梯度下降法</li><li>Momentum 动量法</li><li>Nesterov 加速梯度下降法</li><li>Adagrad 算法</li><li>Adadelta/Rmsprop算法</li><li>Adam/Nadam/AdaMax算法</li><li>AMSgrad</li><li>Adafoctor</li><li>牛顿法/拟牛顿法</li><li>共轭梯度法</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NDIyMjM1NA==&amp;mid=2649031541&amp;idx=1&amp;sn=b1fac1a1bce8cb27727ffea2b77b1689&amp;chksm=8712bd08b065341e0b4078dbd994f864dbd274571668968961881efb4a52ed0822c32a4742ba&amp;mpshare=1&amp;scene=1&amp;srcid=0511JsxVU0ipRGfu2w9cbwpF#rd" target="_blank" rel="noopener">【AI初识境】激活函数：从人工设计到自动搜索</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NDIyMjM1NA==&amp;mid=2649031561&amp;idx=1&amp;sn=8de2f0e398c1df0bdaebda99138dc22b&amp;chksm=8712bdf4b06534e2979cca8558f2817d4547676a768f3fc895dd578afda941999e48efd3cafb&amp;mpshare=1&amp;scene=1&amp;srcid=0511qclAEbWkL9nxOQPBGuXW#rd" target="_blank" rel="noopener">【AI初识境】什么是深度学习成功的开始？参数初始化</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NDIyMjM1NA==&amp;mid=2649031599&amp;idx=1&amp;sn=f06df4fe57024e7652ac6f6062253b32&amp;chksm=8712bdd2b06534c456f046d76f5f71696f294de6ce0f84736e0cea173eaa970c0a2d0015d72b&amp;mpshare=1&amp;scene=1&amp;srcid=0511A8FHNvsL8uUZk6Kucmzz#rd" target="_blank" rel="noopener">【AI初识境】深度学习模型中的Normalization，你懂了多少？</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NDIyMjM1NA==&amp;mid=2649031740&amp;idx=1&amp;sn=2766cf718daf57a9c7f1556885cf35e9&amp;chksm=8712ba41b065335751aa0a50b6bbb1d6e230ed2f3d9a72914f1eb178ba0c2ecd9f77068fc0c0&amp;mpshare=1&amp;scene=1&amp;srcid=0511pC4Wg0sHIIKiyf7Yoihx#rd" target="_blank" rel="noopener">【AI初识境】被Hinton，DeepMind和斯坦福嫌弃的池化，到底是什么？</a></p>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deeplearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卷积神经网络基础</title>
      <link href="/post/dd983220.html"/>
      <url>/post/dd983220.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/2019-09-20-21-26-22.png" alt="卷积神经网络:https://cs231n.github.io/convolutional-networks/"></p><p>聊一聊神经网络的前生今世。</p><a id="more"></a><h1 id="生物神经元到MP模型"><a href="#生物神经元到MP模型" class="headerlink" title="生物神经元到MP模型"></a>生物神经元到MP模型</h1><p>人工神经网络（Artificial Neural Network），简称神经网络（Neural Network， NN），是人类模拟生物神经网络的结构和功能提出的数学模型，广泛应用于计算机视觉等领域。</p><p>人工神经网络与生物神经网络有大量相似之处，例如两者最基础的单元都是神经元。 神经元又称神经细胞，是生物神经网络的基本组成。其外观和大小在神经系统中差异很 大，但都具有相同的结构体，胞体和树突、轴突。胞体又名为核周体，由内质网、微管、 游离核糖体、神经丝和核组成。轴突和树突是神经元的突起，在神经元间传递电信号。神 经元的功能是接受信号并对其做出反应、传导兴奋、处理并储存信息以及发生细胞之间的 联结等，由这些功能动物才能迅速对环境的变化做出整合性的反应。</p><p><img src="http://image.shuiyujie.com/2019-09-20-19-47-12.png" alt="生物神经网络"></p><p>神经元之间相互连接，当某一神经元处于“兴奋”状态时，其相连神经元的电位将发 生改变，若神经元电位改变量超过了一定的数值（也称为阈值），则被激活处于“兴奋状 态”，向下一级连接的神经元继续传递电位改变信息。信息从一个神经元以电传导的方式跨过细胞之间的联结(即突触)，传给另一个神经元，最终使肌肉收缩或腺体分泌。</p><p>神经元可以处理信息，也可以以某种目前还未知的方式存储信息。神经元通过突触的 连接使数目众多的神经元组成比其他系统复杂得多的神经系统。从神经元的结构特性和生物功能可以得出结论：<strong>神经元是一个多输入单输出的信息处理单元，并且对信息的处理是非线性的。</strong></p><p>基于上述情形，1943 年 McCulloch 和 Pitts 提出了 <strong>MP 模型</strong>，一种基于阈值逻辑的算法的神经网络计算模型，由固定的结构和权重组成。</p><p>在 MP 模型中，某个神经元接受来自其余多个神经元的传递信号，多个输入与对应连接 权重相乘后输入该神经元进行求和，再与神经元预设的阈值进行比较，最后通过激活函数 产生神经元输出。每一个神经元均为多输入单输出的信息处理单元，具有空间整合特性和阈值特性。</p><p>MP 模型把神经元进行抽象为一个简单的数学模型，模拟了生物神经元形式，成功证明了神经元能够执行逻辑功能，开创了人工神经网络研究的时代。从此神经网络的研究演变 为两种不同的研究思路：一种是继续生物学原理方面的探究，着重关注大脑中信息传递与 处理的生物学过程；另一种则演变为计算机学科，即神经网络在人工智能里的实际应用。 后者的研究是模仿前者的原理机制。</p><h1 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h1><p>前面提到了：MP 模型是感知机的原型，MP 模型是一种理论，并没有在计算机上实现，而感知机可以视为 MP 模型在计算机上的实现。这一小节就来看一下感知机的理论，学习过程，实现，以及缺陷。</p><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>感知机（Perceptron）是Frank Rosenblatt在1957年提出的概念，其结构与MP模型类似，一般被视为最简单的人工神经网络，也作为二元线性分类器被广泛使用。通常情况下指单层的人工神经网络，以区别于多层感知机（Multilayer Perceptron）。尽管感知机结构简单，但能够学习并解决较复杂问题。</p><p><img src="http://image.shuiyujie.com/2019-09-20-19-48-06.png" alt="感知机模型"></p><p>假设我们有一个𝑛维输入的单层感知机，𝑥1 至 𝑥n为 n 维输入向量的各个分量，𝑤1 至𝑤n 为 各个输入分量连接到感知机的<strong>权量</strong>（或称权值），𝜃为<strong>阈值</strong>，𝑓为<strong>激活函数</strong>（又称为激励函 数或传递函数），y为标量输出。理想的激活函数 𝑓(∙) 通常为阶跃函数或者 <strong>sigmoid 函数</strong>。 感知机的输出是输入向量𝑋与权重向量𝑊求得内积后，经激活函数𝑓所得到的标量。</p><p>用数学公式来表示就是：<br>$$<br>output=\begin{cases}0,ifwx+b\leq 0\<br>1,ifwx+b &gt;0\end{cases}<br>$$<br>权重 W 的初始值一般为随机设置的，往往达不到较好的拟合结果。那<strong>如何更改权重数值使标量输出 y 逼近实际值呢？</strong></p><h2 id="感知机学习过程"><a href="#感知机学习过程" class="headerlink" title="感知机学习过程"></a>感知机学习过程</h2><p>首先通过计算得到输出值，接下来将实际输出值和理论输出值做差，由此来调整每一个输出端上的权值。学习规则是用来计算新的权值矩阵 W 及新的偏差 B 的算法。</p><p>即我们针对给定的训练数据，我们假设权重 theta 为某一个值，利用已有的训练数据的输入与预设权重做加权和，将得到的数据与训练数据的输出做比较，当他们的值分别代入到损失函数中会得到一个值，这个值用于描述预测值与真实值之间的差距。我们希望差距越小越好，由于训练数据的是固定的，也就是输入与真实值固定，唯一能够改变的就是权重 theta，所以我们要做的就是调整 theta 来使损失函数取最小值。</p><p><strong>也就是说，感知的学习过程即：在给定训练数据的情况下，通过调整权重 theta，使损失函数最小化的过程，其根本的目的是为了让预测值与真实值之间的差距更小，得到更接近与实践情况的模型。</strong></p><h2 id="感知机的缺陷"><a href="#感知机的缺陷" class="headerlink" title="感知机的缺陷"></a>感知机的缺陷</h2><p>单层感知器类似一个逻辑回归模型，可以做线性分类任务，但是不能做更复杂的任务。第二次AI浪潮中马文·明斯基在其著作中证明了感知器本质上是一种线性模型，只能处理线性分类问题，就连最简单的XOR（亦或）问题都无法正确解决。作为人工智能领域的开创者之一，这一声明也直接或间接促使神经网络的研究陷入了近20年的停滞。</p><p><img src="http://image.shuiyujie.com/2019-09-20-20-40-05.png" alt="线性不可分"></p><p>单层感知器结构简单，权重更新计算快速，能够实现逻辑计算中的 NOT、OR、AND 等简 单计算，但是对于稍微复杂的 NOR 异或问题就无法解决，其本质缺陷是不能处理线性不可分问题。而在此基础上提出的多层感知器就能解决此类问题。</p><h2 id="原理上的缺陷"><a href="#原理上的缺陷" class="headerlink" title="原理上的缺陷"></a>原理上的缺陷</h2><p>BP神经网络仍然是有监督的传统机器学习方法，遵循着以下思路。</p><p><img src="http://image.shuiyujie.com/2019-09-20-20-55-04.png" alt="传统机器学习方法"></p><p>也就是说，不过是在最后面将SVM或者其他分类器换成神经网络，在大部分情况下其实没有什么优势，甚至增加了问题的复杂度。</p><p>提取的特征虽然是研究者们经过反复实验证明有效的特征（也就是说<strong>特征任然是人为提取的</strong>），但仍然会一定程度上丢失了图像中的结构信息，从而丢失了一些对旋转扭曲等的不变性。而且要求输入的大小是固定的。为了学习到如偏移等微小的变化，需要有足够多的参数和足够多丰富的样本，最终学习到的权重，很可能在不同的位置处还会有非常相似的权重。</p><h2 id="结构上的缺陷"><a href="#结构上的缺陷" class="headerlink" title="结构上的缺陷"></a>结构上的缺陷</h2><p>传统神经网络层与层之间采用全连接，训练一个卷积神经网络的流程和训练一个全连接网络没有任何区别，区别仅仅在于<strong>层与层之间的连接方式不同</strong>。</p><p>隐藏层神经元数量越多的全连接网络包含连接权值参量越多，极大的增加了系统消耗和内存占用，并且需要更大的训练集来确定连接权值。</p><p>如果一个隐藏层特征图像大小为100x100，输入层的特征图像大小为100x100，这意味着学习这一层需要100x100x100x100=10^8的参数。如果以32位的浮点数进行存储，就需要4*108的字节的存储量，约等于400MB的参数量。仅仅这样的一个网络层，其模型参数量已经超过了AlexNet网络的参数量，而100x100的特征图像分辨率，已经低于很多任务能够成功解决的下限。除了计算过程中需要存储的海量的参数，还有海量的计算，这些都超过了当时硬件的能力，因此大大限制了网络的大小，尤其是对于一些大的图像输入。</p><p>其次，对于图像或者音频而言不具备平移，旋转，拉伸的不变性，输入到神经网络前必须经过预处理。以手写字符为例，对其进行归一化会导致字符的大小，倾斜程度及位置发生改变，再加上书写风格的差异，会导致图像特征变化。对于这些可能出现的问题，往往需要更多的神经元来增强网络的鲁棒性。</p><p><img src="http://image.shuiyujie.com/2019-09-20-20-57-32.png" alt="不同风格手写字符示意图"></p><p>再者，全连接的网络忽略了输入的拓扑结构。在一幅图像中，相邻的像素相关性较高的可以归为一个区域，像素之间相关性较低的则可视为图片中的不同区域，利用这个特性进行局部特征的提取有巨大的优势。但如何充分利用这些局部信息呢？</p><p>20 世纪 60 年代，Hubel 和 Wiesel 在研究猫脑皮层中负责处理局部敏感和方向选择的神经元时，发现了一种特别的网络结构显著降低了反馈神经网络的复杂性，随即提出了卷积神经网络（Convolutional Neural Networks，CNN）的概念。近期 CNN 已经成为众多科学领域的研究热点之一，该网络不需要对图像进行复杂的预处理，可以直接输入原始图像，因而在计算机视觉方面得到广泛的应用。<strong>本章节也将对卷积神经网络的基本概念做一个基本的介绍。</strong></p><p><strong>总结：传统的线性模型如感知机，无法解决非线性问题，因此需要探究新的解决方案来解决非线性问题。</strong></p><h1 id="多层感知机与-BP-算法"><a href="#多层感知机与-BP-算法" class="headerlink" title="多层感知机与 BP 算法"></a>多层感知机与 BP 算法</h1><p>多层感知机（Multi-Layer Perceptron）是由单层感知机推广而来，最主要的特点是有多个神经元层。一般将 MLP 的第一层称为输入层，中间的层为隐藏层，最后一层为输出 层。MLP 并没有规定隐藏层的数量，因此可以根据实际处理需求选择合适的隐藏层层数， 对于隐藏层和输出层中每层神经元的个数也没有限制。</p><p>MLP 神经网络结构模型如下，分别为单隐层前馈网络和多层前馈网络，分别如图 1.3、 图 1.4 所示。其中，输入层神经元仅接受外界信息并传递给隐藏层，隐藏层与输出层的神 经元对信号进行加工，包含功能神经元。</p><p><img src="http://image.shuiyujie.com/2019-09-20-20-41-04.png" alt="神经网络"></p><p>多层感知机的关键问题在于<strong>如何训练其中各层间的连接权值</strong>。其训练问题又大致地分为两类：</p><ol><li>一类是将其它连接权值进行固定，只训练某两层间的连接权值，研究者们已从数学上证明了这种方法对所有非线性可分的样本集都是收敛的；</li><li>另一类即大家所熟知的 back propagation（BP）算法，通常使用 sigmoid 和 tanh 等连续函数模拟神经元对激励的响 应，使用反向传播对神经网络的连接权值进行训练。</li></ol><p>虽然 BP 算法应用广泛，但同时存在优化函数容易陷入局部最优问题，在优化过程中偏 离真正的全局最优点，性能下降，并且“梯度消失”现象严重等问题亟待解决。这些问题 也限制了 BP 神经网络在计算机视觉等方面的应用。</p><h1 id="卷积神经网络的核心基础概念"><a href="#卷积神经网络的核心基础概念" class="headerlink" title="卷积神经网络的核心基础概念"></a>卷积神经网络的核心基础概念</h1><h2 id="卷积与权值共享"><a href="#卷积与权值共享" class="headerlink" title="卷积与权值共享"></a>卷积与权值共享</h2><p>卷积是 CNN 的核心，用卷积核作用于图像可以得到相应的图像特征。 在传统 BP 神经网络中，前后层之间的神经元是“全连接”的，即每个神经元都与前一层的所有神经元相连，而卷积中的神经元只与上一层中部分神经元相连。从仿生的角度来说，CNN 在处理图像矩阵问题时会更加高效，例如人的单个视觉神经元并不需要对全部图像进行感知，只需要对局部信息进行感知即可，距离较远，相关性比较弱的元素不在计算范围内。从计算的角度来说，卷积使得参数量与计算量大幅度降低。</p><p><img src="http://image.shuiyujie.com/2019-09-20-21-02-41.png" alt="二维卷积的实例"></p><p>接下来介绍下卷积的具体操作，操作如图 1.7 所示。 例如原始图像大小是 7×7，卷积核大小是 3×3。首先卷积核与原始图像左上角 3×3 对应位置的元素相乘求和，得到的数值作为结果矩阵第一行第一列的元素值，然后卷积核向右移动一个单位（即步长 stride 为 1），与原始图像前三行第 2、3、4 列所对应位置的元素分别相乘并求和，得到的数值作为结果矩阵第一行第二列的元素值，以此类推。</p><p>这就是一个卷积核矩阵在一个原始矩阵上从上往下、从左往右扫描，每次扫描都得到 一个结果，将所有结果组合到一起得到一个新的结果矩阵。</p><p>如果将大量图片作为训练集，则最终卷积核会训练成待提取的特征，例如识别飞机， 那么卷积核可以是机身或者飞机机翼的形状等。</p><p>卷积核与原始图像做卷积操作，符合卷积核特征的部分得到的结果也比较大，经过激活函数往下一层传播。不符合卷积特征的区域，获得的数值比较小，往下传播的程度也会受到限制。卷积操作后的结果可以较好地表征该区域符合特征的程度，这也是卷积后得到的矩阵被称为特征平面的原因。</p><p>从上述表示中我们可以引出<strong>权值共享</strong>的概念，即将从图像一个局部区域学习到的信息 应用到的其它区域。</p><p>图像的局部特征具有重复性（也称为位置无关性），即图像中存在某个基本特征图形可能出现在图片上的任意位置，于是为在数据的不同位置检测是否存在相同的模式可以通过在不同位置共享相同的权值实现。</p><p>用一个相同的卷积核对整幅图像进行一个卷积操作，相当于对图像做一个全图滤波， 选出图片上所有符合这个卷积核的特征。一个卷积核对应的特征比如是边缘，那么用该卷积核去对图像做全图滤波，即是将图像各个位置的边缘都选择出来（帮助实现不变性）。 不同的特征可以通过不同的卷积核实现。</p><h2 id="感受野"><a href="#感受野" class="headerlink" title="感受野"></a>感受野</h2><p>感受野（receptive field）是卷积神经网络的重要概念之一，当前流行的物体识别方法的架构大都围绕感受野的设计。</p><p><img src="http://image.shuiyujie.com/2019-09-20-21-03-53.png" alt="感受野的示意图"></p><p>从直观上讲，感受野就是视觉感受区域的大小。在卷积神经网络中，用数学的语言就是感受野是 CNN 中的某一层输出结果的一个元素对应输入层的一个映射，即 feature map 上的一个点所对应的输入图上的区域，具体示例如图 1.8 所示。</p><p>如果一个神经元的大小是受到上层 N×N 的神经元的区域的影响，那么就可以说，该神 经元的感受野是 N×N，因为它反映了 N×N 区域的信息。在图 1.8 中，conv2 中的像素点 5，是由 conv1 的 2×2 的区域计算得来，而该 2×2 区域，又是由 raw image 中 5×5 的区 域计算而来，所以，该像素的感受野是 5×5。可以看出感受野越大，得到的全局信息越多。</p><p>接下来给出感受野相关参数的数学定义。一个特征的感受野可以通过区域的中心位置和特征大小进行描述。计算每一层的感受野信息，需要了解每一层的额外信息，包括：当前感受野的尺寸 r，相邻特征之间的距离 j，起始特征的中心坐标 start，其中特征的中心 坐标定义为其感受野的中心坐标（如上述固定大小 CNN 特征图所述）。假设卷积核 （kernel size）大小为 k，填充大小（padding size）为 p，步长大小（stride size）为 s，下标 in 表示输入，out 表示输出，其输出层的相关属性计算如下。</p><ul><li><p>输出特征图在每个维度上的大小：$$n_{out}=\left[ \frac {n_{in}+2p-k}{5}\right] +1$$</p></li><li><p>相邻特征图相邻特征之间的距离：$$ j_{oui}=j_{in}s$$</p></li><li>输出特征图的 receptive field size: $$ r_{out}=r_{in}+\left( k-1\right) _{in} $$</li></ul><h2 id="池化"><a href="#池化" class="headerlink" title="池化"></a>池化</h2><p>有了感受野再来解释池化（pooling）也很简单，从 raw image 到 conv1， 再到 conv2，图像越来越小。每过一级就相当于一次降采样，这就是池化。池化可以通过步长不为 1 的卷积实现，也可以通过 pool 直接插值采样实现，本质上没有区别，只是权重不同。</p><p>通过卷积获得了特征之后，下一步则是用这些特征去做分类。理论上讲，人们可以把 所有解析出来的特征关联到一个分类器，例如 softmax 分类器，但计算量非常大，并且极 易出现过度拟合（over-fitting）。而池化层则可以对输入的特征图进行压缩，一方面使特征图变小，简化网络计算复杂度；一方面进行特征压缩，提取主要特征。</p><p><img src="http://image.shuiyujie.com/2019-09-20-21-41-04.png" alt="最大池化操作示意图"></p><p>池化作用于图像中不重合的区域（这与卷积操作不同），一般而言池化操作的每一池化窗口都是不重叠的，所以池化窗口的大小等于 stride。这里的移动步长 stride=2，采用一个大小为 2×2 的池化窗口，max pooling 是在每一个区域中寻找最大 值，最终在原特征图中提取主要特征得到右图。</p><p><img src="http://image.shuiyujie.com/2019-09-20-21-43-19.png" alt="最大池化与平均池化"></p><p>最常见的池化操作为平均池化（mean pooling）和最大池化（max pooling）。平均池 化是计算图像区域所有元素的平均值作为该区域池化后的值，最大池化则是选图像区域中 元素的最大值作为该区域池化后的值。在 ICLR2013 上，Zeiler 提出了随机池化 （stochastic pooling），只需对 feature map 中的元素按照其概率值大小随机选择，元 素被选中的概率与其数值大小正相关，并非如同 max-pooling 那样直接选取最大值。这种 随机池化操作不但最大化的保证了取值的 Max，也部分确保不会所有元素都被选取 max 值，造成过度失真。</p><p>池化操作提取信息的过程中，如果选取区域均值（mean pooling），往往能保留整体数据的特征，较好的突出背景信息；如果选取区域最大值（max pooling），则能更好保留 纹理特征。但最理想的还是小波变换，不但可以在整体上更加细微，也能够保留更多的细节特征。池化操作本质是使特征图缩小，有可能影响网络的准确度，对此我们可以通过增加特征图的深度来弥补精度的缺失。</p><h1 id="卷积神经网络的基本结构"><a href="#卷积神经网络的基本结构" class="headerlink" title="卷积神经网络的基本结构"></a>卷积神经网络的基本结构</h1><p>卷积神经网络依旧是层级网络，但层的功能和形式发生了变化，是传统神经网络的改 进。其主要包含数据输入层（Input layer），卷积计算层（Convolutional layer）， ReLU 激励层 （ReLU layer），池化层（Pooling layer）以及全连接层（Full connection layer）。</p><p><img src="http://image.shuiyujie.com/2019-09-20-21-12-54.png" alt="卷积神经网络的基本结构"></p><table><thead><tr><th>Layer</th><th>Note</th></tr></thead><tbody><tr><td>输入层</td><td>输入层是整个神经网络的输入，在处理图像的卷积神经网络中，它一般代表了一张图片的像素矩阵。如上图所示，最左侧三维矩阵就可以代表一张图像。其中三维矩阵的长和宽代表了图像的大小，深度代表了图像的色彩通道(channel)。从输入层开始，卷积神经网络通过不同的神经网络结构将上一层的三维矩阵转化为下一层的三维矩阵，直到最后的全连接层。<br><br>数据输入层主要是对原始图像数据进行预处理，其中包括：去均值，把输入数据各个维度都中心化为 0；归一化，减少各维度数据因取值范围不同而带来的干扰。</td></tr><tr><td>卷积层</td><td>传统全连接层输入是整张图片的像素点，而<strong>卷积层中每个节点的输入是上一层神经网络的一小块</strong>，这个小块常用的大小有 3x3 或者 5x5。卷积层试图将神经网络中的每一个小块进行更加深入的分析从而<strong>得到抽象程度更高的特征</strong>。一般来说，通过卷积层处理过的节点矩阵会变得更深，所以上图所示经过卷积层之后的节点矩阵深度会增加。<br><br>卷积神经网络的重点，也与普通前馈神经网络的不同之处在于，卷积神经网络包含了 普通神经网络没有的特征处理器，它是由卷积层和池化层（也称为降采样层）构成的。<br><br>卷积层中，一个神经元只与邻层部分（通常为方阵区域）的神经元连接，包含多干个特征平面(FeatureMap)，每个特征平面由多个神经元按矩阵形式排列组成，同一特征平面的神经元共享权值（卷积核）。共享权值（卷积核）大大减少了网络各层之间的连接，降低了过拟合的风险。<br><br>一般卷积神经网络包含多个卷积层，一个卷积层可以有多个不同的卷积核。图像通过多个不同的卷积核进行处理提取出局部特征，每个卷积核映射出一个新的特征图，再将卷积输出结果进行非线性激活函数的处理产生输出。</td></tr><tr><td>池化层</td><td>池化层神经网络不会改变三维矩阵的深度，但她可以缩小矩阵的大小。池化操作可以认为是将一张分辨率较高的图片转化为分辨率较低的图片。通过池化层，可以进一步缩小最后全连接层中节点的个数，从而达到减少整个神经网络中参数的目的。<br><br>接下来对激活函数处理的结果通过降采样，也叫做<strong>池化（pooling）</strong>，通常有均值子采样（mean pooling）和最大值子采样（max pooling）两种形式。<br><br>池化用于压缩网络参数和数据大小，降低过拟合。如果输入为一幅图像，那么池化层的最主要作用就是压缩图像的同时保证该图像特征的不变性。一辆车的图像被缩小了一倍仍能认出这是一辆车，说明处理后的图像仍包含着原始图片里最重要的特征，图像压缩时 去掉的只是一些冗余信息，留下的信息则是具有尺度不变性的特征，是最能表达图像的特征。池化操作的作用就是把冗余信息去除，将重要的信息保留，这样可以在一定程度上防止过拟合，方便网络的优化。</td></tr><tr><td>全连接层</td><td>在经过多轮卷积层和池化层的处理之后，在卷积神经网络的最后一般会由 1 到 2 个全连接层来给出最后的分类结果。经过几轮卷积层和池化层的处理之后，可以认为图像中的信息已经被抽象成了信息含量更高的特征。<br><br>我们可以将卷积层和池化层看成自动图像特征提取的过程。在特征提取完成之后，任然需要使用全连接层来完成分类任务。<br><br><strong>全连接层</strong>，即两层之间所有神经元权重连接，通常全连接层在卷积神经网络尾部，跟传统的神经网络神经元的连接方式相同。</td></tr><tr><td>softmax层</td><td>Softmax 层主要用于分类问题，通过 Softmax 层，可以得到当前阳历属于不同种类的概率分布情况。</td></tr></tbody></table><p>卷积神经网络的训练算法也同一般机器学习算法类似，先定义损失函数 Loss function，计算和实际结果的差值，找到最小化损失函数的参数值，利用随机梯度下降法进行权值调整。</p><p>训练卷积神经网络时，网络的参数往往需进行 fine-tuning，就是使用已用于其他目标、预训练模型的权重或者部分权重，作为初始值开始训练，这样可以很快收敛到一个较理想的状态。</p><p><strong>卷积神经网络通过局部感受野(local receptive fields)，权值共享(shared weights)，下采样(sub-sampling)实现位移，缩放，和形变的不变性</strong>。主要用来识别位移、缩放及其他形式扭曲不变性的二维图形。权值共享大大降低了网络的复杂性，特别是多维输入向量的图像可以直接输入网络这一特点避免了特征提取和分类过程中数据重建的 复杂过程。同一特征映射面上的神经元权值相同，所以网络可以并行学习，这也是卷积网络相对于全连接神经网络的一大优势。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] Hubel D H, Wiesel T N. Receptive fields, binocular interaction and functional architecture in the cat’s visual cortex[J]. The Journal of physiology, 1962, 160(1): 106-154.</p><p>[2] Fukushima K. Neocognitron: A self-organizing neural network model for a mechanism of pattern recognition unaffected by shift in position[J]. Biological cybernetics, 1980, 36(4): 193-202.</p><p>[3] Krizhevsky A, Sutskever I, Hinton G E. Imagenet classification with deep convolutional neural networks[C]//Advances in neural information processing systems. 2012: 1097-1105.</p><p><a href="https://tianchi.aliyun.com/forum/postDetail?spm=5176.12282033.0.0.4c436ba3CfsJja&amp;postId=67759" target="_blank" rel="noopener">【AI初识境】从头理解神经网络-内行与外行的分水岭</a></p><p><a href="http://cs231n.github.io/convolutional-networks/" target="_blank" rel="noopener">Convolutional Neural Networks (CNNs / ConvNets)</a></p><p><a href="https://book.douban.com/subject/26976457/" target="_blank" rel="noopener">Tensorflow：实战Google深度学习框架</a></p>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deeplearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何自建数据集</title>
      <link href="/post/b64b0362.html"/>
      <url>/post/b64b0362.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://image.shuiyujie.com/2019-06-04-22-23-29.png" alt="自建数据集"></p><p>(1) 学会使用爬虫爬取图像和视频,从视频中提取图片。</p><p>(2) 对获得的图片数据进行整理,包括重命名,格式统一,去重。</p><a id="more"></a><h1 id="爬取图片"><a href="#爬取图片" class="headerlink" title="爬取图片"></a>爬取图片</h1><p>有些任务没有直接对应的开源数据集,或者开源数据集中的数据比较少,这就需要我们通过搜索引擎自行爬取图片。</p><p><a href="https://github.com/YujieShui/deeplearning_tools/tree/master/%E7%88%AC%E8%99%AB/baidu_crawler" target="_blank" rel="noopener">百度图片爬虫</a></p><p><a href="https://github.com/sczhengyabin/Image-Downloader" target="_blank" rel="noopener">Download images from Google, Bing, Baidu. 谷歌、百度、必应图片下载</a></p><p><a href="https://github.com/YoongiKim/AutoCrawler" target="_blank" rel="noopener">Google, Naver multiprocess image web crawler (Selenium)</a></p><h1 id="数据集整理"><a href="#数据集整理" class="headerlink" title="数据集整理"></a>数据集整理</h1><p>爬取的如果是视频需要先转换成图片，如果是图片就要做好统一格式、数据清洗的工作。</p><h2 id="视频转换成图片"><a href="#视频转换成图片" class="headerlink" title="视频转换成图片"></a>视频转换成图片</h2><p>使用爬虫爬取数据,如果是视频可以使用 <code>python getimagefromvideo.py &lt;video_path&gt;</code> 将视频转换为图片</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#coding:utf8</span></span><br><span class="line"><span class="hljs-keyword">import</span> cv2</span><br><span class="line"><span class="hljs-keyword">import</span> dlib</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> sys</span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"></span><br><span class="line">video_capture = cv2.VideoCapture(sys.argv[<span class="hljs-number">1</span>])</span><br><span class="line">video_id = sys.argv[<span class="hljs-number">1</span>].split(<span class="hljs-string">'.'</span>)[<span class="hljs-number">0</span>]</span><br><span class="line">os.mkdir(video_id)</span><br><span class="line"></span><br><span class="line">count = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:</span><br><span class="line">    is_sucessfully_read, im = video_capture.read()</span><br><span class="line">    <span class="hljs-keyword">if</span> is_sucessfully_read == <span class="hljs-keyword">False</span>:</span><br><span class="line">        <span class="hljs-keyword">break</span></span><br><span class="line">    cv2.imwrite(os.path.join(video_id,str(count)+<span class="hljs-string">'.jpg'</span>),im)</span><br><span class="line">    <span class="hljs-keyword">print</span> <span class="hljs-string">"image shape="</span>,im.shape</span><br><span class="line">    count = count + <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">print</span> count</span><br></pre></td></tr></table></figure><h2 id="统一图片后缀格式"><a href="#统一图片后缀格式" class="headerlink" title="统一图片后缀格式"></a>统一图片后缀格式</h2><p>统一后缀格式可以<em>减少以后写数据 API 时的压力,也可以测试图片是不是可以正常的读取</em>,及时防止未知问题的出现,这很重要。</p><p>使用 <code>python reformat_image.py &lt;images_folder_path&gt;</code> 将图片全部转换为 jpg 格式,这也是所有框架支持的格式。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"><span class="hljs-keyword">import</span> sys</span><br><span class="line"><span class="hljs-keyword">import</span> cv2</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">listfiles</span><span class="hljs-params">(rootDir)</span>:</span></span><br><span class="line">    list_dirs = os.walk(rootDir)</span><br><span class="line">    <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> list_dirs:</span><br><span class="line">        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> dirs:</span><br><span class="line">            <span class="hljs-keyword">print</span> os.path.join(root,d)</span><br><span class="line">        <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> files:</span><br><span class="line">                </span><br><span class="line">            fileid = f.split(<span class="hljs-string">'.'</span>)[<span class="hljs-number">0</span>] </span><br><span class="line"></span><br><span class="line">            filepath = os.path.join(root,f)</span><br><span class="line">            <span class="hljs-keyword">try</span>:</span><br><span class="line">                src = cv2.imread(filepath,<span class="hljs-number">1</span>)</span><br><span class="line">                <span class="hljs-keyword">print</span> <span class="hljs-string">"src="</span>,filepath,src.shape</span><br><span class="line">                os.remove(filepath)</span><br><span class="line">                cv2.imwrite(os.path.join(root,fileid+<span class="hljs-string">".jpg"</span>),src)</span><br><span class="line">            <span class="hljs-keyword">except</span>:</span><br><span class="line">                os.remove(filepath)</span><br><span class="line">                <span class="hljs-keyword">continue</span></span><br><span class="line"></span><br><span class="line">listfiles(sys.argv[<span class="hljs-number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="按格式重命名图片"><a href="#按格式重命名图片" class="headerlink" title="按格式重命名图片"></a>按格式重命名图片</h2><p>统一格式的命名有利于区分和整理数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir tmp</span><br><span class="line">./rename_files_function.sh &lt;images_folder_path&gt; ./tmp/ &lt;label&gt;</span><br></pre></td></tr></table></figure><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">i=0</span><br><span class="line">dir=$1</span><br><span class="line">resultdir=$2</span><br><span class="line">app=$3</span><br><span class="line">for file in $dir""* </span><br><span class="line">do </span><br><span class="line">arr=$(echo $file | tr "/" "\n")</span><br><span class="line">for x in $arr</span><br><span class="line">do</span><br><span class="line">filename=$x</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">brr=$(echo $filename | tr "." "\n")</span><br><span class="line">brrs=( $brr )</span><br><span class="line">fileid=$&#123;brrs[0]&#125;</span><br><span class="line"></span><br><span class="line">num=$&#123;#brrs[@]&#125;  </span><br><span class="line">index=$(expr $num - 1)</span><br><span class="line">fileformat=$&#123;brrs[index]&#125;</span><br><span class="line"></span><br><span class="line">echo file=""$file</span><br><span class="line">echo fileid=""$fileid</span><br><span class="line">echo fileformat=""$fileformat</span><br><span class="line"></span><br><span class="line">if [ $fileformat == jpeg -o $fileformat == png -o $fileformat == jpg -o $fileformat == bmp ] ;</span><br><span class="line">    then</span><br><span class="line">        #echo "good"</span><br><span class="line">i=$(expr $i + 1)</span><br><span class="line">resultfile=$resultdir""$app""$i"".$fileformat</span><br><span class="line">echo file=""$file"",resultfile=""$resultfile</span><br><span class="line">mv "$file" "$resultfile"</span><br><span class="line">else</span><br><span class="line">echo $file""not good</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo 执行删除""$dir""*</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">rm <span class="hljs-variable">$dir</span><span class="hljs-string">""</span>*</span></span><br><span class="line">echo 执行mv""$resultdir""*</span><br><span class="line">mv $resultdir""* $dir</span><br></pre></td></tr></table></figure><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><p>如果你使用多个关键词或者使用不同的搜索引擎同样的关键词,或者从视频中提取图片,那么爬取回来的图片很可能有重复或者非常的相似,这样的样本应该被去除。</p><p>去除有很多种方法,比如直接比较两幅图像是不是完全相同,通过 hash 等相似度方法来进行相似度,这里我们提供一个方法,利用<em>相似度</em>来进行去重。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> sudo pip install python-Levenshtein</span></span><br><span class="line">conda install -c conda-forge python-levenshtein </span><br><span class="line">python remove_repeat.py &lt;image_path&gt;</span><br><span class="line"></span><br><span class="line">https://anaconda.org/conda-forge/python-levenshtein</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="hljs-comment">#coding:utf8</span></span><br><span class="line"><span class="hljs-keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image</span><br><span class="line"><span class="hljs-keyword">import</span> Levenshtein</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BWImageCompare</span><span class="hljs-params">(object)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""Compares two images (b/w)."""</span></span><br><span class="line"></span><br><span class="line">    _pixel = <span class="hljs-number">255</span></span><br><span class="line">    _colour = <span class="hljs-keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, imga, imgb, maxsize=<span class="hljs-number">64</span>)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""Save a copy of the image objects."""</span></span><br><span class="line"></span><br><span class="line">        sizea, sizeb = imga.size, imgb.size</span><br><span class="line"></span><br><span class="line">        newx = min(sizea[<span class="hljs-number">0</span>], sizeb[<span class="hljs-number">0</span>], maxsize)</span><br><span class="line">        newy = min(sizea[<span class="hljs-number">1</span>], sizeb[<span class="hljs-number">1</span>], maxsize)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># Rescale to a common size:</span></span><br><span class="line">        imga = imga.resize((newx, newy), Image.BICUBIC)</span><br><span class="line">        imgb = imgb.resize((newx, newy), Image.BICUBIC)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self._colour:</span><br><span class="line">            <span class="hljs-comment"># Store the images in B/W Int format</span></span><br><span class="line">            imga = imga.convert(<span class="hljs-string">'I'</span>)</span><br><span class="line">            imgb = imgb.convert(<span class="hljs-string">'I'</span>)</span><br><span class="line"></span><br><span class="line">        self._imga = imga</span><br><span class="line">        self._imgb = imgb</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># Store the common image size</span></span><br><span class="line">        self.x, self.y = newx, newy</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_img_int</span><span class="hljs-params">(self, img)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""Convert an image to a list of pixels."""</span></span><br><span class="line"></span><br><span class="line">        x, y = img.size</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(x):</span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> xrange(y):</span><br><span class="line">                <span class="hljs-keyword">yield</span> img.getpixel((i, j))</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @property</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">imga_int</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""Return a tuple representing the first image."""</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> hasattr(self, <span class="hljs-string">'_imga_int'</span>):</span><br><span class="line">            self._imga_int = tuple(self._img_int(self._imga))</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> self._imga_int</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @property</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">imgb_int</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""Return a tuple representing the second image."""</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> hasattr(self, <span class="hljs-string">'_imgb_int'</span>):</span><br><span class="line">            self._imgb_int = tuple(self._img_int(self._imgb))</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> self._imgb_int</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @property</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mse</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""Return the mean square error between the two images."""</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> hasattr(self, <span class="hljs-string">'_mse'</span>):</span><br><span class="line">            tmp = sum((a-b)**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> zip(self.imga_int, self.imgb_int))</span><br><span class="line">            self._mse = float(tmp) / self.x / self.y</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> self._mse</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @property</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">psnr</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""Calculate the peak signal-to-noise ratio."""</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> hasattr(self, <span class="hljs-string">'_psnr'</span>):</span><br><span class="line">            self._psnr = <span class="hljs-number">20</span> * math.log(self._pixel / math.sqrt(self.mse), <span class="hljs-number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> self._psnr</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @property</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">nrmsd</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""Calculate the normalized root mean square deviation."""</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> hasattr(self, <span class="hljs-string">'_nrmsd'</span>):</span><br><span class="line">            self._nrmsd = math.sqrt(self.mse) / self._pixel</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> self._nrmsd</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @property</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">levenshtein</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""Calculate the Levenshtein distance."""</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> hasattr(self, <span class="hljs-string">'_lv'</span>):</span><br><span class="line">            stra = <span class="hljs-string">''</span>.join((chr(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> self.imga_int))</span><br><span class="line">            strb = <span class="hljs-string">''</span>.join((chr(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> self.imgb_int))</span><br><span class="line"></span><br><span class="line">            lv = Levenshtein.distance(stra, strb)</span><br><span class="line"></span><br><span class="line">            self._lv = float(lv) / self.x / self.y</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> self._lv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImageCompare</span><span class="hljs-params">(BWImageCompare)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""Compares two images (colour)."""</span></span><br><span class="line"></span><br><span class="line">    _pixel = <span class="hljs-number">255</span> ** <span class="hljs-number">3</span></span><br><span class="line">    _colour = <span class="hljs-keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_img_int</span><span class="hljs-params">(self, img)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""Convert an image to a list of pixels."""</span></span><br><span class="line"></span><br><span class="line">        x, y = img.size</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(x):</span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> xrange(y):</span><br><span class="line">                pixel = img.getpixel((i, j))</span><br><span class="line">                <span class="hljs-keyword">yield</span> pixel[<span class="hljs-number">0</span>] | (pixel[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">8</span>) | (pixel[<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @property</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">levenshtein</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""Calculate the Levenshtein distance."""</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> hasattr(self, <span class="hljs-string">'_lv'</span>):</span><br><span class="line">            stra_r = <span class="hljs-string">''</span>.join((chr(x&gt;&gt;<span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> self.imga_int))</span><br><span class="line">            strb_r = <span class="hljs-string">''</span>.join((chr(x&gt;&gt;<span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> self.imgb_int))</span><br><span class="line">            lv_r = Levenshtein.distance(stra_r, strb_r)</span><br><span class="line"></span><br><span class="line">            stra_g = <span class="hljs-string">''</span>.join((chr((x&gt;&gt;<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xff</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> self.imga_int))</span><br><span class="line">            strb_g = <span class="hljs-string">''</span>.join((chr((x&gt;&gt;<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xff</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> self.imgb_int))</span><br><span class="line">            lv_g = Levenshtein.distance(stra_g, strb_g)</span><br><span class="line"></span><br><span class="line">            stra_b = <span class="hljs-string">''</span>.join((chr(x&amp;<span class="hljs-number">0xff</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> self.imga_int))</span><br><span class="line">            strb_b = <span class="hljs-string">''</span>.join((chr(x&amp;<span class="hljs-number">0xff</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> self.imgb_int))</span><br><span class="line">            lv_b = Levenshtein.distance(stra_b, strb_b)</span><br><span class="line"></span><br><span class="line">            self._lv = (lv_r + lv_g + lv_b) / <span class="hljs-number">3.</span> / self.x / self.y</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> self._lv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FuzzyImageCompare</span><span class="hljs-params">(object)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""Compares two images based on the previous comparison values."""</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, imga, imgb, lb=<span class="hljs-number">1</span>, tol=<span class="hljs-number">15</span>)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""Store the images in the instance."""</span></span><br><span class="line"></span><br><span class="line">        self._imga, self._imgb, self._lb, self._tol = imga, imgb, lb, tol</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">compare</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""Run all the comparisons."""</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> hasattr(self, <span class="hljs-string">'_compare'</span>):</span><br><span class="line">            <span class="hljs-keyword">return</span> self._compare</span><br><span class="line"></span><br><span class="line">        lb, i = self._lb, <span class="hljs-number">2</span></span><br><span class="line"></span><br><span class="line">        diffs = &#123;</span><br><span class="line">            <span class="hljs-string">'levenshtein'</span>: [],</span><br><span class="line">            <span class="hljs-string">'nrmsd'</span>: [],</span><br><span class="line">            <span class="hljs-string">'psnr'</span>: [],</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stop = &#123;</span><br><span class="line">            <span class="hljs-string">'levenshtein'</span>: <span class="hljs-keyword">False</span>,</span><br><span class="line">            <span class="hljs-string">'nrmsd'</span>: <span class="hljs-keyword">False</span>,</span><br><span class="line">            <span class="hljs-string">'psnr'</span>: <span class="hljs-keyword">False</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> all(stop.values()):</span><br><span class="line">            cmp = ImageCompare(self._imga, self._imgb, i)</span><br><span class="line"></span><br><span class="line">            diff = diffs[<span class="hljs-string">'levenshtein'</span>]</span><br><span class="line">            <span class="hljs-keyword">if</span> len(diff) &gt;= lb+<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> \</span><br><span class="line">                abs(diff[<span class="hljs-number">-1</span>] - diff[-lb<span class="hljs-number">-1</span>]) &lt;= abs(diff[-lb<span class="hljs-number">-1</span>] - diff[-lb<span class="hljs-number">-2</span>]):</span><br><span class="line">                stop[<span class="hljs-string">'levenshtein'</span>] = <span class="hljs-keyword">True</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                diff.append(cmp.levenshtein)</span><br><span class="line"></span><br><span class="line">            diff = diffs[<span class="hljs-string">'nrmsd'</span>]</span><br><span class="line">            <span class="hljs-keyword">if</span> len(diff) &gt;= lb+<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> \</span><br><span class="line">                abs(diff[<span class="hljs-number">-1</span>] - diff[-lb<span class="hljs-number">-1</span>]) &lt;= abs(diff[-lb<span class="hljs-number">-1</span>] - diff[-lb<span class="hljs-number">-2</span>]):</span><br><span class="line">                stop[<span class="hljs-string">'nrmsd'</span>] = <span class="hljs-keyword">True</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                diff.append(cmp.nrmsd)</span><br><span class="line"></span><br><span class="line">            diff = diffs[<span class="hljs-string">'psnr'</span>]</span><br><span class="line">            <span class="hljs-keyword">if</span> len(diff) &gt;= lb+<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> \</span><br><span class="line">                abs(diff[<span class="hljs-number">-1</span>] - diff[-lb<span class="hljs-number">-1</span>]) &lt;= abs(diff[-lb<span class="hljs-number">-1</span>] - diff[-lb<span class="hljs-number">-2</span>]):</span><br><span class="line">                stop[<span class="hljs-string">'psnr'</span>] = <span class="hljs-keyword">True</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                <span class="hljs-keyword">try</span>:</span><br><span class="line">                    diff.append(cmp.psnr)</span><br><span class="line">                <span class="hljs-keyword">except</span> ZeroDivisionError:</span><br><span class="line">                    diff.append(<span class="hljs-number">-1</span>)  <span class="hljs-comment"># to indicate that the images are identical</span></span><br><span class="line"></span><br><span class="line">            i *= <span class="hljs-number">2</span></span><br><span class="line"></span><br><span class="line">        self._compare = &#123;</span><br><span class="line">            <span class="hljs-string">'levenshtein'</span>: <span class="hljs-number">100</span> - diffs[<span class="hljs-string">'levenshtein'</span>][<span class="hljs-number">-1</span>] * <span class="hljs-number">100</span>,</span><br><span class="line">            <span class="hljs-string">'nrmsd'</span>: <span class="hljs-number">100</span> - diffs[<span class="hljs-string">'nrmsd'</span>][<span class="hljs-number">-1</span>] * <span class="hljs-number">100</span>,</span><br><span class="line">            <span class="hljs-string">'psnr'</span>: diffs[<span class="hljs-string">'psnr'</span>][<span class="hljs-number">-1</span>] == <span class="hljs-number">-1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">100.0</span> <span class="hljs-keyword">or</span> diffs[<span class="hljs-string">'psnr'</span>][<span class="hljs-number">-1</span>],</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> self._compare</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">similarity</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""Try to calculate the image similarity."""</span></span><br><span class="line"></span><br><span class="line">        cmp = self.compare()</span><br><span class="line"></span><br><span class="line">        lnrmsd = (cmp[<span class="hljs-string">'levenshtein'</span>] + cmp[<span class="hljs-string">'nrmsd'</span>]) / <span class="hljs-number">2</span></span><br><span class="line">        <span class="hljs-keyword">return</span> lnrmsd</span><br><span class="line">        <span class="hljs-keyword">return</span> min(lnrmsd * cmp[<span class="hljs-string">'psnr'</span>] / self._tol, <span class="hljs-number">100.0</span>)  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> fix psnr!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">import</span> sys</span><br><span class="line">    <span class="hljs-keyword">import</span> os</span><br><span class="line">    </span><br><span class="line">    srcimages = os.listdir(sys.argv[<span class="hljs-number">1</span>])</span><br><span class="line">    srcimages.sort()</span><br><span class="line">   </span><br><span class="line">    tot = len(srcimages)</span><br><span class="line">    tot = (tot ** <span class="hljs-number">2</span> - tot) / <span class="hljs-number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">print</span> <span class="hljs-string">'Comparing %d images:'</span> % tot</span><br><span class="line"></span><br><span class="line">    images = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">###向后删除图片</span></span><br><span class="line">    similarity_thresh = <span class="hljs-number">0.5</span> <span class="hljs-comment">##相似度阈值，超过即判断为相同图片</span></span><br><span class="line">    i = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">while</span>(i &lt; len(srcimages)<span class="hljs-number">-1</span>):</span><br><span class="line">        <span class="hljs-keyword">print</span> <span class="hljs-string">"i="</span>, i,<span class="hljs-string">"num of srcimages"</span>,len(srcimages)</span><br><span class="line"></span><br><span class="line">        imga = Image.open(os.path.join(sys.argv[<span class="hljs-number">1</span>],srcimages[i]))</span><br><span class="line">        imgb = Image.open(os.path.join(sys.argv[<span class="hljs-number">1</span>],srcimages[i+<span class="hljs-number">1</span>]))</span><br><span class="line">        cmp = FuzzyImageCompare(imga, imgb)</span><br><span class="line">        sim = cmp.similarity() / <span class="hljs-number">100</span></span><br><span class="line">        <span class="hljs-keyword">print</span> <span class="hljs-string">"image "</span>,os.path.join(sys.argv[<span class="hljs-number">1</span>],srcimages[i]),<span class="hljs-string">" and image"</span>,os.path.join(sys.argv[<span class="hljs-number">1</span>],srcimages[i+<span class="hljs-number">1</span>]),<span class="hljs-string">" sim="</span>,sim</span><br><span class="line">        <span class="hljs-keyword">if</span> sim &gt; similarity_thresh:</span><br><span class="line">            <span class="hljs-keyword">print</span> <span class="hljs-string">"delete "</span>,os.path.join(sys.argv[<span class="hljs-number">1</span>],srcimages[i+<span class="hljs-number">1</span>])</span><br><span class="line">            os.remove(os.path.join(sys.argv[<span class="hljs-number">1</span>],srcimages[i+<span class="hljs-number">1</span>]))</span><br><span class="line">            srcimages.pop(i+<span class="hljs-number">1</span>)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            i = i+<span class="hljs-number">1</span> </span><br><span class="line"></span><br><span class="line">    <span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">    results, i = &#123;&#125;, 1</span></span><br><span class="line"><span class="hljs-string">    for namea, imga in images.items():</span></span><br><span class="line"><span class="hljs-string">        for nameb, imgb in images.items():</span></span><br><span class="line"><span class="hljs-string">            if namea == nameb or (nameb, namea) in results:</span></span><br><span class="line"><span class="hljs-string">                continue</span></span><br><span class="line"><span class="hljs-string">            print ' * %2d / %2d:' % (i, tot),</span></span><br><span class="line"><span class="hljs-string">            print namea, nameb, '...',</span></span><br><span class="line"><span class="hljs-string">            cmp = FuzzyImageCompare(imga, imgb)</span></span><br><span class="line"><span class="hljs-string">            sim = cmp.similarity()</span></span><br><span class="line"><span class="hljs-string">            results[(namea, nameb)] = sim</span></span><br><span class="line"><span class="hljs-string">            print '%.2f %%' % sim</span></span><br><span class="line"><span class="hljs-string">            i += 1</span></span><br><span class="line"><span class="hljs-string">    res = max(results.values())</span></span><br><span class="line"><span class="hljs-string">    imgs = [k for k, v in results.iteritems() if v == res][0]</span></span><br><span class="line"><span class="hljs-string">    print 'Most similar images: %s %s (%.2f %%)' % (imgs[0], imgs[1], res)</span></span><br><span class="line"><span class="hljs-string">    </span></span><br><span class="line"><span class="hljs-string">    '''</span></span><br></pre></td></tr></table></figure><p>在此之后还需要自己手动筛选图片，工作量其实也不小，不过经过去重还是可以减少不少工作量的。</p><h1 id="数据集标注"><a href="#数据集标注" class="headerlink" title="数据集标注"></a>数据集标注</h1><p>爬取的图片需要自己标注，可以使用下面这些标注工具。</p><p><a href="https://github.com/tzutalin/labelImg" target="_blank" rel="noopener">https://github.com/tzutalin/labelImg</a></p><blockquote><p>LabelImg is a graphical image annotation tool and label object bounding boxes in images <a href="https://youtu.be/p0nR2YsCY_U" target="_blank" rel="noopener">https://youtu.be/p0nR2YsCY_U</a></p></blockquote><p><a href="https://github.com/wkentaro/labelme" target="_blank" rel="noopener">https://github.com/wkentaro/labelme</a></p><blockquote><p>Image Polygonal Annotation with Python (polygon, rectangle, circle, line, point and image-level flag annotation).</p></blockquote><p><a href="https://github.com/Microsoft/VoTT" target="_blank" rel="noopener">https://github.com/Microsoft/VoTT</a></p><blockquote><p>Visual Object Tagging Tool: An electron app for building end to end Object Detection Models from Images and Videos.</p></blockquote><h1 id="数据集划分"><a href="#数据集划分" class="headerlink" title="数据集划分"></a>数据集划分</h1><p>一般会按照 8:1:1 将数据集划分为训练集、验证集、测试集。这个要根据自己的情况编写 shell 脚本，下面是我用 darknet 训练 yolov3 模型时划分数据的脚本。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">if [ $# != 1 ];then</span><br><span class="line">    echo "Usage: $0 &lt;full path&gt;"</span><br><span class="line">    exit -1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">path=$1</span><br><span class="line"></span><br><span class="line">for sub_dir in `ls $path`</span><br><span class="line">    do</span><br><span class="line">        # 获取子文件夹的全路径</span><br><span class="line">        sub_dir_path=$path/$sub_dir</span><br><span class="line">        if [ -d $sub_dir_path ]</span><br><span class="line">            then</span><br><span class="line">                # 将子目录下所有文件移动到父目录中</span><br><span class="line">                `mv $sub_dir_path/* $path`</span><br><span class="line">                # 删除子目录</span><br><span class="line">                `rm -rf $sub_dir_path`</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        # 给所有文件添加前缀</span><br><span class="line"></span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">`rm tmp.txt`</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 将文件夹下指定类型的文件写到文件中</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> ***** 问题：最后会有个空行 *****</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 图片文件存在对应的 txt 文件,则将图片路径追加到 tmp.txt 文件中</span></span><br><span class="line">for image in `find $path | grep -E 'jpg|png|JPEG|JPG|PNG'`</span><br><span class="line">do</span><br><span class="line">    </span><br><span class="line">    txt=$&#123;image%.*&#125;".txt"</span><br><span class="line"></span><br><span class="line">    if [ -f $txt ]</span><br><span class="line">        then</span><br><span class="line">            echo $&#123;image&#125; </span><br><span class="line">            `echo $&#123;image&#125; &gt;&gt; tmp.txt`</span><br><span class="line">    fi</span><br><span class="line">    </span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 将路径 8:1:1 放到 train.txt,val.txt,test.txt</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 1. 计算 tmp,txt 文件行数</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 2. 计算得出分配到各个文件的行号</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 3. 将对应行数的内容写到对应文件夹中</span></span><br><span class="line">line=`cat tmp.txt | wc -l`</span><br><span class="line">line1=$(($line/10*8))</span><br><span class="line">line2=$(($line/10*8+line/10+1))</span><br><span class="line"></span><br><span class="line">`sed -n 1,$&#123;line1&#125;p tmp.txt &gt;&gt; train.txt`</span><br><span class="line">`sed -n $(($&#123;line1&#125;+1)),$&#123;line2&#125;p tmp.txt &gt;&gt; val.txt`</span><br><span class="line">`sed -n $(($&#123;line2&#125;+1)),$(($&#123;line&#125;-1))p tmp.txt &gt;&gt; test.txt`</span><br></pre></td></tr></table></figure><p>yolov3 的标注格式如下所示</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9 0.732955 0.591102 0.270317 0.193503</span><br></pre></td></tr></table></figure><p>统计标签的时候可以使用</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;print $1&#125;' *.txt | sort -g | uniq -c</span><br></pre></td></tr></table></figure><p>以上就是自己建立一个数据集的流程：爬取图片-&gt;整理图片-&gt;标注图片-&gt;训练。</p>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deeplearning </tag>
            
            <tag> dataset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java并发编程】线程本地存储模式ThreadLocal</title>
      <link href="/post/790a1fa3.html"/>
      <url>/post/790a1fa3.html</url>
      
        <content type="html"><![CDATA[<p>我们知道多个线程同时读写同一<strong>共享变量</strong>会导致并发问题。</p><p>一种解决方案是使用 Immutability 模式，如果共享变量在初始化之后就不会改变，只能读取，那么无论多少个线程同时读这个共享变量都不会出现并发问题。比如说 Java 中的 Long、Integer、Short、Byte 等基本数据类型的包装类的实现。</p><p>另一种解决方案是突破共享变量，<strong>没有共享变量就不会有并发问题</strong>。那么如何避免共享呢？思路其实很简单，就是每个线程拥有自己的变量，彼此不共享，就不会有共享问题。</p><p>具体来说有两种方法：<strong>线程封闭</strong>和线程本地存储(<strong>ThreadLocal</strong>)。</p><a id="more"></a><h1 id="线程封闭"><a href="#线程封闭" class="headerlink" title="线程封闭"></a>线程封闭</h1><p>方法里的局部变量，因为不会和其他线程共享，所以没有并发问题，叫做<strong>线程封闭</strong>，比较官方的解释是：<strong>仅在单线程内访问数据</strong>。由于不存在共享，所以即便不同步也不会有并发问题，性能杠杠的。</p><p><img src="http://image.shuiyujie.com/2019-09-16-22-32-43.png" alt="保护局部变量的调用栈结构"></p><p>如上图所示，JVM 中每一个线程都会有一个 <strong>Java 虚拟机栈</strong>。Java 程序每调用一个方法都会入栈，每执行完一个方法都会出栈，且每一个方法都有一个<strong>栈帧</strong>。栈帧中存储了参数、局部变量和返回地址。由此可见，方法的局部变量是不可能和其它线程共享的。</p><p>局部变量可以避免线程共享，此外还有什么方法能避免线程共享么？有，那就是 Java 语言提供的线程本地存储(ThreadLocal)。</p><h1 id="ThreadLock"><a href="#ThreadLock" class="headerlink" title="ThreadLock"></a>ThreadLock</h1><p>SimpleDateFormat 不是线程安全的，如果想在并发场景下使用它可以将其设置为一个方法的局部变量，这样就会创建许多对象占用内存。或者使用 ThreadLock，不同线程调用 <code>SafeDateFormat</code> 会返回不同的 SimpleDateFormat 对象，但是由于在线程之间不共享，就和局部变量一样是安全的。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SafeDateFormat</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 定义 ThreadLocal 变量</span></span><br><span class="line">  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;DateFormat&gt;</span><br><span class="line">    tl=ThreadLocal.withInitial(</span><br><span class="line">    ()-&gt; <span class="hljs-keyword">new</span> SimpleDateFormat(</span><br><span class="line">      <span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">static</span> DateFormat <span class="hljs-title">get</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> tl.get();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来再看一下 ThreadLock 的代码实现。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Thread</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 内部持有 ThreadLocalMap</span></span><br><span class="line">  ThreadLocal.ThreadLocalMap </span><br><span class="line">    threadLocals;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadLocal</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 首先获取线程持有的</span></span><br><span class="line">    <span class="hljs-comment">//ThreadLocalMap</span></span><br><span class="line">    ThreadLocalMap map =</span><br><span class="line">      Thread.currentThread()</span><br><span class="line">        .threadLocals;</span><br><span class="line">    <span class="hljs-comment">// 在 ThreadLocalMap 中</span></span><br><span class="line">    <span class="hljs-comment">// 查找变量</span></span><br><span class="line">    Entry e = </span><br><span class="line">      map.getEntry(<span class="hljs-keyword">this</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> e.value;  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadLocalMap</span></span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 内部是数组而不是 Map</span></span><br><span class="line">    Entry[] table;</span><br><span class="line">    <span class="hljs-comment">// 根据 ThreadLocal 查找 Entry</span></span><br><span class="line">    <span class="hljs-function">Entry <span class="hljs-title">getEntry</span><span class="hljs-params">(ThreadLocal key)</span></span>&#123;</span><br><span class="line">      <span class="hljs-comment">// 省略查找逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//Entry 定义</span></span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Entry</span> <span class="hljs-keyword">extends</span></span></span><br><span class="line"><span class="hljs-class">    <span class="hljs-title">WeakReference</span>&lt;<span class="hljs-title">ThreadLocal</span>&gt;</span>&#123;</span><br><span class="line">      Object value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Java 的实现方案中，ThreadLocal 仅仅是一个工具类，内部并不持有和线程有关的数据，所有和线程有关的数据都存储在 Thread 中，比如 Thread 内部持有当前线程的 ThreadLocalMap。</p><p>这样设计有一个好处就是能够<strong>避免内存泄露</strong>。</p><p><a href="https://blog.jrwang.me/2016/java-simpledateformat-multithread-threadlocal/" target="_blank" rel="noopener">SimpleDateFormat 的线程安全问题与 ThreadLocal</a></p><p><a href="http://ifeve.com/%e6%89%8b%e6%92%95%e9%9d%a2%e8%af%95%e9%a2%98threadlocal%ef%bc%81%ef%bc%81%ef%bc%81/" target="_blank" rel="noopener">手撕面试题ThreadLocal！！！</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-模拟YGC，查看GC日志</title>
      <link href="/post/5dbc4dfe.html"/>
      <url>/post/5dbc4dfe.html</url>
      
        <content type="html"><![CDATA[<p>我们知道每次创建新的对象都会保存到<strong>新生代</strong>中。新生代会使用垃圾回收器比如说 ParNew 垃圾回收器，将新生代进一步分成 Eden 区和两个 Survivor 区。当新生代满了的时候就会触发 Young GC。</p><p>本文会实战 Young GC 的场景，并且带大家查看 GC 日志。</p><a id="more"></a><h1 id="模拟-Young-GC-场景"><a href="#模拟-Young-GC-场景" class="headerlink" title="模拟 Young GC 场景"></a>模拟 Young GC 场景</h1><p>首先我们将 JVM 的参数按如下所示设置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:NewSize=5242880 -XX:MaxNewSize=5242880 -XX:InitialHeapSize=10485760 -XX:MaxHeapSize=10485760 -XX:SurvivorRatio=8 -XX:PretenureSizeThreshold=10485760 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc.log</span><br></pre></td></tr></table></figure><p>以上参数都是 JDK1.8 版本的参数，其他版本略有不同，但也没差多少：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>-XX:InitialHeapSize</code><br><code>-XX:MaxHeapSize</code></td><td>初始堆大小和最大堆大小</td></tr><tr><td><code>-XX:NewSize</code><br><code>-XX:MaxNewSize</code></td><td>初始新生代大小和最大新生代大小</td></tr><tr><td><code>-XX:PretenureSizeThreshold=1048576</code></td><td>指定了大对象阈值是10MB</td></tr><tr><td><code>-XX:+PrintGCDetils</code></td><td>打印详细的gc日志</td></tr><tr><td><code>-XX:+PrintGCTimeStamps</code></td><td>打印出来每次GC发生的时间</td></tr><tr><td><code>-Xloggc:gc.log</code></td><td>设置将gc日志写入一个磁盘文件</td></tr></tbody></table><p><img src="http://image.shuiyujie.com/2019-09-25-21-57-16.png" alt="内存分配情况"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-垃圾回收算法与垃圾回收器</title>
      <link href="/post/e2ebbcff.html"/>
      <url>/post/e2ebbcff.html</url>
      
        <content type="html"><![CDATA[<p>本文记录一些垃圾回收算法和垃圾回收器。</p><a id="more"></a><h1 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h1><h1 id="Serial垃圾回收器"><a href="#Serial垃圾回收器" class="headerlink" title="Serial垃圾回收器"></a>Serial垃圾回收器</h1><p><img src="http://image.shuiyujie.com/2019-09-14-10-14-52.png" alt="单线程执行垃圾回收算法"></p><p>Serial 垃圾回收器用于新生代的垃圾回收。无论服务器是几核的，都只用单线程执行垃圾回收算法。</p><h1 id="ParNew-垃圾回收器"><a href="#ParNew-垃圾回收器" class="headerlink" title="ParNew 垃圾回收器"></a>ParNew 垃圾回收器</h1><p><img src="http://image.shuiyujie.com/2019-09-14-10-15-37.png" alt="多线程执行垃圾回收算法"></p><p>ParNew 垃圾回收器用于新生代的垃圾回收。ParNew 垃圾回收器可以使用多个垃圾回收线程来执行垃圾回收算法。在启动系统时，可以使用 <code>-XX:+UseParNewGC</code> 参数来指定使用 ParNew 垃圾回收器。</p><p>ParNew 垃圾回收器默认使用的线程数量与机器的核数相同，比如我们线上机器假设用的是4核CPU，那默认就会使用 4 个线程。</p><p>线程数也可以通过 <code>-XX:ParallelGCThreads</code> 手动指定，但是不建议修改。</p><h1 id="选择单线程还是选择多线程？"><a href="#选择单线程还是选择多线程？" class="headerlink" title="选择单线程还是选择多线程？"></a>选择单线程还是选择多线程？</h1><ul><li>到底是用单线程垃圾回收好，还是多线程垃圾回收好？</li><li>到底是Serial垃圾回收器好还是ParNew垃圾回收器好？</li></ul><p>启动系统的时候是可以区分服务器模式和客户端模式的，如果你启动系统的时候加入 <code>-server</code> 就是服务器模式，如果加入 <code>-cilent</code> 就是客户端模式。</p><p>如果部署的是网站系统、业务系统等大型系统，一般都是多核 CPU。此时使用多线程，使用 ParNew 垃圾回收器更好。</p><p>如果是 Windows 客户端程序，如果是单核 CPU 使用 ParNew 垃圾回收器就会在一个 CPU 上启动多个垃圾回收线程，会有上下文切换的开销，反而不如单线程 Serial 垃圾回收器效率高。</p><h1 id="标记清理算法"><a href="#标记清理算法" class="headerlink" title="标记清理算法"></a>标记清理算法</h1><p>老年代一般选择的垃圾回收器是 CMS，采用标记清理算法。简单来说，标记清理算法分成两步：标记出哪些对象是垃圾对象，再一次性把这些对象清理掉。</p><p>举例来说，当程序触发了<strong>Full GC</strong> 回收老年代的垃圾对象。</p><ul><li>先通过追踪 GC Roots 的方法，看老年代中的各个对象是不是被 GC Roots 引用，如果被引用就是存活对象，否则就是垃圾对象。这些垃圾对象就会被<strong>标记</strong>出来。</li><li>然后再一次性清理被标记出来的<strong>垃圾对象</strong>。</li></ul><p>但是由于 Full GC 的时间比 Minor GC 的时间差不多长 10 倍，如果和 Minor GC 一样，Full GC 采用先 Stop the World 再用标记清理算法回收垃圾，就会导致系统卡死时间过长，很多响应无法处理。</p><p>所以 CMS 让系统一边工作，一边进行垃圾回收。CMS 垃圾回收的过程一共分为 4 个阶段：</p><ol><li><strong>初始标记</strong>。Stop the World 停止所有工作线程，仅标记 GC Roots 直接引用的对象。这一步速度很快。</li><li><strong>并发标记</strong>。此时允许系统线程创建对象，继续运行。垃圾回收线程则会追踪老年代中的对象是否从根源上被 GC Roots 引用。这一步是最耗时的，但是和系统程序并发运行，不会对系统运行造成影响。</li><li><strong>重新标记</strong>。Stop the World 重新标记在第二阶段里新创建的对象，以及原本被引用现在失去引用的对象。由于支队第二阶段有变动的对象进行标记，速度也比较快。</li><li><strong>并发清理</strong>。系统随意运行，同时清理之前被标记为垃圾的对象。这个阶段很耗时，但是由于和系统程序并发运行，并不影响系统程序的运行。</li></ol><h1 id="CMS-垃圾回收器"><a href="#CMS-垃圾回收器" class="headerlink" title="CMS 垃圾回收器"></a>CMS 垃圾回收器</h1><h1 id="Serial-Old-垃圾回收器"><a href="#Serial-Old-垃圾回收器" class="headerlink" title="Serial Old 垃圾回收器"></a>Serial Old 垃圾回收器</h1><p>在并发清理期间，系统程序可能将某些对象分配在新生代，然后触发了一次 Minor GC，一些对象进入了老年代，但是短时间内又没有人引用它们。这些对象就被称为<strong>浮动垃圾</strong>。</p><p>浮动垃圾意味着虽然他们是垃圾，但是 CMS 在并发清理阶段只会清理这一次 Full GC 被标记出来的垃圾，这些浮动垃圾只有等到下一次 GC 的时候才会回收它们。</p><p>为了保证在 CMS 并发清理期间，还有一定的内存空间让一些对象可以进入老年代，一般会预留一些空间。CMS垃圾回收的触发时机，其中有一个就是当老年代内存占用达到一定比例了，就自动执行GC。 <code>-XX:CMSInitiatingOccupancyFaction</code> 参数可以用来设置老年代占用多少比例的时候触发CMS垃圾回收，JDK 1.6里面默认的值是92%。</p><p>也就是说，老年代占用了92%空间了，就自动进行CMS垃圾回收，预留8%的空间给并发回收期间，系统程序把一些新对象放入老年代中。</p><p><strong>那么如果CMS垃圾回收期间，系统程序要放入老年代的对象大于了可用内存空间，此时会如何？</strong></p><p>这个时候，会发生 Concurrent Mode Failure，就是说并发垃圾回收失败了，我一边回收，你一边把对象放入老年代，内存都不够了。</p><p>此时就会自动用<strong>Serial Old垃圾回收器</strong>替代CMS，就是直接强行把系统程序 Stop the World，重新进行长时间的GC Roots追踪，标记出来全部垃圾对象，不允许新的对象产生。然后一次性把垃圾对象都回收掉，完事儿了再恢复系统线程。</p><p>所以在生产实践中，这个自动触发CMS垃圾回收的比例需要合理优化一下，避免“Concurrent Mode Failure”问题</p><h1 id="G1-垃圾回收器"><a href="#G1-垃圾回收器" class="headerlink" title="G1 垃圾回收器"></a>G1 垃圾回收器</h1><p>ParNew 和 CMS 两个垃圾回收器分别来回收新生代和老年代的垃圾对象，有一个最大的痛点就是 <strong>Stop the World</strong>。后面对于垃圾回收器的优化都是朝着减少 Stop the World 的目标去的。</p><p>在这基础上 <strong>G1 垃圾回收器</strong>应用而生，它可以提供比 ParNew + CMS 组合更好的垃圾回收性能。</p><p>主要设计思想：G1 将内存拆分成一个个小的 <strong>Regin</strong>，新生代和老生代各自对应一些 Regin，回收的时候间可能挑选停顿时间最短，回收对象最多的 Regin，尽量控制<strong>垃圾回收导致的系统停顿时间</strong>小于我们的预设值。</p><h2 id="Regin"><a href="#Regin" class="headerlink" title="Regin"></a>Regin</h2><p>G1 垃圾回收器只有逻辑上的新生代和老年代的概念，它会将 Java 堆内存划分成一个个相同大小的 Regin，如下图所示：</p><p><img src="http://image.shuiyujie.com/2019-09-14-16-08-34.png" alt="G1 垃圾回收器"></p><p>G1 垃圾回收器中的 Regin 是不区分新生代和老年的，刚开始 Regin 可能不属于任何一个年代，每一个 Regin 这一刻保存新生代对象，下一刻可能就保存老年代对象了。所以也就没有给新生代或者老年代分配多少内存这一说。</p><h2 id="预期停顿时间"><a href="#预期停顿时间" class="headerlink" title="预期停顿时间"></a>预期停顿时间</h2><p>G1另一个特点是可以让我们<strong>设置一个垃圾回收的预期停顿时间</strong>。我们可以指定一段时间内我们希望垃圾回收导致的系统停顿时间不能超过多久，后面的事情就由 G1 全权负责了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-如何设置JVM的参数</title>
      <link href="/post/1410ce3d.html"/>
      <url>/post/1410ce3d.html</url>
      
        <content type="html"><![CDATA[<ol><li>新生代、老生代、永久代的概念</li><li>JVM内存相关核心参数图解</li><li>如何在启动系统的时候设置 JVM 参数</li></ol><a id="more"></a><h1 id="新生代、老生代、永久代的概念"><a href="#新生代、老生代、永久代的概念" class="headerlink" title="新生代、老生代、永久代的概念"></a>新生代、老生代、永久代的概念</h1><p><a href="https://shuiyujie.com/post/3860d841.html#more">JVM-JVM中内存区域划分</a>这一章中讲过，每执行一个方法，该方法都会有一个栈帧进入 Java 虚拟机栈，栈帧中保存着方法中的局部变量、返回值地址等信息。</p><p>栈帧中保存的局部变量如果是一个对象，它就会指向 Java 堆中某个具体的对象实例，如下图所示：</p><p><img src="http://image.shuiyujie.com/2019-09-13-16-10-29.png" alt="Java虚拟机栈和 Java 堆"></p><ul><li>新生代：刚创建的对象都会在新生代，变量将会指向这个对象实例。如果没有任何变量指向这个对象，该对象就可能被回收。</li><li>老年代：新生代内存满了之后就会触发 <code>Minor GC</code> ，垃圾回收器会回收新生代中没有人引用的对象实例。如果一个对象实例经过10多次回收都没有被回收掉，就算它年龄有 10 多岁了，将会进入到老年代。</li><li>永久代：可以理解成方法区中的类和类信息</li></ul><h1 id="JVM内存相关核心参数图解"><a href="#JVM内存相关核心参数图解" class="headerlink" title="JVM内存相关核心参数图解"></a>JVM内存相关核心参数图解</h1><p>在JVM内存分配中的核心参数，如下所示。</p><ol><li><strong>-Xms</strong>：Java堆内存的大小</li><li><strong>-Xmx</strong>：Java堆内存的最大大小</li><li><strong>-Xmn</strong>：Java堆内存中的新生代大小，扣除新生代剩下的就是老年代的内存大小了</li><li><strong>-XX:PermSize</strong>：永久代大小</li><li><strong>-XX:MaxPermSize</strong>：永久代最大大小</li><li><strong>-Xss</strong>：每个线程的栈内存大小</li></ol><p><img src="http://image.shuiyujie.com/2019-09-13-16-42-52.png" alt="JVM内存参数"></p><h1 id="启动时设置-JVM-参数"><a href="#启动时设置-JVM-参数" class="headerlink" title="启动时设置 JVM 参数"></a>启动时设置 JVM 参数</h1><p>IDEA 可以在 <code>Run-edit configration..</code> 中设置参数，如下所示：</p><p><img src="http://image.shuiyujie.com/Java内存参数设置.png" alt="Java内存参数设置"></p><p>如果在线上部署系统，可以使用<code>java -jar</code>方式启动，如：<code>java -Xms512M -Xmx512M -Xmn256M -Xss1M -XX:PermSize=128M -XX:MaxPermSize=128M -jar App.jar</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-JVM中内存区域划分</title>
      <link href="/post/3860d841.html"/>
      <url>/post/3860d841.html</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://shuiyujie.com/post/5e4eb5a4.html">JVM-Java中的类加载机制</a>一文中，我讲述了 Java 类加载的过程，它包含加载、验证、准备、解析、初始化、使用、卸载这几个步骤。我们在准备阶段会将类加载到内存中，为类变量分配内存并赋予初值；在初始化阶段则会正式执行初始化代码。</p><p><strong>那么在准备阶段和初始化阶段，JVM 具体是怎么为类分配内存的呢？</strong></p><a id="more"></a><h1 id="什么是-JVM-中的内存区域划分"><a href="#什么是-JVM-中的内存区域划分" class="headerlink" title="什么是 JVM 中的内存区域划分"></a>什么是 JVM 中的内存区域划分</h1><p>当 JVM 运行我们的代码时，它会使用多块不同的内存，不同的内存存放不同的数据，再配合代码的执行流程，这样就能把程序运行起来了。</p><p><img src="http://image.shuiyujie.com/2019-09-12-21-12-10.png" alt="JVM内存区域"></p><p>概括来讲 JVM 中的内存空间可以分成三大块：</p><ul><li>存放加载的类。保存 JVM 加载的类。</li><li>运行方法使用。保存程序时我们要执行一个个方法，即方法中的局部变量。</li><li>创建的对象。保存运行程序时创建的对象。</li></ul><h1 id="JVM-中的内存区域划分"><a href="#JVM-中的内存区域划分" class="headerlink" title="JVM 中的内存区域划分"></a>JVM 中的内存区域划分</h1><p>JVM 的内存划分可以分成三大块：存放加载的类，存放创建的对象，运行方法时使用。如果进一步细分，可以分成这样几个主要区域：方法区、程序计数器、Java虚拟机栈和 Java堆。</p><p><img src="http://image.shuiyujie.com/2019-09-12-21-20-50.png" alt="JVM内存区域划分示例"></p><p>如果存在 main() 函数，JVM 会从 main() 函数开始完成整个类加载过程，所以上面这段代码会从 main() 开始加载。JVM 进行会启动，先加载 Kafka.java 到内存中，然后有一个 main 进程开始执行 main() 方法：</p><p><img src="http://image.shuiyujie.com/2019-09-12-21-44-18.png" alt="JVM内存区域划分"></p><ul><li>方法区：会加载  Kafka 和 ReplicaManager 这两个类</li><li>字节码执行引擎：class 文件是一个个字节码，JVM 将会使用<strong>字节码执行引擎</strong>执行代码指令。</li><li>程序计数器：用程序计数器来标记代码指令执行到哪一行。</li><li>多线程：JVM是支持多线程的，可能开启多个线程来执行代码指令，每一个线程都有自己的程序计数器</li><li>Java虚拟机栈：保存方法内的局部变量等数据，线程每执行一个方法，就会对这个方法调用创建对应的一个栈帧</li><li>Java 堆内存：new 出来的实例对象将会保存在 Java 堆内存中，栈帧中的局部变量将会指向 Java 堆中的实例对象。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-Java中的类加载机制</title>
      <link href="/post/5e4eb5a4.html"/>
      <url>/post/5e4eb5a4.html</url>
      
        <content type="html"><![CDATA[<p>在正式了解 Java 类加载机制的细节之前，我们有必要了解一下 JVM 整体的运行原理，对 JVM 运行机制的整体脉络进行一次梳理。</p><p><img src="http://image.shuiyujie.com/2019-09-12-07-30-00.png" alt="JVM 整体运行原理"></p><p>首先我们会有一系列以 <code>.java</code> 结尾的源文件。要把这些源文件发布到线上，我们需要将其打成 jar 包，或者打成 war 包。这个打包的过程就是将 <code>.java</code> 文件<strong>编译</strong>成 <code>.class</code> 文件。接着就可以使用 Tomcat 这样的容器，或者 java 命令来运行一个 jar 包中的文件。</p><p>这里有一个问题，<strong>编译好的 <code>.class</code> 字节码是怎么运行起来的呢？</strong></p><a id="more"></a><h1 id="JVM-在什么情况下会加载一个类？"><a href="#JVM-在什么情况下会加载一个类？" class="headerlink" title="JVM 在什么情况下会加载一个类？"></a>JVM 在什么情况下会加载一个类？</h1><p>JVM 会通过<a href="https://shuiyujie.com/post/5b2f68e0.html">类加载器</a>来加载一个类，然后将类保存到内存中，并执行代码。一个类从加载到使用，一般会经历下面这样一个过程：</p><p><img src="http://image.shuiyujie.com/2019-09-12-10-15-05.png" alt="Java类加载过程"></p><p><strong>那么什么时候 JVM 会使用类加载器去加载一个类呢？</strong>答案很简单，就是在使用这个类的时候。</p><p>举例来说，如果有下面这样一段代码</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    MyConfig config = <span class="hljs-keyword">new</span> MyConfig();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Application 类中有一个 <code>main()</code> 函数，<code>main()</code> 作为程序的入口一定会在 JVM 进行启动之后被加载到内存中。之后开始执行 <code>main()</code> 中的方法，遇到别的类就将这个类加载到内存中，情况如图所示：</p><p><img src="http://image.shuiyujie.com/2019-09-12-09-39-44.png" alt="JVM 什么时候加载一个类？"></p><h1 id="验证、准备和解析的过程"><a href="#验证、准备和解析的过程" class="headerlink" title="验证、准备和解析的过程"></a>验证、准备和解析的过程</h1><ul><li>验证阶段：验证 <code>.class</code> 文件是否符合 <em>Java 虚拟机规范</em>。这点比较容易理解，就像我们使用数据之前要先校验一下。</li><li>准备阶段：给加载到的类分配内存空间，比如说 <code>MyConfig</code> 类中有类变量，就要给它分配内存空间，给一个初始值。</li><li>解析阶段：将符号引用替换为直接引用</li></ul><p><img src="http://image.shuiyujie.com/2019-09-12-09-49-41.png" alt="验证、准备和解析的过程"></p><p>验证、准备和解析可以合称为<strong>准备阶段</strong>。在准备阶段，JVM 为加载进来的类分配了内存空间，为类变量分配了内存空间，并给类变量赋了初值。接下来的初始化阶段，就会正式执行类初始化的代码了。</p><h1 id="核心阶段：初始化"><a href="#核心阶段：初始化" class="headerlink" title="核心阶段：初始化"></a>核心阶段：初始化</h1><p>前面说了，在准备阶段，JVM 会给类分配内存，会给类变量分配内存并赋予初值。在初始化阶段，则会正式执行类初始化代码。</p><p><strong>什么叫正式执行初始化代码呢？</strong>来看下面这样一段代码</p><p><img src="http://image.shuiyujie.com/2019-09-12-10-03-47.png" alt="初始化阶段举例"></p><p><em>准备阶段</em>会为类变量 <code>flushInterval</code> 分配内存空间，并且将其初值赋为 0。在<em>初始化阶段</em>，<code>flushInterval</code> 执行赋值语句，获取一个配置参数。</p><p>此外，初始化阶段还会执行静态代码块，本例中完成数据的加载工作。</p><p><strong>什么时候会初始化一个类呢？</strong></p><ol><li>new 一个实例化的对象，将会出发类加载到初始化的全过程，将这个类准备好，再实例化一个对象处理</li><li>包含 <code>main()</code> 的主类，将会立即初始化</li><li>初始化一个类的时候，如果其父类还未初始化，就必须先初始化他的父类</li></ol><p><img src="http://image.shuiyujie.com/2019-09-12-10-13-49.png" alt="Java 类加载过程"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-双亲委派模型</title>
      <link href="/post/5b2f68e0.html"/>
      <url>/post/5b2f68e0.html</url>
      
        <content type="html"><![CDATA[<p>本文介绍 Java 中的类加载器，以及双亲委派机制。</p><p> Java 中的类加载器包括：启动类加载器，扩展类加载器，应用程序类加载器，自定义类加载器。</p><a id="more"></a><h1 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h1><p>启动类加载器(Bootstrap ClassLoader)，主要负责加载Java目录下的核心类，即 Java 安装目录下的 lib 目录，其中就包含 Java 最核心的一类类库。</p><p>JVM一旦启动会首先依托启动类加载器，去加载<code>${JAVA_HOME}/lib</code>中的核心类库。</p><h1 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h1><p>扩展类加载器(Extension ClassLoader)，它将会加载 <code>${JAVA_HOME}/lib/ext</code> 目录中的类。</p><h1 id="应用程序类加载器"><a href="#应用程序类加载器" class="headerlink" title="应用程序类加载器"></a>应用程序类加载器</h1><p>应该程序类加载器Application ClassLoader，负责去加载“ClassPath”环境变量所指定的路径中的类。</p><p>可以将其理解为我们写好的 Java 代码，应用程序类加载器负责将我们写的Java代码加载到内存中。</p><h1 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h1><p>自定义类加载器，可以根据自己的需求加载类。</p><h1 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h1><p><img src="http://image.shuiyujie.com/2019-09-11-23-32-24.png" alt="双亲委派机制"></p><p>JVM类加载器具有如上所示的亲子层级结构，启动加载器在第一层，扩展加载器在第二层，应用类加载器在第三层，自定义类加载器在最后一层。</p><p>基于该亲子层级结构，就有一个<strong>双亲委派机制</strong>，具体来说是怎么样的呢？</p><p>具体来说，现在有一个<code>Manager</code>类，它是我们自己写的Java代码，需要使用<em>应用程序类加载器</em>来加载。</p><p>此时，应该程序类加载器会先问它的上一级<em>扩展类加载器</em>，你能加载到这个类么？然后扩展类加载器继续问它的上一级<em>启动类加载器</em>，你能加载到这个类么？</p><p>启动类加载器在<code>${JAVA_HOME}/lib</code>下找不到<code>Manage</code>这个类，就告诉扩展类加载器，我加载不到，你自己找去。扩展类加载器在 <code>${JAVA_HOME}/lib/ext</code> 下也没有找到这个类，叫告诉应用程序类加载器自己去加载这个类。</p><p>终于，应该用程序类加载器在自己负责的范围内，比如说我们打成的 jar 包中，找到了这个类，就将其加载到内存中。</p><p>总的来说，<strong>双亲委派模型</strong>就是：先找父亲去加载，父亲加载不到再由儿子来加载。这样的话，可以避免多层级的加载器结构重复加载某些类。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFMPEG使用说明</title>
      <link href="/post/20fed56f.html"/>
      <url>/post/20fed56f.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/mountain-1345746_1920.jpg" alt="题图:https://pixabay.com/photos/mountain-rays-hill-nature-1345746/"></p><blockquote><p>通过Java调用FFMpeg命令的方式来对音视频进行处理（获取信息、截图等等）。</p><p><a href="https://github.com/tonydeng/fmj" target="_blank" rel="noopener">https://github.com/tonydeng/fmj</a></p></blockquote><a id="more"></a><h2 id="截图命令"><a href="#截图命令" class="headerlink" title="截图命令"></a>截图命令</h2><h3 id="截取一张352x240尺寸大小，格式为jpg的图片"><a href="#截取一张352x240尺寸大小，格式为jpg的图片" class="headerlink" title="截取一张352x240尺寸大小，格式为jpg的图片"></a>截取一张352x240尺寸大小，格式为jpg的图片</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input_file -y -f image2 -t 0.001 -s 352x240 output.jpg</span><br></pre></td></tr></table></figure><h3 id="把视频的前30帧转换成一个Animated-Gif"><a href="#把视频的前30帧转换成一个Animated-Gif" class="headerlink" title="把视频的前30帧转换成一个Animated Gif"></a>把视频的前30帧转换成一个Animated Gif</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input_file -vframes 30 -y -f gif output.gif</span><br></pre></td></tr></table></figure><h3 id="在视频的第8-01秒出截取230x240的缩略图"><a href="#在视频的第8-01秒出截取230x240的缩略图" class="headerlink" title="在视频的第8.01秒出截取230x240的缩略图"></a>在视频的第8.01秒出截取230x240的缩略图</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input_file -y -f mjpeg -ss 8 -t 0.001 -s 320x240 output.jpg</span><br></pre></td></tr></table></figure><h3 id="每隔一秒截一张图"><a href="#每隔一秒截一张图" class="headerlink" title="每隔一秒截一张图"></a>每隔一秒截一张图</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i out.mp4 -f image2 -vf fps=fps=1 out%d.png</span><br></pre></td></tr></table></figure><h3 id="每隔20秒截一张图"><a href="#每隔20秒截一张图" class="headerlink" title="每隔20秒截一张图"></a>每隔20秒截一张图</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i out.mp4 -f image2 -vf fps=fps=1/20 out%d.png</span><br></pre></td></tr></table></figure><h3 id="多张截图合并到一个文件里（2x3）每隔一千帧-秒数-1000-fps25-即40s截一张图"><a href="#多张截图合并到一个文件里（2x3）每隔一千帧-秒数-1000-fps25-即40s截一张图" class="headerlink" title="多张截图合并到一个文件里（2x3）每隔一千帧(秒数=1000/fps25)即40s截一张图"></a>多张截图合并到一个文件里（2x3）每隔一千帧(秒数=1000/fps25)即40s截一张图</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i out.mp4 -frames 3 -vf &quot;select=not(mod(n\,1000)),scale=320:240,tile=2x3&quot; out.png</span><br></pre></td></tr></table></figure><h3 id="从视频中生成GIF图片"><a href="#从视频中生成GIF图片" class="headerlink" title="从视频中生成GIF图片"></a>从视频中生成GIF图片</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i out.mp4 -t 10 -pix_fmt rgb24 out.gif</span><br></pre></td></tr></table></figure><h3 id="转换视频为图片（每帧一张图）"><a href="#转换视频为图片（每帧一张图）" class="headerlink" title="转换视频为图片（每帧一张图）"></a>转换视频为图片（每帧一张图）</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i out.mp4 out%4d.png</span><br></pre></td></tr></table></figure><h3 id="图片转换为视频"><a href="#图片转换为视频" class="headerlink" title="图片转换为视频"></a>图片转换为视频</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f image2 -i out%4d.png -r 25 video.mp4</span><br></pre></td></tr></table></figure><h2 id="切分视频并生成M3U8文件"><a href="#切分视频并生成M3U8文件" class="headerlink" title="切分视频并生成M3U8文件"></a>切分视频并生成M3U8文件</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -c:v libx264 -c:a aac -strict -2 -f hls -hls_time 20 -hls_list_size 0 -hls_wrap 0 output.m3u8</span><br></pre></td></tr></table></figure><p>相关参数说明：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-i 输入视频文件</span><br><span class="line">-c:v 输出视频格式</span><br><span class="line">-c:a 输出音频格式</span><br><span class="line">-strict</span><br><span class="line">-f hls 输出视频为HTTP Live Stream（M3U8）</span><br><span class="line">-hls_time 设置每片的长度，默认为2，单位为秒</span><br><span class="line">-hls_list_size 设置播放列表保存的最多条目，设置为0会保存所有信息，默认为5</span><br><span class="line">-hls_wrap 设置多少片之后开始覆盖，如果设置为0则不会覆盖，默认值为0。这个选项能够避免在磁盘上存储过多的片，而且能够限制写入磁盘的最多片的数量。</span><br></pre></td></tr></table></figure><p>注意，播放列表的<code>sequence number</code>对每个<code>segment</code>来说都必须是唯一的，而且它不能和片的文件名（当使用<code>wrap</code>选项时，文件名可能会重复使用）混淆。</p><h2 id="分离视频音频流"><a href="#分离视频音频流" class="headerlink" title="分离视频音频流"></a>分离视频音频流</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 分离视频流</span></span><br><span class="line">ffmpeg -i input_file -vcodec copy -an output_file_video</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 分离音频流</span></span><br><span class="line">ffmpeg -i input_file -acodec copy -vn output_file_audio</span><br></pre></td></tr></table></figure><h2 id="视频解复用"><a href="#视频解复用" class="headerlink" title="视频解复用"></a>视频解复用</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i test.mp4 -vcoder copy -an -f m4v test.264</span><br><span class="line">ffmpeg -i test.avi -vcoder copy -an -f m4v test.264</span><br></pre></td></tr></table></figure><h2 id="视频转码"><a href="#视频转码" class="headerlink" title="视频转码"></a>视频转码</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 转码为码流原始文件</span></span><br><span class="line">ffmpeg -i test.mp4 -vcoder h264 -s 352*278 -an -f m4v test.264</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 转码为码流原始文件</span></span><br><span class="line">ffmpeg -i test.mp4 -vcoder h264 -bf 0 -g 25 -s 352-278 -an -f m4v test.264</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 转码为封装文件 -bf B帧数目控制, -g 关键帧间隔控制, -s 分辨率控制</span></span><br><span class="line">ffmpeg -i test.avi -vcoder mpeg4 -vtag xvid -qsame test_xvid.avi</span><br></pre></td></tr></table></figure><h2 id="视频封装"><a href="#视频封装" class="headerlink" title="视频封装"></a>视频封装</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i video_file -i audio_file -vcoder copy -acodec copy output_file</span><br></pre></td></tr></table></figure><h2 id="视频剪切"><a href="#视频剪切" class="headerlink" title="视频剪切"></a>视频剪切</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 视频截图</span></span><br><span class="line">ffmpeg -i test.avi -r 1 -f image2 image.jpeg</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 剪切视频 -r 提取图像频率， -ss 开始时间， -t 持续时间</span></span><br><span class="line">ffmpeg -i input.avi -ss 0:1:30 -t 0:0:20 -vcoder copy -acoder copy output.avi</span><br></pre></td></tr></table></figure><h2 id="视频录制"><a href="#视频录制" class="headerlink" title="视频录制"></a>视频录制</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i rtsp://hostname/<span class="hljs-built_in">test</span> -vcoder copy out.avi</span><br></pre></td></tr></table></figure><h2 id="YUV序列播放"><a href="#YUV序列播放" class="headerlink" title="YUV序列播放"></a>YUV序列播放</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay -f rawvideo -video_size 1920x1080 input.yuv</span><br></pre></td></tr></table></figure><h2 id="YUV序列转AVI"><a href="#YUV序列转AVI" class="headerlink" title="YUV序列转AVI"></a>YUV序列转AVI</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -s w*h -pix_fmt yuv420p -i input.yuv -vcoder mpeg4 output.avi</span><br></pre></td></tr></table></figure><h3 id="常用参数说明"><a href="#常用参数说明" class="headerlink" title="常用参数说明"></a>常用参数说明</h3><h4 id="主要参数"><a href="#主要参数" class="headerlink" title="主要参数"></a>主要参数</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-i 设定输入流</span><br><span class="line">-f 设定输出格式</span><br><span class="line">-ss 开始时间</span><br></pre></td></tr></table></figure><h4 id="视频参数"><a href="#视频参数" class="headerlink" title="视频参数"></a>视频参数</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-b 设定视频流量，默认是200Kbit/s</span><br><span class="line">-s 设定画面的宽和高</span><br><span class="line">-aspect 设定画面的比例</span><br><span class="line">-vn 不处理视频</span><br><span class="line">-vcoder 设定视频的编码器，未设定时则使用与输入流相同的编解码器</span><br></pre></td></tr></table></figure><h3 id="音频参数"><a href="#音频参数" class="headerlink" title="音频参数"></a>音频参数</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-ar 设定采样率</span><br><span class="line">-ac 设定声音的Channel数</span><br><span class="line">-acodec 设定沈阳的Channel数</span><br><span class="line">-an 不处理音频</span><br></pre></td></tr></table></figure><h2 id="使用ffmpeg合并MP4文件"><a href="#使用ffmpeg合并MP4文件" class="headerlink" title="使用ffmpeg合并MP4文件"></a>使用ffmpeg合并MP4文件</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="hljs-string">"Apache Sqoop Tutorial Part 1.mp4"</span> -c copy -bsf:v h264_mp4toannexb -f mpegts intermediate1.ts</span><br><span class="line">ffmpeg -i <span class="hljs-string">"Apache Sqoop Tutorial Part 2.mp4"</span> -c copy -bsf:v h264_mp4toannexb -f mpegts intermediate2.ts</span><br><span class="line">ffmpeg -i <span class="hljs-string">"Apache Sqoop Tutorial Part 3.mp4"</span> -c copy -bsf:v h264_mp4toannexb -f mpegts intermediate3.ts</span><br><span class="line">ffmpeg -i <span class="hljs-string">"Apache Sqoop Tutorial Part 4.mp4"</span> -c copy -bsf:v h264_mp4toannexb -f mpegts intermediate4.ts</span><br><span class="line">ffmpeg -i <span class="hljs-string">"concat:intermediate1.ts|intermediate2.ts|intermediate3.ts|intermediate4.ts"</span> -c copy -bsf:a aac_adtstoasc <span class="hljs-string">"Apache Sqoop Tutorial.mp4"</span></span><br></pre></td></tr></table></figure><h2 id="使用ffmpeg转换flv到mp4"><a href="#使用ffmpeg转换flv到mp4" class="headerlink" title="使用ffmpeg转换flv到mp4"></a>使用ffmpeg转换flv到mp4</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i out.flv -vcodec copy -acodec copy out.mp4</span><br></pre></td></tr></table></figure><h2 id="视频添加水印"><a href="#视频添加水印" class="headerlink" title="视频添加水印"></a>视频添加水印</h2><h3 id="水印局中"><a href="#水印局中" class="headerlink" title="水印局中"></a>水印局中</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i out.mp4 -i sxyx2008@163.com.gif -filter_complex overlay=<span class="hljs-string">"(main_w/2)-(overlay_w/2):(main_h/2)-(overlay_h)/2"</span> output.mp4</span><br></pre></td></tr></table></figure><p>参数解释</p><ul><li>-i out.mp4(视频源)</li><li>-i <a href="mailto:sxyx2008@163.com.gif" target="_blank" rel="noopener">sxyx2008@163.com.gif</a>(水印图片)</li><li>overlay 水印的位置</li><li>output.mp4 输出文件</li></ul><h2 id="视频翻转和旋转"><a href="#视频翻转和旋转" class="headerlink" title="视频翻转和旋转"></a>视频翻转和旋转</h2><h3 id="翻转"><a href="#翻转" class="headerlink" title="翻转"></a>翻转</h3><h4 id="水平翻转语法-vf-hflip"><a href="#水平翻转语法-vf-hflip" class="headerlink" title="水平翻转语法: -vf hflip"></a>水平翻转语法: -vf hflip</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay -i out.mp4 -vf hflip</span><br></pre></td></tr></table></figure><h4 id="垂直翻转语法：-vf-vflip"><a href="#垂直翻转语法：-vf-vflip" class="headerlink" title="垂直翻转语法：-vf vflip"></a>垂直翻转语法：-vf vflip</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay -i out.mp4 -vf vflip</span><br></pre></td></tr></table></figure><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>语法：<code>transpose={0,1,2,3}</code></p><ul><li>0:逆时针旋转90°然后垂直翻转</li><li>1:顺时针旋转90°</li><li>2:逆时针旋转90°</li><li>3:顺时针旋转90°然后水平翻转</li></ul><h3 id="将视频顺时针旋转90度"><a href="#将视频顺时针旋转90度" class="headerlink" title="将视频顺时针旋转90度"></a>将视频顺时针旋转90度</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay -i out.mp4 -vf transpose=1</span><br></pre></td></tr></table></figure><h3 id="将视频水平翻转-左右翻转"><a href="#将视频水平翻转-左右翻转" class="headerlink" title="将视频水平翻转(左右翻转)"></a>将视频水平翻转(左右翻转)</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay -i out.mp4 -vf hflip</span><br></pre></td></tr></table></figure><h3 id="顺时针旋转90度并水平翻转"><a href="#顺时针旋转90度并水平翻转" class="headerlink" title="顺时针旋转90度并水平翻转"></a>顺时针旋转90度并水平翻转</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay -i out.mp4 -vf transpose=1,hflip</span><br></pre></td></tr></table></figure><h2 id="添加字幕"><a href="#添加字幕" class="headerlink" title="添加字幕"></a>添加字幕</h2><p>有的时候你需要给视频加一个字幕(subtitle)，使用ffmpeg也可以做。一般我们见到的字幕以srt字幕为主，在ffmpeg里需要首先将srt字幕转化为ass字幕，然后就可以集成到视频中了(不是单独的字幕流，而是直接改写视频流)。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i my_subtitle.srt my_subtitle.ass</span><br><span class="line">ffmpeg -i inputfile.mp4 -vf ass=my_subtitle.ass outputfile.mp4</span><br></pre></td></tr></table></figure><p>但是值得注意的是：</p><blockquote><p><code>my_subtitle.srt</code>需要使用<code>UTF8</code>编码，老外不会注意到这一点，但是中文这是必须要考虑的；</p></blockquote><p>将字幕直接写入视频流需要将每个字符渲染到画面上，因此有一个字体的问题，在<code>ass</code>文件中会指定一个缺省字体，例如<code>Arial</code>，但是我们首先需要让<code>ffmpeg</code>能找到字体文件，不然文字的渲染就无从谈起了。<code>ffmpeg</code>使用了<code>fontconfig</code>来设置字体配置。你需要首先设置一下<code>FONTCONFIG_PATH</code>或者<code>FONTCONFIG_FILE</code>环境变量，不然<code>fontconfig</code>是无法找到配置文件的，这一点请参看这篇文章，如果你设置的是<code>FONTCONFIG_PATH</code>，那把配置文件保存为<code>%FONTCONFIG_PATH%/font.conf</code>即可，然后你可以在<code>font.conf</code>文件中配置字体文件的路径之类的。</p><p><code>Windows</code>下为<code>fontconfig</code>设置如下的环境变量</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FC_CONFIG_DIR=C:\ffmpeg</span><br><span class="line">FONTCONFIG_FILE=font.conf</span><br><span class="line">FONTCONFIG_PATH=C:\ffmpeg</span><br><span class="line">PATH=C:\ffmpeg\bin;%PATH%</span><br></pre></td></tr></table></figure><p>下面是一个简单的<code>Windows</code>版<code>font.conf</code>文件。</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">fontconfig</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dir</span>&gt;</span>C:\WINDOWS\Fonts<span class="hljs-tag">&lt;/<span class="hljs-name">dir</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"pattern"</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">qual</span>=<span class="hljs-string">"any"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"family"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>mono<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"family"</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">"assign"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>monospace<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"pattern"</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">qual</span>=<span class="hljs-string">"all"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"family"</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">"not_eq"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>sans-serif<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">qual</span>=<span class="hljs-string">"all"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"family"</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">"not_eq"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>serif<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">qual</span>=<span class="hljs-string">"all"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"family"</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">"not_eq"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>monospace<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"family"</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">"append_last"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>sans-serif<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Times<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Times New Roman<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">default</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>serif<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">default</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Helvetica<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Arial<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">default</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>sans<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">default</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Courier<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Courier New<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">default</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>monospace<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">default</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>serif<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Times New Roman<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>sans<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Arial<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>monospace<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Andale Mono<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"pattern"</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"family"</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">"eq"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Courier New<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"family"</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">"prepend"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>monospace<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"pattern"</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"family"</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">"eq"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Courier<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"family"</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">"prepend"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>monospace<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">fontconfig</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面这个是<code>Linux</code>系统下改版过来的</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!DOCTYPE fontconfig SYSTEM "fonts.dtd"&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!-- /etc/fonts/fonts.conf file to configure system font access --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">fontconfig</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!-- </span></span><br><span class="line"><span class="hljs-comment">    Find fonts in these directories</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dir</span>&gt;</span>C:/Windows/Fonts<span class="hljs-tag">&lt;/<span class="hljs-name">dir</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!--</span></span><br><span class="line"><span class="hljs-comment">&lt;dir&gt;/usr/X11R6/lib/X11/fonts&lt;/dir&gt;</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!--</span></span><br><span class="line"><span class="hljs-comment">    Accept deprecated 'mono' alias, replacing it with 'monospace'</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"pattern"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">qual</span>=<span class="hljs-string">"any"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"family"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>mono<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"family"</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">"assign"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>monospace<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!--</span></span><br><span class="line"><span class="hljs-comment">    Load per-user customization file, but don't complain</span></span><br><span class="line"><span class="hljs-comment">    if it doesn't exist</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">ignore_missing</span>=<span class="hljs-string">"yes"</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">"xdg"</span>&gt;</span>fontconfig/fonts.conf<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!--</span></span><br><span class="line"><span class="hljs-comment">    Load local customization files, but don't complain</span></span><br><span class="line"><span class="hljs-comment">    if there aren't any</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">ignore_missing</span>=<span class="hljs-string">"yes"</span>&gt;</span>conf.d<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">ignore_missing</span>=<span class="hljs-string">"yes"</span>&gt;</span>local.conf<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!--</span></span><br><span class="line"><span class="hljs-comment">    Alias well known font names to available TrueType fonts.</span></span><br><span class="line"><span class="hljs-comment">    These substitute TrueType faces for similar Type1</span></span><br><span class="line"><span class="hljs-comment">    faces to improve screen appearance.</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Times<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Times New Roman<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">default</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>serif<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">default</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Helvetica<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Arial<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">default</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>sans<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">default</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Courier<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Courier New<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">default</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>monospace<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">default</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!--</span></span><br><span class="line"><span class="hljs-comment">    Provide required aliases for standard names</span></span><br><span class="line"><span class="hljs-comment">    Do these after the users configuration file so that</span></span><br><span class="line"><span class="hljs-comment">    any aliases there are used preferentially</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>serif<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Times New Roman<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>sans<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Arial<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>monospace<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Andale Mono<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">fontconfig</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="http://blog.raphaelzhang.com/2013/04/video-streaming-and-ffmpeg-transcoding/" target="_blank" rel="noopener">http://blog.raphaelzhang.com/2013/04/video-streaming-and-ffmpeg-transcoding/</a></li></ul><h2 id="嵌入字幕"><a href="#嵌入字幕" class="headerlink" title="嵌入字幕"></a>嵌入字幕</h2><p>在一个MP4文件里面添加字幕，不是把 .srt 字幕文件集成到 MP4 文件里，而是在播放器里选择字幕，这种集成字幕比较简单，速度也相当快</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -i subtitles.srt -c:s mov_text -c:v copy -c:a copy output.mp4</span><br></pre></td></tr></table></figure><p>希望字幕直接显示出来，其实也不难</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i subtitle.srt subtitle.ass</span><br><span class="line">ffmpeg -i input.mp4 -vf ass=subtitle.ass output.mp4</span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="http://blog.neten.de/posts/2013/10/06/use-ffmpeg-to-burn-subtitles-into-the-video/" target="_blank" rel="noopener">http://blog.neten.de/posts/2013/10/06/use-ffmpeg-to-burn-subtitles-into-the-video/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
            <tag> ffmpeg </tag>
            
            <tag> 音频处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何解决文件分享问题</title>
      <link href="/post/8896ebad.html"/>
      <url>/post/8896ebad.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/internet-4433515_1920.jpg" alt="题图:https://pixabay.com/illustrations/internet-file-sharing-media-music-4433515/"></p><p>互联网时代每个人都能成为内容创作者，当你需要分享时，尽管各大社交平台都会自带分享服务，但是这些分享服务往往都是有壁垒的，比如需要注册才能使用、只能在该平台内分享、无法私密分享、无法匿名分享、没有提供文件直链、下载速度受限等等。</p><p> 因此，今天分享的文章要解决的就是文件分享难题：<strong>文件直链和文件传输。</strong></p><blockquote><p><a href="http://mp.weixin.qq.com/s?__biz=MzI5MDM4NTYwOA==&amp;mid=2247486074&amp;idx=1&amp;sn=f17ae812c2316f57b62b33bca8c276e3&amp;chksm=ec21f1dddb5678cbcde926c24ab39523d6143b2ac19ca781bf3ae89c0bde01571d044139e784&amp;mpshare=1&amp;scene=1&amp;srcid=1015RuMND49XvoSgyGvBRL32#rd" target="_blank" rel="noopener">为内容创作者解决文件分享的难题</a></p></blockquote><a id="more"></a><table><thead><tr><th><strong>二维码分享</strong></th><th></th></tr></thead><tbody><tr><td>草料二维码</td><td>支持多种内容的二维码生成工具，提供多种丰富的美化二维码。</td></tr><tr><td>QArt Coder</td><td>生成二维码的同时，还可以将你上传的图片处理成黑白像素风格的二维码。（V）</td></tr><tr><td>第九工厂</td><td>艺术二维码生成，需要注册和付费，但一些免费的的魔板也很不错。</td></tr><tr><td>芝麻二维码</td><td>可以让多个二维码合并的网站。</td></tr><tr><td></td><td></td></tr><tr><td><strong>短地址分享</strong></td><td></td></tr><tr><td>新浪短网址</td><td>支持包括新浪，百度，腾讯，Bitly等10家服务并永久有效，有 小书签可以一键生成。</td></tr><tr><td>百度网址</td><td>百度旗下的短网址服务。</td></tr><tr><td>cmcc.in</td><td>具有数据统计功能，需要运营统计时的可以考虑。</td></tr><tr><td>淘宝宝短网址</td><td>只适用于淘宝链接。</td></tr><tr><td>suo.im</td><td>批量短网址，支持一次生成300+短链接。</td></tr><tr><td>Bitly</td><td>国外老牌短网址服务应用，支持数据统计功能。</td></tr><tr><td>U.NU</td><td>国外短网址服务，支持小书签一键生成。</td></tr><tr><td>ffff.im</td><td>优雅的短网址服务，同时无需注册就支持数据统计。</td></tr><tr><td></td><td></td></tr><tr><td><strong>代码分享</strong></td><td></td></tr><tr><td>Ubuntu Pastebin</td><td>无需注册，应该是最方便的选择，支持定期失效。</td></tr><tr><td>GithubGist</td><td>需注册，知名代码托管社区Github提供的服务。(V)</td></tr><tr><td>Pastebin</td><td>无需注册+注册，登录后拥有更多功能，支持浏览器拓展。</td></tr><tr><td>Zeropaste</td><td>无需注册，支持私密分享，支持MD代码预览。</td></tr><tr><td></td><td></td></tr><tr><td><strong>文本分享</strong></td><td></td></tr><tr><td>note.ms</td><td>无需注册，简洁，自动生成链接，也可以自定义链接，链接里的内容会实时更新。</td></tr><tr><td>PrivNote</td><td>无需注册，笔记将在阅读后自动销毁。</td></tr><tr><td>Vuash</td><td>无需注册，开源项目，笔记将在阅读后自动销毁。</td></tr><tr><td>faxZero</td><td>无需注册，在线发传真，美国加拿大免费，其他国家需要收费。</td></tr><tr><td>Eddtor</td><td>无需注册，支持富文本内容分享，登录后有更多功能。</td></tr><tr><td>谷歌文档</td><td>需注册，第一好用的在线文档编辑应用，但大陆地区无法正常访问。</td></tr><tr><td>腾讯文档</td><td>需注册，腾讯推出的文档分享应用，支持 QQ、微信一键登录。</td></tr><tr><td>石墨文档</td><td>需注册，在线协作第一选择，替代谷歌文档的选择，附件支持直接分享。</td></tr><tr><td>Treation</td><td>需注册，功能与石墨文档类似，但专注于在线表格，附件支持直接分享。</td></tr><tr><td></td><td></td></tr><tr><td><strong>图片分享（图床）</strong></td><td></td></tr><tr><td>新浪图床</td><td>需注册，服务稳定速度超快，支持三种尺寸，支持拓展。（Firefox，Chrome）</td></tr><tr><td>免登录新浪图床</td><td>无需注册，无需登录也可以使用新浪图床。</td></tr><tr><td>SM.SM</td><td>无需注册，服务稳定速度快，每次最多10张，每张最大5Mb。</td></tr><tr><td>A.Photo</td><td>无需注册，速度快，和SM.SM一样是个人网站，注册后可保存上传记录。</td></tr><tr><td>Imgse</td><td>无需注册，速度快，提供图片直链，每张最大10MB，注册后可保存上传记录。</td></tr><tr><td>牛图网</td><td>无需注册，速度快，成立于2010年，服务稳定。</td></tr><tr><td>Vim-cn</td><td>无需注册，非常直白的上传界面，速度不错，海外服务器多。</td></tr><tr><td>Imgur</td><td>无需注册，国外老牌图片分享社区，图片支持外链，但国内无法上传。</td></tr><tr><td>Image.frl</td><td>无需注册，荷兰老牌图片分享网站，多用于博客和论坛，分享页支持评论。</td></tr><tr><td>PhotoBucket</td><td>需注册，国外老牌图片分享网站，多见于论坛图片分享，国内速度比较慢。</td></tr><tr><td></td><td></td></tr><tr><td><strong>多媒体分享（直链）</strong></td><td></td></tr><tr><td>音乐解析器</td><td>无需注册，输入云音乐，QQ音乐，虾米音乐的链接即可获取mp3外链。MP3直链测试</td></tr><tr><td>170MV</td><td>无需注册，输入音悦台视频即可解析获得mp4外链。MP4直链测试</td></tr><tr><td>Streamable</td><td>无需注册，最大支持2G，10分钟的视频上传，速度快，支持编辑功能。MP4直链测试</td></tr><tr><td>Coka.la</td><td>无需注册，最大支持512M任何格式文件的上传，速度一般，快进会小卡，永久保存。 （TXT直链测试，MP3直链测试，MP4直链测试）</td></tr><tr><td>dmca.gripe</td><td>无需注册，最大支持5G任何格式文件的上传，根据文件大小需要等1-2分钟不等，速度一般但足够用了。 （TXT直链测试，MP3直链测试，MP4直链测试）</td></tr><tr><td>石墨文档</td><td>需注册，任何格式文件最大支持100M，文档删除后附件外接仍然有效，七牛云服务器速度极快。 （TXT直链测试，MP3直链测试，MP4直链测试）</td></tr><tr><td>Treation</td><td>需注册，免费版任何格式文件最大支持10M，文档删除后附件外接仍然有效，速度极快。 （TXT直链测试，MP3直链测试，MP4直链测试）</td></tr><tr><td>七牛云</td><td>需注册，上传内容没有限制，速度极快，免费用户每月10G流量，一般使用也是足够的。 （TXT直链测试，MP3直链测试，MP4直链测试）</td></tr><tr><td>无限图床</td><td>无需注册，无任何限制，支持所有文件格式，区块链应用，文件存储到去中心化网络中。 （TXT直链测试，MP3直链测试，MP4直链测试）</td></tr><tr><td></td><td></td></tr><tr><td><strong>文件分享</strong></td><td></td></tr><tr><td>奶牛快传</td><td>无需注册，临时，支持最大2GB的文件，最多同时上传6个文件，保存时间为7天。</td></tr><tr><td>Firefox Send</td><td>无需注册，临时，火狐浏览器出品，支持按时间或者下载次数后自动删除文件。</td></tr><tr><td>WeTransfer</td><td>无需注册，临时，最大支持2GB文件，保存周期14天，链接会发送到指定的邮箱中。</td></tr><tr><td>SendAnywhere</td><td>无需注册，临时，密钥、链接、邮件三种方式分享方式，最大支持4GB文件。</td></tr><tr><td>Ge.tt</td><td>无需注册，临时，分享的文件链接会保存 30 天时间。</td></tr><tr><td>Volafile</td><td>无需注册，临时，建立一个专属的分享房间，左边聊天右边分享各类文件。</td></tr><tr><td>reep.io</td><td>无需注册，永久，P2P 传输技术，不会在服务器上存储任何文件。</td></tr><tr><td>drop.me</td><td>无需注册，永久，没有大小限制，没有文件格式限制，但国内速度一般。</td></tr><tr><td>Simple Savr</td><td>无需注册，临时，只能在同一局域网内使用，可以在当你没有在电脑上登陆QQ微信时使用。</td></tr><tr><td></td><td></td></tr><tr><td><strong>超大文件分享（个人存储）</strong></td><td></td></tr><tr><td>百度云</td><td>需注册，国内使用率最高的云盘，海量资源共享，提高下载速度可以 看这里。</td></tr><tr><td>微云</td><td>需注册，下载速度快，上传速度稍慢，如果要分享给的朋友不用百度云，可以用这个。</td></tr><tr><td>蓝奏云</td><td>需注册，国内网盘提供商，不限制下载速度，免费用户可以上传100M的文件。</td></tr><tr><td>Google Drive</td><td>需注册，谷粉的第一选择。(V)</td></tr><tr><td>One Drive</td><td>需注册，OnedDrive，Google Drive，Dropbox 都可以用直链生成工具来获取直接。(V)</td></tr><tr><td>Dropbox</td><td>需注册，网盘的领路人，有很多围绕Dropbox而产生的神奇用法，比如ifttt等等。(V)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 善用佳软 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机接码平台，马甲邮箱</title>
      <link href="/post/6b53840a.html"/>
      <url>/post/6b53840a.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/email-3249062_1280.png" alt="题图:https://pixabay.com/illustrations/email-newsletter-marketing-online-3249062/"></p><p>介绍接码平台和马甲邮箱，保护隐私从源头做起。</p><a id="more"></a><h1 id="接码平台"><a href="#接码平台" class="headerlink" title="接码平台"></a>接码平台</h1><table><thead><tr><th><a href="http://www.51ym.me/User/Login.aspx" target="_blank" rel="noopener">易码</a></th><th>接码平台，收费换手机号，便宜</th></tr></thead><tbody><tr><td>阿里小号</td><td>一般用它来接收验证码，需要的时候打开 App，即用即开，关闭后也不会打扰用户。目前价格是一年 20 元（优惠中，很方便）</td></tr><tr><td><a href="http://link.zhihu.com/?target=https%3A//smsreceivefree.com" target="_blank" rel="noopener">SMSReceiveFree</a></td><td>可以收到來自世界各地的簡訊和來電，提供來自美國、英國和加 拿大的虛擬門號。SMS訊息會在24小時内删除。每個月會更換一批新的電話號碼。</td></tr><tr><td><a href="http://link.zhihu.com/?target=http%3A//Receive-SMS-Online.info" target="_blank" rel="noopener">Receive-SMS-Online</a></td><td>提供來自美國、西班牙、法國、義大利、荷蘭、波蘭、荷蘭、德國、羅馬尼亞、英國等的虛擬號碼。</td></tr><tr><td><a href="http://link.zhihu.com/?target=http%3A//getfreesmsnumber.com" target="_blank" rel="noopener">Getfreesmsnumber</a></td><td>提供來自英國、美國、比利時、加拿大、瑞典、德國、澳洲、捷克和其他國家的虛擬號碼。</td></tr><tr><td><a href="http://link.zhihu.com/?target=https%3A//www.receive-a-sms.com" target="_blank" rel="noopener">Receive-a-sms</a></td><td>提供來自丹麥、印尼、美國、匈牙利、智利、西班牙、葡萄牙、英國、法國、俄羅斯、澳洲、波蘭、加拿大、荷蘭、奥地利、德國、瑞典、韓國、马来西亚、捷克等國的虛擬號碼。</td></tr><tr><td><a href="http://link.zhihu.com/?target=http%3A//receive-sms-online.com" target="_blank" rel="noopener">Receive SMS Online for FREE and with NO Registration</a></td><td>提供巴西、美國、法國、英國、德國、加拿大、香港，澳 洲、西班牙、以色列等國的虛擬號碼。</td></tr></tbody></table><h1 id="马甲邮箱"><a href="#马甲邮箱" class="headerlink" title="马甲邮箱"></a>马甲邮箱</h1><table><thead><tr><th><a href="http://24mail.chacuo.net/" target="_blank" rel="noopener">十分钟邮箱</a></th><th>十分钟邮箱适用于那些<strong>没有多大再次访问价值</strong>的网站。邮箱十分钟内有效（部分支持延迟），临时收个验证码很方便。</th></tr></thead><tbody><tr><td><a href="https://www.throwawaymail.com/en" target="_blank" rel="noopener">ThrowAwayMail</a></td><td><strong>售价：</strong> 免费<strong>优点：</strong> 清晰明了的界面、优秀的易用性<strong>缺点：</strong> 功能单一、无法回复邮件<strong>适合人群：</strong> 需求简单、即用即走的用户 ThrowAwayMail 是四款服务里界面最简洁清爽的，页面布局也更易用合理。只需点击蓝色提示并通过机器人验证，系统便会自动分配一个马甲邮箱地址给你，限时 48 小时。你可以申请延时 48 小时，因此一个邮箱地址共可以使用 96 小时。</td></tr><tr><td><strong>Dropmail</strong></td><td><strong>售价：</strong> 免费（提供自愿捐赠链接）<strong>特点：</strong> 功能全面、无时间限制、整合了聊天工具推送服务<strong>缺点：</strong> 界面设计过于陈旧、难以查看和管理大量邮件、无法回复邮件<strong>适合人群：</strong> 有移动端查看邮件需求的用户Dropmail 的设计语言稍显老旧，没有多余的颜色和装饰，基本上由文字和按钮组成，但功能却一个不少。而最令人欣喜的是，提供多达 23 种语言的 Dropmail 官方支持中文。</td></tr><tr><td><strong>Guerrilla Mail</strong></td><td><strong>售价：</strong> 免费（提供自愿捐赠链接）<strong>特点：</strong> 可以发送邮件（包括附件）、有 Android 客户端、集成密码管理工具<strong>缺点：</strong> 邮件接收有延迟、Android App 已经很久未更新<strong>适合人群：</strong> 有长期使用马甲邮箱、需要发信功能的用户Guerrilla 在英文中有「游击队」之意，而 Guerrilla Mail 正如其名，通过给用户提供可丢弃的临时邮箱地址，让广告邮箱商和黑客找不着北。</td></tr><tr><td><strong>TrashMail</strong></td><td><strong>售价：</strong> 基础版免费；高级版 21.99 美元/年<strong>特点：</strong> 统一管理转发地址、API 支持、直接回复<strong>缺点：</strong> 免费版限制过多<strong>适合人群：</strong> 有统一管理马甲邮箱的需求或希望集成该功能进自己应用的用户</td></tr></tbody></table><h1 id="巧用-gmail"><a href="#巧用-gmail" class="headerlink" title="巧用 gmail"></a>巧用 gmail</h1><p>我们以 <a href="mailto:abc123@gmail.com" target="_blank" rel="noopener">abc123@gmail.com</a> 举例，后文中的 @ 使用符号 # 代替。</p><h2 id="法则一："><a href="#法则一：" class="headerlink" title="法则一："></a>法则一：</h2><p>@ 前面的部分，可以在任意位置加个 . </p><p>对于 Gmail 而言有没有这个点都是一样的。</p><p>例如 abc123 # gmail.com，可以改为以下任何一个：</p><ul><li>abc.123 # gmail.com </li><li>abc…123 # gmail.com </li><li>.abc1.2.3. # gmail.com </li><li>…abc…123… # gmail.com</li></ul><h2 id="法则二："><a href="#法则二：" class="headerlink" title="法则二："></a>法则二：</h2><p>用户名和 @ 之间，可以用 + 插入任何字串，而且可以加插任意多个 + </p><p>例如abc123 # gmail.com，可以改为以下任何一个：</p><ul><li>abc123+def456 # gmail.com </li><li>abc123+a+b+c+1+2+3 # gmail.com </li><li>abc123+Ax+By+C # gmail.com</li></ul><p>真正的粉丝，还可以用这个 ：</p><ul><li>abc123+1s # gmail.com</li><li>abc123+2s # gmail.com</li><li>abc123+3s # gmail.com</li><li>…</li></ul><p>用这个方法，可以让自己在不同网站的注册名称不同，例如</p><ul><li>abc123+Apple # gmail.com </li><li>abc123+Facebook # gmail.comabc</li><li>123+Twitter # gmail.com</li></ul><p>甚至可以作为临时邮箱地址，例如</p><ul><li>abc123+temp+1 # gmail.com </li><li>abc123+temp+2 # gmail.com</li></ul><p>这样子，只要开始收到垃圾邮件，看看收件人就可以知道是那个网站出卖了你的个人资料了。不过需要注意，不是所有服务也支持带有 + 的邮箱地址。</p><h2 id="法则三："><a href="#法则三：" class="headerlink" title="法则三："></a>法则三：</h2><p>上面两个法则可以任意搭配。例如，abc123 # gmail.com 可以改为以下任何一个：</p><ul><li>abc…123+Ma.ki+Ni.co # gmail.com </li><li>abc123.+.Nico.Nico.Ni. # gmail.com </li><li>abc.1.2.3+Yosoro.+.Zura # gmail.com</li></ul><p>这样，就可以创造多元化无限创意的小号了。</p>]]></content>
      
      
      <categories>
          
          <category> 善用佳软 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机视觉学习路线</title>
      <link href="/post/9027adc3.html"/>
      <url>/post/9027adc3.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/girl-3551152_1920.jpg" alt="题图: https://pixabay.com/illustrations/girl-pool-holidays-fun-freedom-3551152/"></p><p>深度学习算法工程师的基本要求</p><ol><li>熟练掌握python和c++编程，至少熟悉 Caffe 和 Tensorflow/Pytorch 两种框架。</li><li>熟练玩转深度学习各类模型架构使用和设计。</li><li>熟练玩转数据的整理和使用，必须深刻理解数据在深度学习任务中的地位。</li></ol><a id="more"></a><h1 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h1><p>C/C++</p><ul><li><a href="https://github.com/huihut/interview" target="_blank" rel="noopener">C/C++面试基础知识总结</a></li><li><a href="https://github.com/zh-google-styleguide/zh-google-styleguide" target="_blank" rel="noopener">Google 开源项目风格指南 (中文版)</a></li></ul><p>Python</p><ul><li><a href="https://github.com/jackfrued/Python-100-Days" target="_blank" rel="noopener">Python - 100天从新手到大师</a></li><li><a href="https://github.com/FavioVazquez/ds-cheatsheets" target="_blank" rel="noopener">List of Data Science Cheatsheets to rule the world</a></li><li><a href="https://github.com/leisurelicht/wtfpython-cn" target="_blank" rel="noopener">一些有趣且鲜为人知的 Python 特性.</a></li><li>Python 爬虫相关</li></ul><p>Linux</p><ul><li><a href="https://github.com/jaywcjlove/linux-command" target="_blank" rel="noopener">Linux命令大全搜索工具，内容包含Linux命令手册、详解、学习、搜集</a></li><li>shell &amp; git &amp; vim</li></ul><p>OpenCV</p><ul><li><a href="https://github.com/QianMo/OpenCV3-Intro-Book-Src" target="_blank" rel="noopener">《OpenCV3编程入门》书本配套源码</a></li><li><a href="https://github.com/spmallick/learnopencv" target="_blank" rel="noopener">LearnOpencv</a></li><li><a href="https://github.com/gloomyfish1998/opencv_tutorial" target="_blank" rel="noopener">基于OpenCV4.0 C++/Python SDK的案例代码演示程序与效果图像</a></li><li><a href="https://github.com/opencv/opencv" target="_blank" rel="noopener">opencv</a></li></ul><h1 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h1><p>相关论文</p><ul><li>计算机视觉入门论文：<a href="https://github.com/longpeng2008/yousan.ai/tree/master/computer_vision" target="_blank" rel="noopener">computer version</a></li><li>AutoML 论文合集：<a href="https://github.com/hibayesian/awesome-automl-papers" target="_blank" rel="noopener">Awesome-AutoML-Papers</a></li><li><a href="https://github.com/rafaelpadilla/Object-Detection-Metrics" target="_blank" rel="noopener">Most popular metrics used to evaluate object detection algorithms.</a></li><li><a href="https://github.com/virgili0/Virgilio" target="_blank" rel="noopener">virgilio</a></li><li>传统的图像降噪算法和深度学习图像降噪算法重要论文，以及Benchmark的总结：<a href="https://github.com/flyywh/Image-Denoising-State-of-the-art" target="_blank" rel="noopener">GitHub - flyywh/Image-Denoising-State-of-the-art</a></li></ul><p>深度学习</p><ul><li><a href="https://zhuanlan.zhihu.com/p/21930884" target="_blank" rel="noopener">CS231 李飞飞 已授权个人翻译笔记</a></li><li><a href="https://github.com/YujieShui?before=Y3Vyc29yOnYyOpK5MjAxOC0wMS0zMVQyMTowNDowMiswODowMM4GvWlz&amp;tab=stars" target="_blank" rel="noopener">深度学习500问</a></li><li><a href="https://github.com/nndl/nndl.github.io" target="_blank" rel="noopener">《神经网络与深度学习》 Neural Network and Deep Learning</a></li><li><a href="https://github.com/datawhalechina/pumpkin-book" target="_blank" rel="noopener">《机器学习》（西瓜书）公式推导解析</a></li><li><a href="https://github.com/fengdu78/Coursera-ML-AndrewNg-Notes" target="_blank" rel="noopener">吴恩达老师的机器学习课程个人笔记</a></li><li><a href="https://github.com/Mikoto10032/DeepLearning" target="_blank" rel="noopener">深度学习入门教程&amp;&amp;优秀文章&amp;&amp;Deep Learning Tutorial</a></li><li><a href="https://github.com/howie6879/mlhub123" target="_blank" rel="noopener">机器学习&amp;深度学习网站资源汇总（Machine Learning Resources）</a></li><li><a href="https://github.com/SpikeKing/DL-Project-Template" target="_blank" rel="noopener">深度学习工程模板</a></li><li>深度学习模型大合集：<a href="https://github.com/rasbt/deeplearning-models" target="_blank" rel="noopener">Deep Learning Models</a></li><li>深度学习综述：<a href="http://link.zhihu.com/?target=https%3A//github.com/ChristosChristofidis/awesome-deep-learning" target="_blank" rel="noopener">Awesome Deep Learning</a></li><li><a href="https://github.com/jindongwang/transferlearning-tutorial" target="_blank" rel="noopener">《迁移学习简明手册》</a></li></ul><p>机器学习</p><ul><li><a href="https://github.com/SmirkCao/Lihang" target="_blank" rel="noopener">统计学习方法</a></li><li><a href="https://github.com/fengdu78/lihang-code" target="_blank" rel="noopener">《统计学习方法》的代码实现</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457737930&amp;idx=1&amp;sn=c73df5f6d1bdcc8b4429db2d37111f72&amp;chksm=ff44b294c8333b82ff9bdf221a854dda125ecc893f9a6f665a7ddfc22f7f18d546b823465db8&amp;mpshare=1&amp;scene=1&amp;srcid=#rd" target="_blank" rel="noopener">《统计学习方法》知识点总结</a></li><li><a href="https://github.com/ddbourgin/numpy-ml" target="_blank" rel="noopener">Numpy手写主流机器学习模型</a></li><li><a href="https://github.com/Avik-Jain/100-Days-Of-ML-Code" target="_blank" rel="noopener">100-Days-Of-ML-Code</a></li><li><a href="https://github.com/MLEveryday/100-Days-Of-ML-Code" target="_blank" rel="noopener">100-Days-Of-ML-Code中文版</a></li><li><p><a href="https://github.com/lawlite19/MachineLearning_Python" target="_blank" rel="noopener">机器学习算法python实现</a></p></li><li><p><a href="https://github.com/trekhleb/homemade-machine-learning" target="_blank" rel="noopener">Homemade Machine Learning</a></p></li><li>机器学习综述：<a href="http://link.zhihu.com/?target=https%3A//github.com/josephmisiti/awesome-machine-learning%23python-cv" target="_blank" rel="noopener">Awesome Machine Learning</a></li></ul><h1 id="开源框架"><a href="#开源框架" class="headerlink" title="开源框架"></a>开源框架</h1><p>TensorFlow</p><ul><li><p><a href="https://github.com/dragen1860/TensorFlow-2.x-Tutorials" target="_blank" rel="noopener">TensorFlow 2.0 Tutorials</a></p></li><li><p><a href="https://github.com/tensorflow/examples" target="_blank" rel="noopener">TensorFlow examples</a></p></li><li><a href="https://github.com/aymericdamien/TensorFlow-Examples" target="_blank" rel="noopener">TensorFlow Tutorial and Examples for Beginners (support TF v1 &amp; v2)</a></li><li><a href="https://github.com/machinelearningmindset/TensorFlow-Course" target="_blank" rel="noopener">TensorFlow Course</a></li><li><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="noopener">An Open Source Machine Learning Framework for Everyone</a></li></ul><p>Pytorch</p><ul><li><a href="http://link.zhihu.com/?target=https%3A//github.com/bharathgs/Awesome-pytorch-list" target="_blank" rel="noopener">Awesome-Pytorch-list</a></li><li><a href="https://github.com/tensor-yu/PyTorch_Tutorial" target="_blank" rel="noopener">Pytorch模型训练实用教程</a></li></ul><p>Caffe</p><ul><li><a href="https://github.com/BVLC/caffe" target="_blank" rel="noopener">BVLC/caffe</a></li></ul><p>Darknet</p><ul><li><a href="https://github.com/hgpvision/darknet" target="_blank" rel="noopener">darknet深度学习框架源码分析</a></li><li><p><a href="https://github.com/AlexeyAB/darknet" target="_blank" rel="noopener">AlexeyAB/darknet</a></p></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deeplearning </tag>
            
            <tag> 学习资料 </tag>
            
            <tag> machinelearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3分钟找书指南</title>
      <link href="/post/c5829ae7.html"/>
      <url>/post/c5829ae7.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/books-2596809_1920.jpg" alt="题图:https://pixabay.com/photos/books-library-room-school-study-2596809/"></p><p>3分钟找书指南v1.0</p><a id="more"></a><p><a href="https://www.jiumodiary.com/" target="_blank" rel="noopener">Jiumo Search 鸠摩搜书 - 文档搜索引擎</a></p><p><a href="http://mebook.cc/" target="_blank" rel="noopener">http://mebook.cc/</a></p><p><a href="http://www.hejizhan.com/html/search/" target="_blank" rel="noopener">万千合集站</a></p><p><a href="http://cn.epubee.com/books/" target="_blank" rel="noopener">ePUBee电子书库，最大的电子书库，在线电子书管理</a></p><p><a href="https://bookfere.com/" target="_blank" rel="noopener">书伴-Kindle</a></p><p><a href="https://lorefree.com/" target="_blank" rel="noopener">Lore Free-去中心化知识共享社区</a></p><p><a href="http://www.iamtxt.com/" target="_blank" rel="noopener">http://www.iamtxt.com/</a></p><p><a href="https://sobooks.cc/" target="_blank" rel="noopener">SoBooks - kindle</a></p><p><a href="http://www.chaoxing.com/" target="_blank" rel="noopener">超星发现</a></p><p><a href="[https://openstax.org](https://openstax.org/">OpenStax|免费大学教科书数据库</a>)</p><p><a href="http://www.nlc.cn/" target="_blank" rel="noopener">中国国家图书馆</a></p><p><a href="http://www.ireadweek.com/" target="_blank" rel="noopener">周读</a></p><p><a href="https://ebook.huzerui.com/#/" target="_blank" rel="noopener">熊猫搜书</a></p><p><a href="https://www.inien.com/w/#/Index" target="_blank" rel="noopener">亿年书海 - 电子书 wiki 网</a></p><p><a href="https://ctext.org/zh" target="_blank" rel="noopener">中國哲學書電子化計劃</a></p><p><a href="https://www.shuge.org/?from=inf&amp;wvr=5&amp;loc=infblog" target="_blank" rel="noopener">书格</a></p><p><a href="https://www.gujiguan.com/" target="_blank" rel="noopener">古籍館-中國最大的古籍圖書館</a></p>]]></content>
      
      
      <categories>
          
          <category> 善用佳软 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java并发编程】Lock&amp;Condition</title>
      <link href="/post/3e6f77c3.html"/>
      <url>/post/3e6f77c3.html</url>
      
        <content type="html"><![CDATA[<p>在并发编程中有两个核心问题:一个是<strong>互斥</strong>,即同一时刻只允许一个线程访问共享资源;另一个是<strong>同步</strong>,即线程之间如何通信和协作。解决这两个问题的方法前人已经替我们总结出来理论模型,分别是<strong>管程模型</strong>和<strong>信号量模型</strong>.</p><p><img src="http://image.shuiyujie.com/2019-09-09-22-20-56.png" alt="MESA管程模型"></p><p>Java中实现管程有两种方式</p><ol><li>一是使用<code>synchronized</code>关键字给代码块添加隐式锁实现互斥,同时使用<code>notify()</code>和<code>notifyAll()</code>实现<strong>同步</strong></li><li>二是使用 Java SDK 并发包下的  Lock 和 Condition 两个接口,来实现管程.<ol><li>Lock 的特性包括:能够响应中断、支持超时和非阻塞地获取锁</li><li>Condition 实现了管程模型里面的条件变量。</li></ol></li></ol><p><em>注：Java 参考了 MESA 模型，语言内置的管程（synchronized）对 MESA 模型进行了精简。MESA 模型中，条件变量可以有多个，Java 语言内置的管程里只有一个条件变量。Java 并发包下的 Lock&amp;Condition则则支持多个条件变量。</em></p><a id="more"></a><h1 id="为什么要用-lock-amp-condition-再次实现管程"><a href="#为什么要用-lock-amp-condition-再次实现管程" class="headerlink" title="为什么要用 lock&amp;condition 再次实现管程"></a>为什么要用 lock&amp;condition 再次实现管程</h1><p>Java 已经通过<code>synchronized</code>实现了管程,那么为什么 jdk1.5 还要在并发包中用 lock&amp;condition 来实现管程? 这两种实现方式存在什么区别么? 它们各自有什么样的应用场景?</p><p>在之前的<a href="https://shuiyujie.com/post/3d624a82.html">死锁问题</a>一文中提到了死锁的产生必须同时具备 4 个条件,我们只需要破坏其中任意一个条件都能够预防死锁的发生.其中有一个条件是<strong>不可抢占</strong>,也就是线程 T1 持有某一个资源,其他线程不能强行抢占它持有的资源.</p><p>当我们使用<code>synchronized</code>加锁时,当它持有锁A,但是无法持有到锁 B, 时线程就会直接进入阻塞状态,此时一旦发生死锁就没有办法唤醒这个线程了.Lock&amp;Condition的出现就是为了做到<strong>破坏不可抢占条件</strong>.</p><p>具体来说,怎么才能破坏不可抢占条件呢?有这样 3 个思路:</p><ol><li><strong>能够响应中断</strong>.当线程进入阻塞状态之后,我们能够发送一个中断信号给这个阻塞的线程.该线程能够响应中断信号,就有机会释放持有的锁 A,就能破坏不可抢占的条件.</li><li><strong>超时机制</strong>.线程在一段时间内无法获取到锁,它不会进入阻塞状态,而是返回错误,那么这个线程也有机会释放持有的锁.</li><li><strong>非阻塞地获取锁</strong>.如果尝试获取锁失败，并不进入阻塞状态，而是直接返回.</li></ol><p>这三种方案可以弥补 synchronized 实现的管程无法破坏不可抢占条件的问题,具体来说  Lock 接口实现这里这样 3 个方法:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 支持中断的 API</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="hljs-comment">// 支持超时的 API</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">(<span class="hljs-keyword">long</span> time, TimeUnit unit)</span> <span class="hljs-keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="hljs-comment">// 支持非阻塞获取锁的 API</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">()</span></span>;</span><br></pre></td></tr></table></figure><h1 id="用两个条件变量实现阻塞队列"><a href="#用两个条件变量实现阻塞队列" class="headerlink" title="用两个条件变量实现阻塞队列"></a>用两个条件变量实现阻塞队列</h1><p> Java 语言内置的管程里只有一个条件变量，而 Lock&amp;Condition 实现的管程是支持多个条件变量的，这是二者的一个重要区别。</p><p>在很多并发场景下，支持多个条件变量能够让我们的并发程序可读性更好，实现起来也更容易。例如，实现一个阻塞队列，就需要两个条件变量。</p><p>一个阻塞队列，需要两个条件变量，一个是队列不空（空队列不允许出队），另一个是队列不满（队列已满不允许入队）。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlockedQueue</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">final</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="hljs-comment">// 条件变量,队列不满</span></span><br><span class="line">    <span class="hljs-keyword">final</span> Condition notFull = lock.newCondition();</span><br><span class="line">    <span class="hljs-comment">// 条件变量.队列不空</span></span><br><span class="line">    <span class="hljs-keyword">final</span>  Condition notEmpty = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 入队</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">enq</span><span class="hljs-params">(T x)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">while</span>(队列已满)&#123;</span><br><span class="line">                <span class="hljs-comment">// 等待队列不满</span></span><br><span class="line">                notFull.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">// 省略入队操作</span></span><br><span class="line">            <span class="hljs-comment">// 入队后,通知可出队</span></span><br><span class="line">            notEmpty.signal();</span><br><span class="line">        &#125;<span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 出队</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deq</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="hljs-keyword">try</span>&#123;</span><br><span class="line">            <span class="hljs-keyword">while</span>(队列已空)&#123;</span><br><span class="line">                <span class="hljs-comment">// 等待队列不空</span></span><br><span class="line">                notEmpty.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">// 省略出队操作</span></span><br><span class="line">            <span class="hljs-comment">// 出队后,通知可入队</span></span><br><span class="line">            notFull.signal();</span><br><span class="line">        &#125;<span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 管程 </tag>
            
            <tag> 并发工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java并发编程】Java线程的生命周期</title>
      <link href="/post/541ca933.html"/>
      <url>/post/541ca933.html</url>
      
        <content type="html"><![CDATA[<p>在 Java 领域，实现并发程序的主要手段是多线程。线程是操作系统的概念，虽然不同语言对线程操作进行了不同的封装，但是万变不离其综。</p><p>通用的线程模型可以用「五态模型」来描述，它们分别是：初始状态，可运行状态，运行状态，休眠状态和终止状态。</p><p><img src="http://image.shuiyujie.com/2019-09-08-12-04-35.png" alt="通用线程转换图——五态模型"></p><p>这五种状态在不同编程语言里会有简化合并。例如，C 语言的 POSIX Threads 规范，就把初始状态和可运行状态合并了；Java 语言里则把可运行状态和运行状态合并了，这两个状态在操作系统调度层面有用，而 JVM 层面不关心这两个状态，因为 JVM 把线程调度交给操作系统处理了。</p><p>除了简化合并，这五种状态也有可能被细化，比如，Java 语言里就细化了休眠状态。</p><a id="more"></a><h1 id="Java-线程的生命周期"><a href="#Java-线程的生命周期" class="headerlink" title="Java 线程的生命周期"></a>Java 线程的生命周期</h1><p>Java 语言中的线程有 6 种状态</p><ul><li>NEW (初始状态)</li><li>RUNNABLE (可运行/运行状态)</li><li>BLOCKED (阻塞状态)</li><li>WATTING (无限期等待)</li><li>TIMED_WAITING (有时限等待)</li><li>TERMINATED (终止状态)</li></ul><p>其中 BLOCKED、WATTING 和 TIMED_WAITING 在操作系统层面同属于前面提高的休眠状态。简化的 Java 的生命周期图，如下所示：</p><p><img src="http://image.shuiyujie.com/2019-09-08-12-11-20.png" alt="Java中的线程状态转换图"></p><p>那么些状态是如何产生，如何进行转换的呢？</p><h1 id="从-NEW-到-RUNNABLE"><a href="#从-NEW-到-RUNNABLE" class="headerlink" title="从 NEW 到 RUNNABLE"></a>从 NEW 到 RUNNABLE</h1><p>NEW 状态指的是<strong>在编程语言层面创建了线程，但是操作系统层面还未创建线程。</strong>Java 中刚创建出来的 Thread 对象就是 NEW 状态，创建 Thread 对象的方法有两种：</p><ol><li>继承 Thread 对象，重写 run() 方法</li><li>实现 RUNNABLE 接口，重写 run() 方法</li></ol><p>此时通过<code>MyThread myThread = new MyThread()</code>或者<code>Thread thread = new Thread(new Runner())</code>创建出来的线程就处在 NEW 状态。</p><p>如果想要将线程转换到 RUNNABLE 状态，只需要使用<code>start()</code>方法，即<code>myThread.start()</code> 或者 <code>thread.start()</code>。    </p><h1 id="从-RUNNABLE-到-BLOCKED"><a href="#从-RUNNABLE-到-BLOCKED" class="headerlink" title="从 RUNNABLE 到 BLOCKED"></a>从 RUNNABLE 到 BLOCKED</h1><p>BLOCK 表示阻塞状态，在 Java 中只有一种情况会触发 RUNNABLE 到 BLOCKED 的转换，那就是<strong>线程等待 synchronized 锁</strong>。synchronized 修饰的代码块同一时刻只允许一个线程执行，其他线程就只能等待。当等待的线程拿到 synchronized 隐式锁的时，就会从 BLOCKED 切换到 RUNNABLE。</p><p>这里的 BLOCKED 和操作系统层面的阻塞有所区别。在操作系统层面，当线程调用阻塞时 API，比如说进行 IO 操作，那么该线程就会处于休眠状态。但是在 JVM 层面 Java 程序的状态并不会发生改变，任然会保持为了 RUNNABLE 状态。<strong>JVM 层面并不关系操作系统调度相关的状态</strong>。在 JVM 看来，等待 CPU 的使用权，与等待 I/O 没有区别，都是在等待某个资源，所以都归入到 RUNNABLE 状态。</p><h1 id="从-RUNNBALE-到-WAITING"><a href="#从-RUNNBALE-到-WAITING" class="headerlink" title="从 RUNNBALE 到 WAITING"></a>从 RUNNBALE 到 WAITING</h1><p>总体来说，有三种场景会触发这种转换。</p><ul><li>第一种场景，获得 synchronized 隐式锁的线程，调用无参数的 Object.wait() 方法。</li><li>第二种场景，调用无参数的 Thread.join() 方法。其中的 join() 是一种线程同步方法，例如有一个线程对象 thread A，当调用 A.join() 的时候，执行这条语句的线程会等待 thread A 执行完， 而等待中的这个线程，其状态会从 RUNNABLE 转换到 WAITING。当线程 thread A 执行完，原来等待它的线程又会从 WAITING 状态转换到 RUNNABLE。</li><li>第三种场景，调用 LockSupport.park() 方法。其中的 LockSupport 对象，也许你有点陌生，其实 Java 并发包中的锁，都是基于它实现的。调用 LockSupport.park() 方法，当前线程会阻塞， 线程的状态会从 RUNNABLE 转换到 WAITING。调用 LockSupport.unpark(Thread thread) 可 唤醒目标线程，目标线程的状态又会从 WAITING 状态转换到 RUNNABLE。</li></ul><h1 id="从-RUNNBALE-到-TIMED-WATING"><a href="#从-RUNNBALE-到-TIMED-WATING" class="headerlink" title="从 RUNNBALE 到 TIMED_WATING"></a>从 RUNNBALE 到 TIMED_WATING</h1><p>有五种场景会触发这种转换：</p><ol><li><p>调用带超时参数的 Thread.sleep(long millis) 方法；</p></li><li><p>获得 synchronized 隐式锁的线程，调用带超时参数的 Object.wait(long timeout) 方法；</p></li><li><p>调用带超时参数的 Thread.join(long millis) 方法；</p></li><li><p>调用带超时参数的 LockSupport.parkNanos(Object blocker, long deadline) 方法；</p></li><li><p>调用带超时参数的 LockSupport.parkUntil(long deadline) 方法。</p></li></ol><h1 id="从-RUNNBALE-到-TERMINATED"><a href="#从-RUNNBALE-到-TERMINATED" class="headerlink" title="从 RUNNBALE 到 TERMINATED"></a>从 RUNNBALE 到 TERMINATED</h1><p>线程执行完 run() 方法后，会自动转换到 TERMINATED 状态，当然如果执行 run() 方法的时候异常抛出，也会导致线程终止。有时候我们需要强制中断 run() 方法的执行，例如 run() 方法访 问一个很慢的网络，我们等不下去了，想终止怎么办呢？Java 的 Thread 类里面倒是有个 stop() 方法，不过已经标记为 @Deprecated，所以不建议使用了。正确的姿势其实是<strong>调用 interrupt() 方法</strong>。</p><p>interrupt() 会通过异常或者主动监测的方式通知线程，线程有机会执行后续操作，也可以无视这个通知。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java并发编程】死锁</title>
      <link href="/post/3d624a82.html"/>
      <url>/post/3d624a82.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/martha-dominguez-de-gouveia-FjRNGCLnmV0-unsplash.jpg" alt="题图:https://unsplash.com/photos/FjRNGCLnmV0"></p><p>我们来想象一个场景。现在你是清朝末年账房里的一个先生，张三要给李四转4两银子，你从柜台取过张三的账本，发现李四的账本不在了，于是你想先留着张三的账本，等会儿再去柜台看看李四的账本别人用完没。</p><p>没成想，李四想着给张三转5两银子，另一个账房先生和你同时取了李四的账本。你俩想法一样，他留着李四的账本，等着一会儿去拿张三的账本。</p><p>现在的局面正是俩人互相「死等」对方的账本，在代码的世界，这种局面就叫做「死锁」。死锁用书面点的方法来说就是：<strong>一组互相竞争的线程互相等待，导致「永久」阻塞的现象。</strong></p><a id="more"></a><h1 id="死锁的局面"><a href="#死锁的局面" class="headerlink" title="死锁的局面"></a>死锁的局面</h1><p>我们现在设法用代买来描述「死锁」的局面。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> balance;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 转账</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(Account target, <span class="hljs-keyword">int</span> amt)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 锁定转出账户</span></span><br><span class="line">        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>)&#123;</span><br><span class="line">            <span class="hljs-comment">// 锁定转入账户</span></span><br><span class="line">            <span class="hljs-keyword">synchronized</span> (target)&#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.balance &gt; amt)&#123;</span><br><span class="line">                    <span class="hljs-keyword">this</span>.balance -= amt;</span><br><span class="line">                    target.balance += amt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们现在有一个账户类 Account，<code>transfer()</code>是一个转账的方法，它将当前对象的钱转到目标账户中。为了保证<code>transfer()</code>能够并发执行而不出现问题，我们给采用<strong>细粒度锁</strong>，即对资源<code>this</code>和<code>target</code>分别加上了锁，情况如下图所示：</p><p><img src="http://image.shuiyujie.com/2019-09-07-23-17-54.png" alt="死锁的局面"></p><p>当线程 T1 指向由账户 A 向账户 B 转账的操作，线程 T2 指向由账户 B 向账户 A 转账的操作。线程 T1 和 T2 同时执行到<code>synchronized (this)</code>，分别锁定了账户 A 和账户 B。当它们继续向下执行到<code>synchronized (target)</code>时会发现它们互相无法取得自己需要的锁，因为锁已经被对方持有，这就造成了<strong>「死锁的局面」</strong>。</p><h1 id="死锁产生的-4-中条件及解决办法"><a href="#死锁产生的-4-中条件及解决办法" class="headerlink" title="死锁产生的 4 中条件及解决办法"></a>死锁产生的 4 中条件及解决办法</h1><p>并发程序一旦死锁，我们一般只能重启程序。所以没有很好的办法直接解决死锁，我们能做的是<strong>规避死锁</strong>，也就是避免死锁产生的条件，有个叫 Coffman 的牛人已经总结过了，只有以下这四个条件都发生时才会出现死锁：</p><table><thead><tr><th>产生条件</th><th>解决办法</th></tr></thead><tbody><tr><td>1. 互斥，共享资源 X 和 Y 只能被一个线程占用</td><td>用锁就是为了互斥，所以不会破坏这个条件</td></tr><tr><td>2. 占有且等待，线程 T1 已经取得共享资源 X，在等待共享资源 Y 的时候，不释放共享资源 X；</td><td>一次性申请所有资源</td></tr><tr><td>3. 不可抢占，其他线程不能强行抢占线程 T1 占有的资源；</td><td>线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源</td></tr><tr><td>4. 循环等待，线程 T1 等待线程 T2 占有的资源，线程 T2 等待线程 T1 占有的资源</td><td>按序申请资源</td></tr></tbody></table><p>具体来说一下解决方案：</p><ol><li>一次申请所有资源。用一个 List 保存所有被占用的资源，并用<code>apply()</code>和<code>free()</code>方法来维护这个 List。每次调用<code>transfer()</code>时，循环等待所有资源都不在 List 中，并一次申请所有资源。</li><li>主动释放资源。<code>synchronized</code>采用阻塞等待的方式申请资源，如果想实现主动释放资源可以使用<code>java.util.concurrent</code> 这个包 下面提供的<code>Lock</code></li><li>按序申请。Accout 类中维护一个变量叫 id，每个对象都有自己的 id 序号。每次申请资源都比较两个对象的 id 大小，每次申请资源时，按照先大后小，或者先小后大的固定顺序。这样就保证先申请资源 A，再申请资源 B，不会出现先申请资源 B 再申请资源 A 的情况发生。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java并发编程】Java内存模型</title>
      <link href="/post/f7a60bf6.html"/>
      <url>/post/f7a60bf6.html</url>
      
        <content type="html"><![CDATA[<p>我们知道 CPU 与内存、IO 设备之间的读写速度存在巨大差距，短板理论也告诉我们计算机的性能取决于其性能最差的部分。</p><p>为了使内存和 IO 设备能够充分利用 CPU 的性能，同时也要兼顾设备的成本，操作系统和编译器为了做了许多优化，主要有 3 个方面：</p><ol><li>CPU 增加缓存来平衡与内存之间速度的差异</li><li>操作系统使用进程与线程，通过分时复用 CPU 来平衡 CPU 和 IO 设备速度的差异</li><li>编译器通过优化指令执行次序，来合理利用 CPU 的缓存</li></ol><p>当然，万事万物有利有弊，正式由于这些优化手段，也引入了并发编程的核心问题，即：</p><ol><li>缓存引起的可见性问题</li><li>线程切换引起的原子性问题</li><li>编译优化引起的有序性问题</li></ol><p>以上就是并发编程的 3 大核心问题。对于Java并发编程这个话题，我们主要研究的就是怎么解决这 3 个问题。</p><p>解决的思路说来也不难，就是<strong>按需禁用缓存和编译优化</strong>。在我们需要的时候，程序员指定程序禁用缓存和编译优化就可以提升程序的性能。</p><p>这就是我们本文的重点<strong>Java内存模型。</strong></p><p><img src="http://image.shuiyujie.com/2019-09-07-18-53-49.png" alt="Java 内存模型"></p><p>Java 内存模型规范了 JVM 实现按需禁用缓存和编译优化的方法。其主要包括<strong>volatile</strong>、<strong>synchronized </strong>和  <strong>final</strong> 三个关键字，以及 6 项 <strong>Happens-Before</strong> 规则。</p><a id="more"></a><h1 id="Happens-Before"><a href="#Happens-Before" class="headerlink" title="Happens-Before"></a>Happens-Before</h1><p>Happens-Before 是一种规则，它要求 JVM 按照这种规则来禁用内存和编译优化。简单来说 Happens-Before 规定了<strong>前一个操作结果对后一个操作是可见的</strong>。</p><p>举例来说现在有事件 A 和事件 B，且 A happens-before B，那就意味着事件 A 对于事件 B 是可见的，无论事件 A 和事件 B 发生在同一个线程还是不同线程，即使它们分别在两个不同的线程上发生，happens-before都会保证事件 A 对于事件 B 是可见的。具体包括以下 6 条规则：</p><ol><li>程序的顺序性规则</li><li>volatile 变量规则</li><li>传递性规则</li><li>管程中锁的规则</li><li>线程的 start() 规则</li><li>线程的 join() 规则</li></ol><h1 id="程序的顺序性规则"><a href="#程序的顺序性规则" class="headerlink" title="程序的顺序性规则"></a>程序的顺序性规则</h1><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VolatileExample</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">boolean</span> v = <span class="hljs-keyword">false</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        x = <span class="hljs-number">42</span>;</span><br><span class="line">        v = <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(v)&#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的顺序性规则即，前面的操作 happens-before 后面的操作，比如 <code>x=10</code> 对于 <code>v=true</code> 是可见的。</p><h1 id="volatile-规则"><a href="#volatile-规则" class="headerlink" title="volatile 规则"></a>volatile 规则</h1><p>volatile 在告诉编译器，对于这个变量的读写，不能使用 CPU 缓存，而是直接从内存执行读写操作。</p><p>volatile 规则规定，对于一个 volatile 变量的写操作，happens-before 于对这个变量的读操作，也就是上面这段代码的<code>write()</code>对于<code>read()</code>是可见的。</p><p>这条可以结合下面这条传递性规则来理解。</p><h1 id="传递性规则"><a href="#传递性规则" class="headerlink" title="传递性规则"></a>传递性规则</h1><p>如果 A happens-before B，B happens-before A，则 A happens-before C。这条也比较符合直觉，结合 volatile 规则来看一下。</p><p><img src="http://image.shuiyujie.com/2019-09-07-20-39-07.png" alt="传递性规则"></p><p>从图中可以看出：</p><ol><li>根据规则1，<code>x=42</code> happens-before <code>v=true</code></li><li>根据规则2，写变量 happens-before 读变量</li></ol><p>再结合传递性规则，可得：<code>x=42</code> happens-before <code>读变量v=true</code>，这就意味着线程 B 可以看到<code>x==42</code>。</p><p>而在 JDK.5 之前，x 的值可能是 0，也可能是 42。因为共享变量 x，可能会缓存在 CPU 中。JDK1.5 对volatile 语义的增强，确保了线程 B 读取到的 x 肯定是 42。</p><h1 id="管程中的锁的规则"><a href="#管程中的锁的规则" class="headerlink" title="管程中的锁的规则"></a>管程中的锁的规则</h1><p>这条规则是指对一个锁的解锁 Happens-Before 于后续对这个锁的加锁。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>) &#123; <span class="hljs-comment">// 此处自动加锁</span></span><br><span class="line"><span class="hljs-comment">// x 是共享变量，初始值 = 10</span></span><br><span class="line">  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.x &lt; <span class="hljs-number">12</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.x = <span class="hljs-number">12</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="hljs-comment">// 此处自动加锁</span></span><br></pre></td></tr></table></figure><p>synchronized 是 Java 对于管程的实现，简单来说当代码进入同步块就会自动加锁，同步块执行完成就会释放锁。</p><p>将其与规则4结合是这样的：线程 A 执行代码块将 x 的值从 10 修改为 12；之后线程 B 进入代码块能够看到线程 A 对于 x 的写操作。</p><h1 id="线程的-start-规则"><a href="#线程的-start-规则" class="headerlink" title="线程的 start() 规则"></a>线程的 start() 规则</h1><p>主线程 A 启动子线程 B 之后，子线程 B 能够看到主线程在启动子线程 B 前的操作。具体来说，主线程调用子线程的<code>start()</code>方法前的操作，子线程都能看到。</p><h1 id="线程的-join-规则"><a href="#线程的-join-规则" class="headerlink" title="线程的 join() 规则"></a>线程的 join() 规则</h1><p>这条关于线程等待，在线程 A 中，调用线程 B 的 join() 并成功返回，那么线程 B 中的任意操作 Happens-Before 于该 join() 操作的返回。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java并发编程】Java 中如何创建线程？</title>
      <link href="/post/714434fb.html"/>
      <url>/post/714434fb.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/64354575_p0_master1200.jpg" alt="Java创建线程"></p><ol><li>继承Thread实现线程创建</li><li>实现Runnable接口</li><li>实现Callable接口，结合 FutureTask使用</li><li>利用该线程池ExecutorService、Callable、Future来实现</li></ol><a id="more"></a><h1 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承  Thread 类"></a>继承  Thread 类</h1><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> start, end;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AddThread</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>(name);</span><br><span class="line">        <span class="hljs-keyword">this</span>.start = start;</span><br><span class="line">        <span class="hljs-keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"Thread-"</span> + getName() + <span class="hljs-string">" 开始执行!"</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = start; i &lt;= end; i ++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="hljs-string">"Thread-"</span> + getName() + <span class="hljs-string">" 执行完毕! sum="</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>, mid = <span class="hljs-number">5</span>, end = <span class="hljs-number">10</span>;</span><br><span class="line"></span><br><span class="line">        AddThread thread1 = <span class="hljs-keyword">new</span> AddThread(<span class="hljs-string">"线程1"</span>, start, mid);</span><br><span class="line">        AddThread thread2 = <span class="hljs-keyword">new</span> AddThread(<span class="hljs-string">"线程2"</span>, mid + <span class="hljs-number">1</span>, end);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 确保两个线程执行完毕</span></span><br><span class="line">        thread1.join();</span><br><span class="line">        thread2.join();</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">int</span> sum = thread1.sum + thread2.sum;</span><br><span class="line">        System.out.println(<span class="hljs-string">"sum: "</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Thread-线程1 开始执行!</span><br><span class="line">Thread-线程1 执行完毕! sum=15</span><br><span class="line">Thread-线程2 开始执行!</span><br><span class="line">Thread-线程2 执行完毕! sum=40</span><br><span class="line">sum: 55</span><br></pre></td></tr></table></figure><h1 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h1><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddRun</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> start, end;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AddRun</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.start = start;</span><br><span class="line">        <span class="hljs-keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" 开始执行!"</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" 执行完毕! sum="</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>, mid = <span class="hljs-number">5</span>, end = <span class="hljs-number">10</span>;</span><br><span class="line">        AddRun run1 = <span class="hljs-keyword">new</span> AddRun(start, mid);</span><br><span class="line">        AddRun run2 = <span class="hljs-keyword">new</span> AddRun(mid + <span class="hljs-number">1</span>, end);</span><br><span class="line">        Thread thread1 = <span class="hljs-keyword">new</span> Thread(run1, <span class="hljs-string">"线程1"</span>);</span><br><span class="line">        Thread thread2 = <span class="hljs-keyword">new</span> Thread(run2, <span class="hljs-string">"线程2"</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        thread1.join();</span><br><span class="line">        thread2.join();</span><br><span class="line">        <span class="hljs-keyword">int</span> sum = run1.sum + run2.sum;</span><br><span class="line">        System.out.println(<span class="hljs-string">"sum: "</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现Callable接口，结合FutureTask创建线程"><a href="#实现Callable接口，结合FutureTask创建线程" class="headerlink" title="实现Callable接口，结合FutureTask创建线程"></a>实现Callable接口，结合FutureTask创建线程</h1><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddCall</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> start, end;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AddCall</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.start = start;</span><br><span class="line">        <span class="hljs-keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" 开始执行!"</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" 执行完毕! sum="</span> + sum);</span><br><span class="line">        <span class="hljs-keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span></span><br><span class="line"><span class="hljs-function">        <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>, mid = <span class="hljs-number">5</span>, end = <span class="hljs-number">10</span>;</span><br><span class="line">        FutureTask&lt;Integer&gt; future1 = <span class="hljs-keyword">new</span> FutureTask&lt;Integer&gt;(<span class="hljs-keyword">new</span> AddCall(start, mid));</span><br><span class="line">        FutureTask&lt;Integer&gt; future2 = <span class="hljs-keyword">new</span> FutureTask&lt;Integer&gt;(<span class="hljs-keyword">new</span> AddCall(mid + <span class="hljs-number">1</span>, end));</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="hljs-keyword">new</span> Thread(future1, <span class="hljs-string">"线程1"</span>);</span><br><span class="line">        Thread thread2 = <span class="hljs-keyword">new</span> Thread(future2, <span class="hljs-string">"线程2"</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">int</span> sum1 = future1.get();</span><br><span class="line">        <span class="hljs-keyword">int</span> sum2 = future2.get();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="hljs-string">"sum = "</span> + (sum1 + sum2));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程池方式创建"><a href="#线程池方式创建" class="headerlink" title="线程池方式创建"></a>线程池方式创建</h1><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddPool</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> start, end;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AddPool</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.start = start;</span><br><span class="line">        <span class="hljs-keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" 开始执行!"</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" 执行完毕! sum="</span> + sum);</span><br><span class="line">        <span class="hljs-keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] arg)</span> </span></span><br><span class="line"><span class="hljs-function">        <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">int</span> start=<span class="hljs-number">0</span>, mid=<span class="hljs-number">500</span>, end=<span class="hljs-number">1000</span>;</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="hljs-number">2</span>);</span><br><span class="line">        Future&lt;Integer&gt; future1 = executorService.submit(<span class="hljs-keyword">new</span> AddPool(start, mid));</span><br><span class="line">        Future&lt;Integer&gt; future2 = executorService.submit(<span class="hljs-keyword">new</span> AddPool(mid+<span class="hljs-number">1</span>, end));</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">int</span> sum = future1.get() + future2.get();</span><br><span class="line">        System.out.println(<span class="hljs-string">"sum: "</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://my.oschina.net/u/566591/blog/1576410" target="_blank" rel="noopener">Java并发学习之四种线程创建方式的实现与对比</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TensorFlow2.0】实现ResNet</title>
      <link href="/post/3a297e7b.html"/>
      <url>/post/3a297e7b.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://image.shuiyujie.com/2019-09-23-19-27-13.png" alt="ResNet"></p><p>深度残差网络（Deep residual network, ResNet）的提出是CNN图像史上的一件里程碑事件，ResNet取得了5项第一，并又一次刷新了CNN模型在ImageNet上的历史。</p><p>本文介绍如何用 TensorFlow2.0 来实现 ResNet18，并用其训练 cifar100 的分类模型。</p><a id="more"></a><h1 id="ResNet-的实现"><a href="#ResNet-的实现" class="headerlink" title="ResNet 的实现"></a>ResNet 的实现</h1><p><img src="http://image.shuiyujie.com/2019-09-23-19-28-45.png" alt="a residual block" style="zoom:50%;"></p><p>ResNet 的基本结构如上图所示，为了解决网络层次过深而导致的退化问题（Degradation problem）。ResNet 设计了一种短路连接（shortcut connection）来解决这个问题。</p><p>在编程实现的角度来看，首先我们要建一个 <code>BasicBlock</code> ，它包括两个 layer，以及一个 shortcut connection。ResNet 则是由多个 <code>BasicBlock</code> 堆叠而成。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span>  tensorflow <span class="hljs-keyword">as</span> tf</span><br><span class="line"><span class="hljs-keyword">from</span>    tensorflow <span class="hljs-keyword">import</span> keras</span><br><span class="line"><span class="hljs-keyword">from</span>    tensorflow.keras <span class="hljs-keyword">import</span> layers, Sequential</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasicBlock</span><span class="hljs-params">(layers.Layer)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, filter_num, stride=<span class="hljs-number">1</span>)</span>:</span></span><br><span class="line">        super(BasicBlock, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.conv1 = layers.Conv2D(filter_num, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=stride, padding=<span class="hljs-string">'same'</span>)</span><br><span class="line">        self.bn1 = layers.BatchNormalization()</span><br><span class="line">        self.relu = layers.Activation(<span class="hljs-string">'relu'</span>)</span><br><span class="line"></span><br><span class="line">        self.conv2 = layers.Conv2D(filter_num, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=<span class="hljs-number">1</span>, padding=<span class="hljs-string">'same'</span>)</span><br><span class="line">        self.bn2 = layers.BatchNormalization()</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> stride != <span class="hljs-number">1</span>:</span><br><span class="line">            self.downsample = Sequential()</span><br><span class="line">            self.downsample.add(layers.Conv2D(filter_num, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), strides=stride))</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            self.downsample = <span class="hljs-keyword">lambda</span> x:x</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, inputs, training=None)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># [b, h, w, c]</span></span><br><span class="line">        out = self.conv1(inputs)</span><br><span class="line">        out = self.bn1(out)</span><br><span class="line">        out = self.relu(out)</span><br><span class="line"></span><br><span class="line">        out = self.conv2(out)</span><br><span class="line">        out = self.bn2(out)</span><br><span class="line"></span><br><span class="line">        identity = self.downsample(inputs)</span><br><span class="line"></span><br><span class="line">        output = layers.add([out, identity])</span><br><span class="line">        output = tf.nn.relu(output)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResNet</span><span class="hljs-params">(keras.Model)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, layer_dims, num_classes=<span class="hljs-number">100</span>)</span>:</span> <span class="hljs-comment"># [2, 2, 2, 2]</span></span><br><span class="line">        super(ResNet, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.stem = Sequential([layers.Conv2D(<span class="hljs-number">64</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)),</span><br><span class="line">                                layers.BatchNormalization(),</span><br><span class="line">                                layers.Activation(<span class="hljs-string">'relu'</span>),</span><br><span class="line">                                layers.MaxPool2D(pool_size=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), strides=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), padding=<span class="hljs-string">'same'</span>)</span><br><span class="line">                                ])</span><br><span class="line"></span><br><span class="line">        self.layer1 = self.build_resblock(<span class="hljs-number">64</span>,  layer_dims[<span class="hljs-number">0</span>])</span><br><span class="line">        self.layer2 = self.build_resblock(<span class="hljs-number">128</span>, layer_dims[<span class="hljs-number">1</span>], stride=<span class="hljs-number">2</span>)</span><br><span class="line">        self.layer3 = self.build_resblock(<span class="hljs-number">256</span>, layer_dims[<span class="hljs-number">2</span>], stride=<span class="hljs-number">2</span>)</span><br><span class="line">        self.layer4 = self.build_resblock(<span class="hljs-number">512</span>, layer_dims[<span class="hljs-number">3</span>], stride=<span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># output: [b, 512, h, w],</span></span><br><span class="line">        self.avgpool = layers.GlobalAveragePooling2D()</span><br><span class="line">        self.fc = layers.Dense(num_classes)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, inputs, training=None)</span>:</span></span><br><span class="line"></span><br><span class="line">        x = self.stem(inputs)</span><br><span class="line"></span><br><span class="line">        x = self.layer1(x)</span><br><span class="line">        x = self.layer2(x)</span><br><span class="line">        x = self.layer3(x)</span><br><span class="line">        x = self.layer4(x)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># [b, c]</span></span><br><span class="line">        x = self.avgpool(x)</span><br><span class="line">        <span class="hljs-comment"># [b, 100]</span></span><br><span class="line">        x = self.fc(x)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">build_resblock</span><span class="hljs-params">(self, filter_num, blocks, stride=<span class="hljs-number">1</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">        res_blocks = Sequential()</span><br><span class="line">        <span class="hljs-comment"># may down sample</span></span><br><span class="line">        res_blocks.add(BasicBlock(filter_num, stride))</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, blocks):</span><br><span class="line">            res_blocks.add(BasicBlock(filter_num, stride=<span class="hljs-number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> res_blocks</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">resnet18</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> ResNet([<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">resnet34</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> ResNet([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>])</span><br></pre></td></tr></table></figure><h1 id="使用-ResNet"><a href="#使用-ResNet" class="headerlink" title="使用 ResNet"></a>使用 ResNet</h1><p>ResNet 的使用和一般的模型使用没有什么区别，如果不清楚可以看这篇文章：<a href="https://shuiyujie.com/post/c6ed1613.html">【TensorFlow2.0】手撕前向传播算法</a>。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span>  tensorflow <span class="hljs-keyword">as</span> tf</span><br><span class="line"><span class="hljs-keyword">from</span>    tensorflow.keras <span class="hljs-keyword">import</span> layers, optimizers, datasets, Sequential</span><br><span class="line"><span class="hljs-keyword">import</span>  os</span><br><span class="line"><span class="hljs-keyword">from</span>    resnet1 <span class="hljs-keyword">import</span> resnet18</span><br><span class="line"></span><br><span class="line">os.environ[<span class="hljs-string">'TF_CPP_MIN_LOG_LEVEL'</span>]=<span class="hljs-string">'2'</span></span><br><span class="line">tf.random.set_seed(<span class="hljs-number">2345</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">preprocess</span><span class="hljs-params">(x, y)</span>:</span></span><br><span class="line">    <span class="hljs-comment"># [-1~1]</span></span><br><span class="line">    x = tf.cast(x, dtype=tf.float32) / <span class="hljs-number">255.</span> - <span class="hljs-number">0.5</span></span><br><span class="line">    y = tf.cast(y, dtype=tf.int32)</span><br><span class="line">    <span class="hljs-keyword">return</span> x,y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(x,y), (x_test, y_test) = datasets.cifar100.load_data()</span><br><span class="line">y = tf.squeeze(y, axis=<span class="hljs-number">1</span>)</span><br><span class="line">y_test = tf.squeeze(y_test, axis=<span class="hljs-number">1</span>)</span><br><span class="line">print(x.shape, y.shape, x_test.shape, y_test.shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">train_db = tf.data.Dataset.from_tensor_slices((x,y))</span><br><span class="line">train_db = train_db.shuffle(<span class="hljs-number">1000</span>).map(preprocess).batch(<span class="hljs-number">512</span>)</span><br><span class="line"></span><br><span class="line">test_db = tf.data.Dataset.from_tensor_slices((x_test,y_test))</span><br><span class="line">test_db = test_db.map(preprocess).batch(<span class="hljs-number">512</span>)</span><br><span class="line"></span><br><span class="line">sample = next(iter(train_db))</span><br><span class="line">print(<span class="hljs-string">'sample:'</span>, sample[<span class="hljs-number">0</span>].shape, sample[<span class="hljs-number">1</span>].shape,</span><br><span class="line">      tf.reduce_min(sample[<span class="hljs-number">0</span>]), tf.reduce_max(sample[<span class="hljs-number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># [b, 32, 32, 3] =&gt; [b, 1, 1, 512]</span></span><br><span class="line">    model = resnet18()</span><br><span class="line">    model.build(input_shape=(<span class="hljs-keyword">None</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">3</span>))</span><br><span class="line">    model.summary()</span><br><span class="line">    optimizer = optimizers.Adam(lr=<span class="hljs-number">1e-3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> range(<span class="hljs-number">500</span>):</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> step, (x,y) <span class="hljs-keyword">in</span> enumerate(train_db):</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">with</span> tf.GradientTape() <span class="hljs-keyword">as</span> tape:</span><br><span class="line">                <span class="hljs-comment"># [b, 32, 32, 3] =&gt; [b, 100]</span></span><br><span class="line">                logits = model(x)</span><br><span class="line">                <span class="hljs-comment"># [b] =&gt; [b, 100]</span></span><br><span class="line">                y_onehot = tf.one_hot(y, depth=<span class="hljs-number">100</span>)</span><br><span class="line">                <span class="hljs-comment"># compute loss</span></span><br><span class="line">                loss = tf.losses.categorical_crossentropy(y_onehot, logits, from_logits=<span class="hljs-keyword">True</span>)</span><br><span class="line">                loss = tf.reduce_mean(loss)</span><br><span class="line"></span><br><span class="line">            grads = tape.gradient(loss, model.trainable_variables)</span><br><span class="line">            optimizer.apply_gradients(zip(grads, model.trainable_variables))</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> step %<span class="hljs-number">50</span> == <span class="hljs-number">0</span>:</span><br><span class="line">                print(epoch, step, <span class="hljs-string">'loss:'</span>, float(loss))</span><br><span class="line"></span><br><span class="line">        total_num = <span class="hljs-number">0</span></span><br><span class="line">        total_correct = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">for</span> x,y <span class="hljs-keyword">in</span> test_db:</span><br><span class="line"></span><br><span class="line">            logits = model(x)</span><br><span class="line">            prob = tf.nn.softmax(logits, axis=<span class="hljs-number">1</span>)</span><br><span class="line">            pred = tf.argmax(prob, axis=<span class="hljs-number">1</span>)</span><br><span class="line">            pred = tf.cast(pred, dtype=tf.int32)</span><br><span class="line"></span><br><span class="line">            correct = tf.cast(tf.equal(pred, y), dtype=tf.int32)</span><br><span class="line">            correct = tf.reduce_sum(correct)</span><br><span class="line"></span><br><span class="line">            total_num += x.shape[<span class="hljs-number">0</span>]</span><br><span class="line">            total_correct += int(correct)</span><br><span class="line"></span><br><span class="line">        acc = total_correct / total_num</span><br><span class="line">        print(epoch, <span class="hljs-string">'acc:'</span>, acc)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deeplearning </tag>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TensorFlow2.0】手撕前向传播算法</title>
      <link href="/post/c6ed1613.html"/>
      <url>/post/c6ed1613.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://image.shuiyujie.com/tensorflow2_coming_soon" alt="TensorFlow2.0"></p><p>本文介绍如何使用 TensorFlow2.0 实现前向传播,先介绍用 TensorFlow 普通的 API 来实现前向传播,将会介绍:如何加载数据集,如何完成参数初始化和构建前向传播网络,如何计算 accuracy.</p><p>由于神经网络的训练流程大同小异,就可以使用 tf.keras 封装的 API 来简化模型训练和测试的流程.本文第二部分将会介绍如何使用 tf.keras 来定义神经网络以及优化器,如何用<code>tf.keras.metrics</code>来计算 accuracy 和 loss.</p><a id="more"></a><h1 id="安装-TensorFlow2-0"><a href="#安装-TensorFlow2-0" class="headerlink" title="安装 TensorFlow2.0"></a>安装 TensorFlow2.0</h1><p>本文的开发环境是 Ubuntu16.04 + CUDA10 + Anaconda + TensorFlow2.0，目前 conda 不支持安装 TensorFlow2.0 的包，所以需要用 pip 来安装 TensorFlow2.0。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow-gpu==2.0.0-rc0 numpy matplotlib pandas -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>截止到现在，TensorFlow 发布了最新的 rc 版本，与以后的正式发行版差别不大了。</p><h1 id="完成一次前向传播"><a href="#完成一次前向传播" class="headerlink" title="完成一次前向传播"></a>完成一次前向传播</h1><p><img src="https://image.shuiyujie.com/mnist_front_forward.gif" alt="mnist前向传播"></p><h2 id="如何加载数据集"><a href="#如何加载数据集" class="headerlink" title="如何加载数据集"></a>如何加载数据集</h2><ul><li>第1步: 使用 keras.datasets 加载 mnist 数据集,将会返回两组数据</li><li>第2步: 将 Numpy 类型的数据转换为 tensor</li><li>第3步: 将 tensor 转换为 datasets</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 需要引入的包</span></span><br><span class="line"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf</span><br><span class="line"><span class="hljs-keyword">from</span> tensorflow <span class="hljs-keyword">import</span> keras</span><br><span class="line"><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> datasets</span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 设置 TensorFlow 的日志级别,避免输出过多提示信息</span></span><br><span class="line">os.environ[<span class="hljs-string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="hljs-string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 第1步: 使用 keras.datasets 加载 mnist 数据集,将会返回两组数据</span></span><br><span class="line"><span class="hljs-comment"># x: [60000,28,28], x_test:[10000,28,28]</span></span><br><span class="line"><span class="hljs-comment"># y: [60000], y_test:[10000]</span></span><br><span class="line">(x, y), (x_text, y_text) = datasets.mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 第2步: 将 Numpy 类型的数据转换为 tensor</span></span><br><span class="line"><span class="hljs-comment"># keras.datasets 加载到的是 Numpy 类型的数据,将其转换为 tensor</span></span><br><span class="line"><span class="hljs-comment"># convert to tensor</span></span><br><span class="line"><span class="hljs-comment"># x:[0~255] =&gt; [0~1]</span></span><br><span class="line">x = tf.convert_to_tensor(x, dtype=tf.float32) / <span class="hljs-number">255.</span></span><br><span class="line">y = tf.convert_to_tensor(y, dtype=tf.int32)</span><br><span class="line"></span><br><span class="line">x_text = tf.convert_to_tensor(x_text, dtype=tf.float32) / <span class="hljs-number">255.</span></span><br><span class="line">y_text = tf.convert_to_tensor(y_text, dtype=tf.int32)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 查看数据分布情况,shape,dype,min,max</span></span><br><span class="line">print(x.shape, y.shape, x.dtype, y.dtype)</span><br><span class="line">print(tf.reduce_min(x), tf.reduce_max(y))</span><br><span class="line">print(tf.reduce_min(y), tf.reduce_max(y))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 第3步: 将 tensor 转换为 datasets</span></span><br><span class="line"><span class="hljs-comment"># tensorflow 推荐使用 tf.data.Dataset 来加载数据集</span></span><br><span class="line"><span class="hljs-comment"># tensor =&gt; datasets</span></span><br><span class="line"><span class="hljs-comment"># 128个为一个batch返回datasets</span></span><br><span class="line">train_db = tf.data.Dataset.from_tensor_slices((x,y)).batch(<span class="hljs-number">128</span>)</span><br><span class="line">test_db = tf.data.Dataset.from_tensor_slices((x_text,y_text)).batch(<span class="hljs-number">128</span>)</span><br><span class="line"></span><br><span class="line">train_iter = iter(train_db)</span><br><span class="line">sample = next(train_iter)</span><br><span class="line">print(<span class="hljs-string">"batch:"</span>, sample[<span class="hljs-number">0</span>].shape, sample[<span class="hljs-number">1</span>].shape)</span><br></pre></td></tr></table></figure><h2 id="前向传播参数初始化"><a href="#前向传播参数初始化" class="headerlink" title="前向传播参数初始化"></a>前向传播参数初始化</h2><p>前面创建的 train_db 是 shape = [128, 28, 28],表示 128 张 28x28 的灰度图像.在输入的时候我将其展开成 shape = [128, 28*28],接着用全连接层降维到 shape = 10 的 tensor,对应 mnist 共 10 类的标签.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># [b, 784] =&gt; [b, 256] =&gt; [b, 128] =&gt; [b, 10]</span></span><br><span class="line"><span class="hljs-comment"># w:[dim_in, dim_out]; b:[dim_out]</span></span><br><span class="line">w1 = tf.Variable(tf.random.truncated_normal([<span class="hljs-number">784</span>, <span class="hljs-number">256</span>], stddev=<span class="hljs-number">0.1</span>))</span><br><span class="line">b1 = tf.Variable(tf.zeros([<span class="hljs-number">256</span>]))</span><br><span class="line">w2 = tf.Variable(tf.random.truncated_normal([<span class="hljs-number">256</span>, <span class="hljs-number">128</span>], stddev=<span class="hljs-number">0.1</span>))</span><br><span class="line">b2 = tf.Variable(tf.zeros([<span class="hljs-number">128</span>]))</span><br><span class="line">w3 = tf.Variable(tf.random.truncated_normal([<span class="hljs-number">128</span>, <span class="hljs-number">10</span>], stddev=<span class="hljs-number">0.1</span>))</span><br><span class="line">b3 = tf.Variable(tf.zeros([<span class="hljs-number">10</span>]))</span><br></pre></td></tr></table></figure><h2 id="前向传播-amp-自动求导"><a href="#前向传播-amp-自动求导" class="headerlink" title="前向传播 &amp; 自动求导"></a>前向传播 &amp; 自动求导</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 学习率</span></span><br><span class="line">lr = <span class="hljs-number">1e-3</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># train_db 将会被计算 10 次</span></span><br><span class="line"><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>): <span class="hljs-comment"># iterate db for 10</span></span><br><span class="line">    <span class="hljs-comment"># 遍历 train_db</span></span><br><span class="line">    <span class="hljs-keyword">for</span> step, (x, y) <span class="hljs-keyword">in</span> enumerate(train_db, <span class="hljs-number">1</span>):</span><br><span class="line">        <span class="hljs-comment"># x:[128,28,28]</span></span><br><span class="line">        <span class="hljs-comment"># y:[128]</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># 将28x28的张量展开成784</span></span><br><span class="line">        <span class="hljs-comment"># x:[128,28,28] =&gt; [128,784]</span></span><br><span class="line">        x = tf.reshape(x, [<span class="hljs-number">-1</span>,<span class="hljs-number">28</span>*<span class="hljs-number">28</span>])</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># 使用 tf.GradientTape() 自动求导</span></span><br><span class="line">        <span class="hljs-keyword">with</span> tf.GradientTape() <span class="hljs-keyword">as</span> tape:</span><br><span class="line">            <span class="hljs-comment"># 构建前向传播的网络</span></span><br><span class="line">            <span class="hljs-comment"># x:[b,28*28]</span></span><br><span class="line">            <span class="hljs-comment"># h1 = x@w1+b1</span></span><br><span class="line">            <span class="hljs-comment"># [b,784]@[784,256]+[256] =&gt; [b,256] + [256] =&gt; []</span></span><br><span class="line">            h1 = tf.nn.relu(x@w1 + b1)</span><br><span class="line">            h2 = tf.nn.relu(h1@w2 + b2)</span><br><span class="line">            out = h2@w3 + b3</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment"># y 使用 one_hot 编码,与神经网络的输出对应</span></span><br><span class="line">            <span class="hljs-comment"># y: [b] =&gt; [b, 10]</span></span><br><span class="line">            y_onehot = tf.one_hot(y, depth=<span class="hljs-number">10</span>)</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment"># 计算均方误差 mse = mean(sum(y-out)^2)</span></span><br><span class="line">            <span class="hljs-comment"># loss:[b,10]</span></span><br><span class="line">            loss = tf.square(y_onehot-out)</span><br><span class="line">            <span class="hljs-comment"># 求误差的请平均值</span></span><br><span class="line">            <span class="hljs-comment"># loss:[b,10] =&gt; scalar</span></span><br><span class="line">            loss = tf.reduce_mean(loss)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># 借助于 tensorflow 自动求导</span></span><br><span class="line">        grads = tape.gradient(loss, [w1, b1, w2, b2, w3, b3])</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-comment"># 根据梯度更新参数</span></span><br><span class="line">        <span class="hljs-comment"># w1 = w1 - lr * w1_grad</span></span><br><span class="line">        w1.assign_sub(lr * grads[<span class="hljs-number">0</span>])</span><br><span class="line">        b1.assign_sub(lr * grads[<span class="hljs-number">1</span>])</span><br><span class="line">        w2.assign_sub(lr * grads[<span class="hljs-number">2</span>])</span><br><span class="line">        b2.assign_sub(lr * grads[<span class="hljs-number">3</span>])</span><br><span class="line">        w3.assign_sub(lr * grads[<span class="hljs-number">4</span>])</span><br><span class="line">        b3.assign_sub(lr * grads[<span class="hljs-number">5</span>])</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># 每迭代100次输出一次loss</span></span><br><span class="line">        <span class="hljs-keyword">if</span> step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:</span><br><span class="line">            print(epoch+<span class="hljs-number">1</span>, (epoch+<span class="hljs-number">1</span>)*step, <span class="hljs-string">'loss:'</span>, float(loss))</span><br></pre></td></tr></table></figure><h2 id="计算准确率-accuracy"><a href="#计算准确率-accuracy" class="headerlink" title="计算准确率 accuracy"></a>计算准确率 accuracy</h2><p>我们需要通过模型的准确率来评估模型,模型评估需要在 test_db 上进行.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">total_number = <span class="hljs-number">0</span></span><br><span class="line">   total_correct = <span class="hljs-number">0</span></span><br><span class="line">   <span class="hljs-comment"># 遍历 test_db</span></span><br><span class="line">   <span class="hljs-keyword">for</span> step, (x, y) <span class="hljs-keyword">in</span> enumerate(test_db):</span><br><span class="line"></span><br><span class="line">       <span class="hljs-comment"># [b, 28, 28] =&gt; [b, 28*28]</span></span><br><span class="line">       x = tf.reshape(x,[<span class="hljs-number">-1</span>,<span class="hljs-number">28</span>*<span class="hljs-number">28</span>])</span><br><span class="line">       </span><br><span class="line">       <span class="hljs-comment"># 利用最新的参数完成一次前向传播</span></span><br><span class="line">       <span class="hljs-comment"># [b, 784] =&gt; [b, 256] =&gt; [b, 128] =&gt; [b, 10]</span></span><br><span class="line">       h1 = tf.nn.relu(x@w1 + b1)</span><br><span class="line">       h2 = tf.nn.relu(h1@w2 + b2)</span><br><span class="line">       out = h2@w3 + b3</span><br><span class="line"></span><br><span class="line">       <span class="hljs-comment"># 使用 softmax() 输出每个分类的概率值</span></span><br><span class="line">       <span class="hljs-comment"># [b, 10] ~ R</span></span><br><span class="line">       <span class="hljs-comment"># [b, 10] ~ [0,1]</span></span><br><span class="line">       prob = tf.nn.softmax(out, axis=<span class="hljs-number">1</span>)</span><br><span class="line">       </span><br><span class="line">       <span class="hljs-comment"># 概率最大的值就是模型的预测值</span></span><br><span class="line">       <span class="hljs-comment"># [b, 10] =&gt; [b]</span></span><br><span class="line">       preb = tf.argmax(prob, axis=<span class="hljs-number">1</span>)</span><br><span class="line">       preb = tf.cast(preb, dtype=tf.int32)</span><br><span class="line">       </span><br><span class="line">       <span class="hljs-comment"># 预测值与真实值比较</span></span><br><span class="line">       <span class="hljs-comment"># [b] int32</span></span><br><span class="line">       <span class="hljs-comment"># print(y.dtype, preb.dtype)</span></span><br><span class="line">       correct = tf.cast(tf.equal(y, preb), dtype=tf.int32)</span><br><span class="line">       correct = tf.reduce_sum(correct)</span><br><span class="line">       total_correct += int(correct)</span><br><span class="line">       total_number += x.shape[<span class="hljs-number">0</span>]</span><br><span class="line"></span><br><span class="line">   acc = total_correct / total_number</span><br><span class="line">   print(<span class="hljs-string">"accuracy:"</span>, acc)</span><br></pre></td></tr></table></figure><h1 id="前向传播过程优化"><a href="#前向传播过程优化" class="headerlink" title="前向传播过程优化"></a>前向传播过程优化</h1><p><img src="https://image.shuiyujie.com/mnist_in_csv.png" alt="mnist in csv"></p><h2 id="构建数据集时添加数据预处理"><a href="#构建数据集时添加数据预处理" class="headerlink" title="构建数据集时添加数据预处理"></a>构建数据集时添加数据预处理</h2><p>Tensorflow 鼓励使用 <code>tf.data.Dataset</code>加载数据集,它给我封装了许多处理数据集的方法,比如<code>train_db = train_db.map(preprocess).shuffle(60000).batch(128)</code></p><p>在<code>preprocess(x,y)</code>中进行数据预处理,利用<code>map(preprocess)</code>调用预处理函数,再用<code>shuffle()</code>随机成对打乱数据集,最后用<code>batch()</code>将数据集按照 128 一份来分隔.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">preprocess</span><span class="hljs-params">(x, y)</span>:</span></span><br><span class="line">    <span class="hljs-comment"># 数据预处理,归一化,类型转换</span></span><br><span class="line">    x = tf.cast(x, dtype=tf.float32) / <span class="hljs-number">255.</span></span><br><span class="line">    y = tf.cast(y, dtype=tf.int32)</span><br><span class="line">    <span class="hljs-keyword">return</span> x,y</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># x: [60000,28,28], x_test:[10000,28,28]</span></span><br><span class="line"><span class="hljs-comment"># y: [60000], y_test:[10000]</span></span><br><span class="line">(x, y), (x_text, y_text) = datasets.mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># tensor =&gt; datasets</span></span><br><span class="line">train_db = tf.data.Dataset.from_tensor_slices((x,y))</span><br><span class="line">train_db = train_db.map(preprocess).shuffle(<span class="hljs-number">60000</span>).batch(<span class="hljs-number">128</span>)</span><br><span class="line"></span><br><span class="line">test_db = tf.data.Dataset.from_tensor_slices((x_text,y_text))</span><br><span class="line">test_db = test_db.map(preprocess).shuffle(<span class="hljs-number">10000</span>).batch(<span class="hljs-number">128</span>)</span><br></pre></td></tr></table></figure><h2 id="使用-tf-keras-来构建模型"><a href="#使用-tf-keras-来构建模型" class="headerlink" title="使用 tf.keras 来构建模型"></a>使用 tf.keras 来构建模型</h2><p>TensorFlow2.0 降低了使用者的门槛,利用 <code>tf.keras</code> 可以直接使用 Keras 的一系列 API,这样就可以更加方便地定义模型,比如说前面定义参数 [w,b] 的过程就可以简化成下面这样</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 用 Sequential 构建 3 层的全连接</span></span><br><span class="line">network = Sequential([layers.Dense(<span class="hljs-number">256</span>, activation=<span class="hljs-string">'relu'</span>),</span><br><span class="line">            layers.Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">'relu'</span>),</span><br><span class="line">            layers.Dense(<span class="hljs-number">10</span>)</span><br><span class="line">            ])</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># build 并制定 input</span></span><br><span class="line">network.build(input_shape=[<span class="hljs-keyword">None</span>, <span class="hljs-number">28</span>*<span class="hljs-number">28</span>])</span><br><span class="line"><span class="hljs-comment"># 查看模型参数</span></span><br><span class="line">network.summary()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 指定优化器</span></span><br><span class="line">optimizer = optimizers.Adam(lr=<span class="hljs-number">0.01</span>)</span><br></pre></td></tr></table></figure><h2 id="使用-metrics-自动计算-loss-和-accuracy"><a href="#使用-metrics-自动计算-loss-和-accuracy" class="headerlink" title="使用 metrics 自动计算 loss 和 accuracy"></a>使用 metrics 自动计算 loss 和 accuracy</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Step1.Build a meter</span></span><br><span class="line">acc_meter = metrics.Accuracy()</span><br><span class="line">loss_meter = metrics.Mean()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>): <span class="hljs-comment"># iterate db for 10</span></span><br><span class="line">    <span class="hljs-keyword">for</span> step, (x, y) <span class="hljs-keyword">in</span> enumerate(train_db, <span class="hljs-number">1</span>):</span><br><span class="line">        </span><br><span class="line">        x = tf.reshape(x, [<span class="hljs-number">-1</span>,<span class="hljs-number">28</span>*<span class="hljs-number">28</span>])</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">with</span> tf.GradientTape() <span class="hljs-keyword">as</span> tape:</span><br><span class="line">         </span><br><span class="line">            <span class="hljs-comment"># [b,784] =&gt; [b,10]</span></span><br><span class="line">            out = network(x)</span><br><span class="line">            y_onehot = tf.one_hot(y, depth=<span class="hljs-number">10</span>)</span><br><span class="line"></span><br><span class="line">            loss = tf.reduce_mean(tf.losses.categorical_crossentropy(y_onehot, out, from_logits=<span class="hljs-keyword">True</span>))</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment"># Step2.Update data</span></span><br><span class="line">            loss_meter.update_state(loss)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># compute gradients</span></span><br><span class="line">        <span class="hljs-comment"># grads = tape.gradient(loss, [w1, b1, w2, b2, w3, b3])</span></span><br><span class="line">        grads = tape.gradient(loss, network.trainable_variables)</span><br><span class="line">        optimizer.apply_gradients(zip(grads, network.trainable_variables))</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-comment"># Step3.Get Average data</span></span><br><span class="line">            print(step, <span class="hljs-string">'loss:'</span>, loss_meter.result().numpy())</span><br><span class="line">            <span class="hljs-comment"># Clear buffer</span></span><br><span class="line">            loss_meter.reset_states()</span><br><span class="line"></span><br><span class="line">    total_number = <span class="hljs-number">0</span></span><br><span class="line">    total_correct = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">for</span> step, (x, y) <span class="hljs-keyword">in</span> enumerate(test_db):</span><br><span class="line">        acc_meter.reset_states()</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># [b, 28, 28] =&gt; [b, 28*28]</span></span><br><span class="line">        x = tf.reshape(x,[<span class="hljs-number">-1</span>,<span class="hljs-number">28</span>*<span class="hljs-number">28</span>])</span><br><span class="line">        <span class="hljs-comment"># [b, 784] =&gt; [b, 256] =&gt; [b, 128] =&gt; [b, 10]</span></span><br><span class="line">        <span class="hljs-comment"># h1 = tf.nn.relu(x@w1 + b1)</span></span><br><span class="line">        <span class="hljs-comment"># h2 = tf.nn.relu(h1@w2 + b2)</span></span><br><span class="line">        <span class="hljs-comment"># out = h2@w3 + b3</span></span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment"># 输出调用 network 就可以获得</span></span><br><span class="line">        out = network(x)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># [b, 10] ~ R</span></span><br><span class="line">        <span class="hljs-comment"># [b, 10] ~ [0,1]</span></span><br><span class="line">        prob = tf.nn.softmax(out, axis=<span class="hljs-number">1</span>)</span><br><span class="line">        <span class="hljs-comment"># [b, 10] =&gt; [b]</span></span><br><span class="line">        pred = tf.argmax(prob, axis=<span class="hljs-number">1</span>)</span><br><span class="line">        pred = tf.cast(pred, dtype=tf.int32)</span><br><span class="line">        <span class="hljs-comment"># [b] int32</span></span><br><span class="line">        <span class="hljs-comment"># print(y.dtype, preb.dtype)</span></span><br><span class="line">        <span class="hljs-comment"># correct = tf.cast(tf.equal(y, pred), dtype=tf.int32)</span></span><br><span class="line">        <span class="hljs-comment"># correct = tf.reduce_sum(correct)</span></span><br><span class="line">        <span class="hljs-comment"># total_correct += int(correct)</span></span><br><span class="line">        <span class="hljs-comment"># total_number += x.shape[0]</span></span><br><span class="line">        </span><br><span class="line">        <span class="hljs-comment"># metrics 能快速计算 acc 和 loss</span></span><br><span class="line">        acc_meter.update_state(y, pred)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># acc = total_correct / total_number</span></span><br><span class="line">    print(step, <span class="hljs-string">'Evaluate Acc:'</span>, acc_meter.result().numpy())</span><br></pre></td></tr></table></figure><h2 id="tf-keras-版"><a href="#tf-keras-版" class="headerlink" title="tf.keras 版"></a>tf.keras 版</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf</span><br><span class="line"><span class="hljs-keyword">from</span> tensorflow <span class="hljs-keyword">import</span> keras</span><br><span class="line"><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> datasets, layers, optimizers, Sequential, metrics</span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.environ[<span class="hljs-string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="hljs-string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">preprocess</span><span class="hljs-params">(x, y)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">    x is a simple image, not a batch</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line">    x = tf.cast(x, dtype=tf.float32) / <span class="hljs-number">255.</span></span><br><span class="line">    x = tf.reshape(x, [<span class="hljs-number">28</span>*<span class="hljs-number">28</span>])</span><br><span class="line">    y = tf.cast(y, dtype=tf.int32)</span><br><span class="line">    y = tf.one_hot(y, depth=<span class="hljs-number">10</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> x,y</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># x: [60000,28,28], x_test:[10000,28,28]</span></span><br><span class="line"><span class="hljs-comment"># y: [60000], y_test:[10000]</span></span><br><span class="line">(x, y), (x_text, y_text) = datasets.mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># tensor =&gt; datasets</span></span><br><span class="line">train_db = tf.data.Dataset.from_tensor_slices((x,y))</span><br><span class="line">train_db = train_db.map(preprocess).shuffle(<span class="hljs-number">60000</span>).batch(<span class="hljs-number">128</span>)</span><br><span class="line"></span><br><span class="line">test_db = tf.data.Dataset.from_tensor_slices((x_text,y_text))</span><br><span class="line">test_db = test_db.map(preprocess).shuffle(<span class="hljs-number">10000</span>).batch(<span class="hljs-number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 使用 tf.Sequential 定义上面的这些参数</span></span><br><span class="line">network = Sequential([layers.Dense(<span class="hljs-number">256</span>, activation=<span class="hljs-string">'relu'</span>),</span><br><span class="line">            layers.Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">'relu'</span>),</span><br><span class="line">            layers.Dense(<span class="hljs-number">10</span>)</span><br><span class="line">            ])</span><br><span class="line"></span><br><span class="line">network.build(input_shape=(<span class="hljs-keyword">None</span>, <span class="hljs-number">28</span>*<span class="hljs-number">28</span>))</span><br><span class="line">network.summary()</span><br><span class="line"></span><br><span class="line">network.compile(optimizer=optimizers.Adam(lr=<span class="hljs-number">0.01</span>),</span><br><span class="line">                loss=tf.losses.CategoricalCrossentropy(from_logits=<span class="hljs-keyword">True</span>),</span><br><span class="line">                metrics=[<span class="hljs-string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">network.fit(train_db, epochs=<span class="hljs-number">10</span>, validation_data=test_db, validation_freq=<span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">network.evaluate(test_db)</span><br><span class="line"></span><br><span class="line">sample = next(iter(ds_val))</span><br><span class="line">x = sample[<span class="hljs-number">0</span>]</span><br><span class="line">y = sample[<span class="hljs-number">1</span>] <span class="hljs-comment"># one-hot</span></span><br><span class="line">pred = network.predict(x) <span class="hljs-comment"># [b, 10]</span></span><br><span class="line"><span class="hljs-comment"># convert back to number</span></span><br><span class="line">y = tf.argmax(y, axis=<span class="hljs-number">1</span>)</span><br><span class="line">pred = tf.argmax(pred, axis=<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">print(pred)</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deeplearning </tag>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TensorFlow2.0】TensorFlow的安装</title>
      <link href="/post/7b2629fd.html"/>
      <url>/post/7b2629fd.html</url>
      
        <content type="html"><![CDATA[<p>本文的环境是 Ubuntu16.04 + CUDA10 + Anaconda + TensorFlow2.0，现在的 conda 不支持安装 TensorFlow2.0 的包，所以需要用 pip 来安装 TensorFlow2.0。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow-gpu==2.0.0-rc0 numpy matplotlib pandas -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>截止到现在，TensorFlow 发布了最新的 rc 版本，与以后的正式发行版差别不大了。</p><a id="more"></a><p>以下是 TensorFlow1.0 的安装方法：</p><p><img src="http://image.shuiyujie.com/2019-09-22-22-45-03.png" alt></p><p><img src="http://image.shuiyujie.com/2019-09-22-22-45-44.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deeplearning </tag>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TensorFlow2.0】TensorFlow简介</title>
      <link href="/post/b5bae26d.html"/>
      <url>/post/b5bae26d.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://image.shuiyujie.com/tensorflow2_coming_soon" alt="TensorFlow2.0"></p><a id="more"></a><h1 id="TensorFlow-里程碑"><a href="#TensorFlow-里程碑" class="headerlink" title="TensorFlow 里程碑"></a>TensorFlow 里程碑</h1><p><img src="https://image.shuiyujie.com/2019-09-22-21-50-21.png" alt="TensorFlow里程碑"></p><ul><li>2015.9发布0.1版本</li><li>2017.2发布1.0版本</li><li>2019春发布2.0版本</li></ul><h1 id="TensorFlow-vs-Pytorch"><a href="#TensorFlow-vs-Pytorch" class="headerlink" title="TensorFlow vs Pytorch"></a>TensorFlow vs Pytorch</h1><p>TensorFlow1.0 上手困难，经常被诟病，都说 Pytorch。现在 TensorFlow2.0 出了，就容易上手多了。</p><p><img src="https://image.shuiyujie.com/2019-09-22-21-53-34.png" alt="TensorFlow1.0 vs PyTorch"></p><p><img src="https://image.shuiyujie.com/2019-09-22-21-54-20.png" alt="TensorFlow2.0 vs PyTorch"></p><p>学习建议就是</p><ul><li><p>忘掉 TensorFlow1.x</p></li><li><p>PyTorch和TensorFlow选择一个主修</p></li><li><ul><li>两者都要掌握</li></ul></li><li><p>Keras逐渐淡出</p></li><li><ul><li>TF+Keras</li><li>PyTorch+Caffe2</li></ul></li></ul><h1 id="TensorFlow-的优点"><a href="#TensorFlow-的优点" class="headerlink" title="TensorFlow 的优点"></a>TensorFlow 的优点</h1><h2 id="GPU-加速"><a href="#GPU-加速" class="headerlink" title="GPU 加速"></a>GPU 加速</h2><p>用 CPU 和 GPU 分别测试一下运算速度</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf</span><br><span class="line"><span class="hljs-keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">with</span> tf.device(<span class="hljs-string">'/cpu:0'</span>):</span><br><span class="line">    cpu_a = tf.random.normal([<span class="hljs-number">10000</span>, <span class="hljs-number">1000</span>])</span><br><span class="line">    cpu_b = tf.random.normal([<span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>])</span><br><span class="line">    print(cpu_a.device, cpu_b.device)</span><br><span class="line"><span class="hljs-keyword">with</span> tf.device(<span class="hljs-string">'/gpu:0'</span>):</span><br><span class="line">    gpu_a = tf.random.normal([<span class="hljs-number">10000</span>, <span class="hljs-number">1000</span>])</span><br><span class="line">    gpu_b = tf.random.normal([<span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>])</span><br><span class="line">    print(gpu_a.device, gpu_b.device)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cpu_run</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">with</span> tf.device(<span class="hljs-string">'/cpu:0'</span>):</span><br><span class="line">        c = tf.matmul(cpu_a, cpu_b)</span><br><span class="line">    <span class="hljs-keyword">return</span> c</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gpu_run</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">with</span> tf.device(<span class="hljs-string">'/gpu:0'</span>):</span><br><span class="line">        c = tf.matmul(gpu_a, gpu_b)</span><br><span class="line">    <span class="hljs-keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># warm up</span></span><br><span class="line">cpu_time = timeit.timeit(cpu_run, number=<span class="hljs-number">10</span>)</span><br><span class="line">gpu_time = timeit.timeit(gpu_run, number=<span class="hljs-number">10</span>)</span><br><span class="line">print(<span class="hljs-string">'warmup:'</span>, cpu_time, gpu_time)</span><br><span class="line"></span><br><span class="line">cpu_time = timeit.timeit(cpu_run, number=<span class="hljs-number">10</span>)</span><br><span class="line">gpu_time = timeit.timeit(gpu_run, number=<span class="hljs-number">10</span>)</span><br><span class="line">print(<span class="hljs-string">'run time:'</span>, cpu_time, gpu_time)</span><br></pre></td></tr></table></figure><p><img src="https://image.shuiyujie.com/2019-09-22-21-56-26.png" alt></p><h2 id="自动求导"><a href="#自动求导" class="headerlink" title="自动求导"></a>自动求导</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf</span><br><span class="line">x = tf.constant(<span class="hljs-number">1.</span>)</span><br><span class="line">a = tf.constant(<span class="hljs-number">2.</span>)</span><br><span class="line">b = tf.constant(<span class="hljs-number">3.</span>)</span><br><span class="line">c = tf.constant(<span class="hljs-number">4.</span>)</span><br><span class="line"><span class="hljs-keyword">with</span> tf.GradientTape() <span class="hljs-keyword">as</span> tape:</span><br><span class="line">    tape.watch([a, b, c])</span><br><span class="line">    y = a**<span class="hljs-number">2</span> * x + b * x + c</span><br><span class="line">[dy_da, dy_db, dy_dc] = tape.gradient(y, [a, b, c])</span><br><span class="line">print(dy_da, dy_db, dy_dc)</span><br></pre></td></tr></table></figure><h2 id="神经网络-API"><a href="#神经网络-API" class="headerlink" title="神经网络 API"></a>神经网络 API</h2><p><img src="https://image.shuiyujie.com/2019-09-22-21-57-14.png" alt="神经网络 API"></p><h1 id="TensorFlow-社区"><a href="#TensorFlow-社区" class="headerlink" title="TensorFlow 社区"></a>TensorFlow 社区</h1><p><a href="https://github.com/tensorflow?utf8=✓&amp;q=model&amp;type=&amp;language=" target="_blank" rel="noopener">TensorFlow 社区地址</a></p><p><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="noopener">TensorFlow Github 地址</a></p><h2 id="TensorFlow-生态-TFX"><a href="#TensorFlow-生态-TFX" class="headerlink" title="TensorFlow 生态 - TFX"></a>TensorFlow 生态 - TFX</h2><p><img src="https://image.shuiyujie.com/2019-09-22-21-59-09.png" alt="TFX"></p><p>TFX - 基于 TensorFlow 的端到端机器学习平台</p><p><a href="https://github.com/tensorflow/tfx" target="_blank" rel="noopener">TFX Github 地址</a></p><h2 id="TensorFlow-生态-Kubeflow"><a href="#TensorFlow-生态-Kubeflow" class="headerlink" title="TensorFlow 生态 - Kubeflow"></a>TensorFlow 生态 - Kubeflow</h2><p><img src="https://image.shuiyujie.com/2019-09-22-22-00-34.png" alt="Kubeflow"></p><p>Kubeflow 表示 K8s + Data flow</p><p>一个典型的 AI 工作流程是怎么样的？可以划分成 8 个步骤：</p><ol><li>从客户获得产品需求</li><li>设计我们的产品</li><li>数据处理</li><li>训练模型</li><li>数据/模型可视化</li><li>将模型做成服务</li><li>模型验证：蓝绿测试、灰度测试</li><li>商业上取得成功</li></ol><p><a href="https://github.com/kubeflow/kubeflow" target="_blank" rel="noopener">KubeFlow Github 地址</a></p><p><a href="https://github.com/kubernetes/kubernetes" target="_blank" rel="noopener">kubernetes Githube 地址</a></p>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deeplearning </tag>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome食用指南</title>
      <link href="/post/1e186084.html"/>
      <url>/post/1e186084.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/chrome.jpg" alt="chrome"></p><p><strong>Google Chrome 浏览器（后面简称 Chrome）</strong>是全球市场占有率最高的浏览器，全球范围内有超过 10 亿人在使用 Chrome。</p><a id="more"></a><p><strong>1、登录 Google 账号。</strong>登录 Google 账号之后可以同步书签，历史记录等。同步书签是非常便利的一个功能，这样即使换了一台电脑也能快速找到自己收藏的实用网站。</p><p><img src="http://image.shuiyujie.com/Snipaste_2019-08-31_09-12-57.png" alt="登录谷歌账号"></p><p><strong>2、自定义搜索引擎。</strong>在设置(S)中可以选择默认的搜索引擎，建议换成 Google。在地址栏中输入想要搜索的内容，可以直接用 Google 搜索。</p><p><img src="http://image.shuiyujie.com/2019-08-31-09-09-34.png" alt="自定义搜索引擎"></p><p><strong>3、设置为默认浏览器。</strong>必须设置为默认浏览器呀！</p><p><img src="http://image.shuiyujie.com/2019-08-31-09-15-03.png" alt="设置为默认浏览器"></p><p>Chrome 中各类好用的插件让它如虎添翼，介绍几个我最常用的插件。</p><h1 id="印象笔记「裁藏」"><a href="#印象笔记「裁藏」" class="headerlink" title="印象笔记「裁藏」"></a>印象笔记「裁藏」</h1><p>「裁藏」需要配合印象笔记来使用。它的作用是将网页中你感兴趣的部分保存到印象笔记中。</p><p><img src="http://image.shuiyujie.com/2019-08-31-09-19-52.png" alt="印象笔记「裁藏」"></p><h1 id="广告屏蔽插件-AdGuard"><a href="#广告屏蔽插件-AdGuard" class="headerlink" title="广告屏蔽插件 AdGuard"></a>广告屏蔽插件 AdGuard</h1><p>屏蔽广告弹窗，侧边栏的小广告，保持浏览网页时的专注度。</p><p><img src="http://image.shuiyujie.com/2019-08-31-09-28-14.png" alt="AdGuard"></p><h1 id="脚本管理插-Tampermonkey"><a href="#脚本管理插-Tampermonkey" class="headerlink" title="脚本管理插 Tampermonkey"></a>脚本管理插 Tampermonkey</h1><p>Tampermonkey 可以管理各类脚本，而脚本可以辅助我们做更多事情。比如，百度云盘高速下载、豆瓣搜索电影的时候显示资源链接等。</p><p>可以搜索<em>油猴脚本</em>了解更多内容。</p><p><img src="http://image.shuiyujie.com/2019-08-31-09-32-14.png" alt="Tampermonkey"></p><h1 id="Explain-and-Send-Screenshots"><a href="#Explain-and-Send-Screenshots" class="headerlink" title="Explain and Send Screenshots"></a>Explain and Send Screenshots</h1><p>可以滚动将整个网页的内容生成一张长图。</p><p><img src="http://image.shuiyujie.com/2019-08-31-09-36-10.png" alt="长截图工具 "></p><h1 id="防追踪插件-GHOSTERY"><a href="#防追踪插件-GHOSTERY" class="headerlink" title="防追踪插件 GHOSTERY"></a>防追踪插件 GHOSTERY</h1><p>打开网页之后会有许多后台程序开始追踪你的个人信息，ghostery会告诉你哪些人在追踪你的信息，并帮助你屏蔽他们。</p><p><img src="http://image.shuiyujie.com/2019-08-31-09-38-55.png" alt="ghostery"></p>]]></content>
      
      
      <categories>
          
          <category> 善用佳软 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快，学会shell</title>
      <link href="/post/92782b0b.html"/>
      <url>/post/92782b0b.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/hacker-2300772_1920.jpg" alt="学习shell编程"></p><p><em>题图：<a href="https://pixabay.com/illustrations/hacker-cyber-crime-internet-2300772/" target="_blank" rel="noopener">https://pixabay.com/illustrations/hacker-cyber-crime-internet-2300772/</a></em></p><p>本文分成入门篇和基础篇。基础篇包括变量、字符串处理、数学运算三部分。基础篇包括流控制、函数和函数库三部分。主要是基于例子进行讲解，其中有 4 个复杂一点的脚本，看懂了也就入门了。</p><a id="more"></a><p>我们先来聊一聊 shell 和 shell script 的概念。计算机的运行离不开硬件，我们通过操作系统（OS，Operating System）操作硬件，而我们所说的 linux 严格来说是操作系统（OS）的核心部分——内核（Kernel）。我们无法直接操作 kernel，需要借助于 kernel 外的一层壳 shell 才能与 kernel 进行交互。如果把操作系统(OS)看做是一家公司，shell 就是前台，kernel 就是董事会。当我们访问公司的时候，先和前台(shell)打个招呼，前台通知董事会(kernel)，董事会来控制公司(OS)。</p><p>俗话说“铁打的营盘流水的兵”，就是公司人来人往，都不会影响公司的运转。对于操作系统也一样，我们可以替换操作系统的前台(shell)，甚至董事会(kernel)。如果你想知道你的系统中用到的是什么 shell 可以访问 /etc/shells 文件。,我的电脑上就有下面几种 shell</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> /etc/shells: valid login shells</span></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/dash</span><br><span class="line">/bin/bash</span><br><span class="line">/bin/rbash</span><br><span class="line">/bin/zsh</span><br><span class="line">/usr/bin/zsh</span><br></pre></td></tr></table></figure><h1 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h1><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">!/bin/bash</span></span><br><span class="line">for ((i=0; i&lt;10; i++));</span><br><span class="line">do</span><br><span class="line">    echo $&#123;i&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>直接来看一个例子吧。创建一个名为 shell001.sh 的文件，写上上面几行代码： </p><ul><li>第 1 行，指定 shell 的解释器。shell 脚本就和 python 或者 jsp 需要用解释器来解析，第 1 行就是用于指定解释器，也就是之前提到的 /etc/shells 下面列出来的。 </li><li>第 2 行，循环语句，共循环 10 次，会在后面流控制章节讲解，加上 do 和 done 是 for 循环中的语法规则，for、do、done 是 shell script 中的关键字 </li><li>第 4 行，打印 i 这个变量 </li></ul><p>那么怎么运行这个脚本呢？既然是运行我们既要给它赋予可执行权限<code>chmod +x shell001.sh</code>，接着用 <code>./shell001.sh</code> 执行这个脚本。脚本运行起来将会在终端输出 0 到 9 这几个数字。 </p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>前面没有解释第 4 行<code>echo ${i}</code>。echo 是一个简单的 linux 命令，它会将输入从到标准输出(stdout)上，然后在终端中显示出来，这里显示的就是<code>${i}</code>这个变量的值。</p><p>在 shell 中定义变量的规则如下：</p><ul><li>变量和等号之间不能有空格</li><li>变量名称由字母、数字和下划线组成</li><li>变量名称的第一个字符必须是字母或者下划线</li><li>变量名称中不允许空格和标点</li></ul><p>比如说一个变量为<code>name=&quot;shuiyj&quot;</code>，那么使用变量就要加上<code>$</code>符号，打印这个变量就使用<code>echo ${name}</code>。此外变量除了显示地赋值，还可以使用语句给变量赋值:</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 获取该文件夹下后缀为 jpg 结尾的列表</span></span><br><span class="line">for image in `ls *.jpg`</span><br></pre></td></tr></table></figure><h3 id="变量匹配"><a href="#变量匹配" class="headerlink" title="变量匹配"></a>变量匹配</h3><p>我们会定义和使用一个变量了，接下来我会介绍几个使用的处理变量的方法。</p><p>现在一张图片的名字叫做 cat.jpg，我想要获取文件的名称，即 cat。当然这有很多的中方法，这里介绍一种实用的方法——变量匹配。</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>${变量名#匹配规则}</td><td>从变量<strong>开头</strong>进行规则匹配，将符合<strong>最短</strong>的数据删除</td></tr><tr><td>${变量名##匹配规则}</td><td>从变量<strong>开头</strong>进行规则匹配，将符合<strong>最长</strong>的数据删除</td></tr><tr><td>${变量名%匹配规则}</td><td>从变量<strong>结尾</strong>进行规则匹配，将符合<strong>最短</strong>的数据删除</td></tr><tr><td>${变量名%%匹配规则}</td><td>从变量<strong>结尾</strong>进行规则匹配，将符合<strong>最长</strong>的数据删除</td></tr><tr><td>${变量名/旧字符串/新字符串}</td><td>变量中符合规则的<strong>第一个</strong>旧字符串将会被旧字符串代替</td></tr><tr><td>${变量名//旧字符串/新字符串}</td><td>变量中符合规则的<strong>所有</strong>旧字符串将会被旧字符串代替</td></tr></tbody></table><p>回到最开始的需求，就可以使用<code>%</code>来实现</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat="cat.jpg"</span><br><span class="line">echo $&#123;cat&#125; # cat.jpg</span><br><span class="line">echo $&#123;cat%.*&#125; # cat</span><br></pre></td></tr></table></figure><p>首先定义一个变量 cat 并为其赋值，接着用<code>$</code>获取 cat 变量的值并打印出来，最后使用变量替换截取字符串。</p><p>变量匹配在 shell 中会被高频使用，要记住这些规则。</p><h3 id="特殊变量的含义"><a href="#特殊变量的含义" class="headerlink" title="特殊变量的含义"></a>特殊变量的含义</h3><p>shell 中有一些特殊的变量，它们有很多实用的功能，比如说校验输入的参数，允许追加更多参数，判断上一条命令是否执行成功等。</p><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td>$0</td><td>当前脚本的文件名</td></tr><tr><td>$n</td><td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是<code>$1</code>，第二个参数是<code>$2</code></td></tr><tr><td>$#</td><td>传递给脚本或函数的参数个数。</td></tr><tr><td>$*</td><td>传递给脚本或函数的所有参数。</td></tr><tr><td>$@</td><td>传递给脚本或函数的所有参数。被双引号<code>(&quot; &quot;)</code>包含时，与 <code>$*</code>稍有不同，下面将会讲到。</td></tr><tr><td>$?</td><td>上个命令的退出状态，或函数的返回值。</td></tr><tr><td>$$</td><td>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td></tr></tbody></table><p>比如说我们要对 shell 中的输入参数进行校验，可以添加这样一段</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">!/bin/bash</span></span><br><span class="line">if [ $# != 2 ];then</span><br><span class="line">    echo "Usage: $0 &lt;change ID&gt; &lt;target ID&gt;"</span><br><span class="line">    exit -1</span><br><span class="line">fi</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>其中<code>$#</code>表示输入的参数数量，我们通过条件判断在程序的输入参数不为 2 的时候将会进行提示，并退出程序。其中<code>$0</code>一般是可执行文件的名称。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>变量的话题就先讲到这里，接下来讲 shell 中处理字符串的一些注意事项和技巧。无论学习哪一门编程语言，字符串的处理都是一个绕不开的话题，并且在 shell 编程中用的最多的就是字符串。</p><h3 id="单引号和双引号的区别"><a href="#单引号和双引号的区别" class="headerlink" title="单引号和双引号的区别"></a>单引号和双引号的区别</h3><p>字符串可以用单引号，也可以用双引号，还可以不用引号，我们要注意它们之间的区别。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 单引号</span></span><br><span class="line">str='this is a string'</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 双引号</span></span><br><span class="line">your_name='qinjx'</span><br><span class="line">str="Hello, I know your are \"$your_name\"! \n"</span><br></pre></td></tr></table></figure><p>单引号</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的</li><li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）</li></ul><p>双引号</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><p>想要了解更多它们之间的区别可以看这篇文章：<a href="https://github.com/wzb56/13_questions_of_shell/blob/master/4.%22%22%E4%B8%8E&#39;&#39;%E7%9A%84%E5%B7%AE%E5%9C%A8%E5%93%AA.md" target="_blank" rel="noopener">shell十三问之4：””(双引号)与’’(单引号)差在哪？</a>。</p><h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><p>shell 中的字符串拼接只要直接连在一起就可以。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">first_name="yujie"</span><br><span class="line">last_name="shui"</span><br><span class="line">greeting="hello,$&#123;first_name&#125; $&#123;last_name&#125;"</span><br><span class="line"></span><br><span class="line">echo $&#123;greeting&#125;</span><br></pre></td></tr></table></figure><h3 id="计算字符串的长度"><a href="#计算字符串的长度" class="headerlink" title="计算字符串的长度"></a>计算字符串的长度</h3><p>shell 中有两种方法可以计算字符串长度。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str="abcde"</span><br><span class="line">echo $&#123;#str&#125; # 5</span><br><span class="line">expr length "$&#123;str&#125;" # 5</span><br></pre></td></tr></table></figure><h3 id="获取子串在字符串中的索引"><a href="#获取子串在字符串中的索引" class="headerlink" title="获取子串在字符串中的索引"></a>获取子串在字符串中的索引</h3><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr index $&#123;string&#125; $&#123;substring&#125;</span><br></pre></td></tr></table></figure><h3 id="抽取子串"><a href="#抽取子串" class="headerlink" title="抽取子串"></a>抽取子串</h3><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>${string:position}</td><td>从string中的position开始</td></tr><tr><td>${string:position}</td><td>从position开始，并指定长度为length</td></tr><tr><td>${string:-position}</td><td>从右边开始匹配</td></tr><tr><td>${string:(postion)}</td><td>从左边开始匹配</td></tr><tr><td><code>expr substr $string $position $length</code></td><td>从position开始，匹配长度为length</td></tr></tbody></table><h2 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h2><p>命令替换指的是 shell执行命令并将命令替换部分替换为执行该命令后的结果（先执行该命令，然后用结果代换到命令行中），共有有两种实现命令替换的方式：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 方法一</span></span><br><span class="line">`command`</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 方法二</span></span><br><span class="line"><span class="hljs-meta">$</span><span class="hljs-bash">(<span class="hljs-built_in">command</span>)</span></span><br></pre></td></tr></table></figure><p>还记得之前讲变量的时候提到变量既可以直接获取，也可以从语句获取么？</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 获取该文件夹下后缀为 jpg 结尾的列表</span></span><br><span class="line">for image in `ls *.jpg`</span><br></pre></td></tr></table></figure><p>可以看到 Image 获取到的是<code>ls *.jpg</code>的返回值，也就是一个文件的列表。这里就用到命令替换的符号<code></code>即两个反引号。</p><p>再比如获取系统的所有用户并输出</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">index=1 </span><br><span class="line">for user in `cat /etc/passwd | cut -d ":" -f 1` </span><br><span class="line">do </span><br><span class="line">echo "This is $&#123;index&#125; user: $&#123;user&#125;" </span><br><span class="line">index = $(($index + 1)) </span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><code>cat /etc/passwd | cut -d &quot;:&quot; -f 1</code>将会截取用户名，由于使用了命令替换，其执行结果会返回给 user 变量，此时的 user 就是一个包含用户名称的列表。</p><p>最后再举一个使用<code>$()</code>的例子，比如获取系统时间计算今年或明年</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo "This is $(date +%Y) year" </span><br><span class="line">echo "This is $(($(date +%Y) + 1)) year"</span><br></pre></td></tr></table></figure><h2 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h2><p>shell 中就两种变量，字符串和数字，数字又要按照整型和浮点型分开进行处理，处理它们的函数是不同的。整型运算需要使用<code>expr $num1 operator $num2</code>或者<code>$(($num1 operator $num2))</code>，浮点型运算则需要使用<code>bc</code>。</p><p>任然是通过案例的方式进行说明，假设现在有这样一个需求：提示用户输入一个正整数 num，然后计算 1+2+3+…+num 的值，并且必须对 num 是否为正整数做判断，不符合应该允许再次输入。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">!/bin/bash</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"></span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    read -p "please input a positive number: " num</span><br><span class="line">    expr $num + 1 &amp;&gt; /dev/null</span><br><span class="line">    if [ $? -eq 0 ];then</span><br><span class="line">        if [ `expr $num \&gt; 0` -eq 1 ];then</span><br><span class="line">            for((i=1;i&lt;=$num;i++))</span><br><span class="line">            do</span><br><span class="line">                sum=`expr $sum + $i`</span><br><span class="line">            done    </span><br><span class="line">            echo "1+2+3+....+$num = $sum"</span><br><span class="line">            exit</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">    echo "error,input enlegal"</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>这个脚本优点复杂但是不用着急，我们先关注于数学运算<code>expr $num + 1</code> 这一部分，其中关于<code>if</code>判断的部分会在下一节讲解。</p><p><code>expr $num + 1</code> 意思就是做一次整数运算，将 num 和 1 相加。做这个操作的目的是判断 num 是不是一个整数，因为 expr 只能应用在整数运算上，所以执行<code>expr $num + 1</code>之后，如果 num 是整数<strong>退出状态</strong>就是正常的<code>$? = 0</code>，否则 <code>$? ≠ 0</code> ，并且我们并不需要返回结果，可以将结果重定向到<code>/dev/null</code>中，即<code>expr $num + 1 &amp;&gt; /dev/null</code>。</p><p><em>注：在特殊变量的含义这一节可以了解<code>$?</code>的含义。退出状态指的是命令执行完毕之后像操作系统返回的值，成功则为 0。</em></p><p>expr 支持整数运算，不支持浮点数运算，要做浮点数运算那就要用到 bc。bc 是 bash 内建的运算器，支持浮点数运算，使用方法如下所示：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo "23.3+30" | bc</span><br><span class="line">53.3</span><br><span class="line">echo "scale=4;23.3/3.2" | bc</span><br><span class="line">7.2812</span><br></pre></td></tr></table></figure><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><p>在前面的入门篇，我们了解了变量、字符串和数学运算，接下来我将会介绍 shell 中流程控制的语法规则，以及 shell 中如何使用函数以及函数库。当我们掌握以上这些内容，shell 就可以算是入门了，那么就一起开始吧。</p><h2 id="流控制"><a href="#流控制" class="headerlink" title="流控制"></a>流控制</h2><p>流控制就是用判断语句，循环语句来控制程序执行的逻辑，就从我们在上一节数学运算中的那个脚本讲起吧，它既包含了<code>if</code>又包含了<code>while</code>循环，是一个很好的例子。</p><h3 id="IF-控制语句"><a href="#IF-控制语句" class="headerlink" title="IF 控制语句"></a>IF 控制语句</h3><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">!/bin/bash</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"></span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    read -p "please input a positive number: " num</span><br><span class="line">    expr $num + 1 &amp;&gt; /dev/null</span><br><span class="line">    if [ $? -eq 0 ];then</span><br><span class="line">        if [ `expr $num \&gt; 0` -eq 1 ];then</span><br><span class="line">            for((i=1;i&lt;=$num;i++))</span><br><span class="line">            do</span><br><span class="line">                sum=`expr $sum + $i`</span><br><span class="line">            done    </span><br><span class="line">            echo "1+2+3+....+$num = $sum"</span><br><span class="line">            exit</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">    echo "error,input enlegal"</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>上一节中的脚本中<code>expr $num + 1 &amp;&gt; /dev/null</code>是关于数学运算的部分，紧跟着的<code>if</code>就是一个控制语句，我们抛开无关部分，开看一下关于<code>if</code>的骨架</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">expr $num + 1 &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">if [ $? -eq 0 ];then</span><br><span class="line">...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>这里首选要进一步解释<strong>退出状态</strong>的含义。之前已经说了，退出状态指的是命令（包括脚本和函数）在执行完毕之后，向操作系统返回的值。这个值是一个 0~255 的整数，用来表示命令执行成功还是失败，其中 0 代表命令执行成功。参数<code>$?</code>则用于保存这个返回值。</p><p>由此可以看出<code>if</code>在这里做的就是判断<code>expr $num + 1 &amp;&gt; /dev/null</code>是否执行成功。</p><p>此外，我们也可以使用<code>if...elif..else</code>的形式，如下：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if condition1</span><br><span class="line">then</span><br><span class="line">command1</span><br><span class="line">elif condition2</span><br><span class="line">command2</span><br><span class="line">else</span><br><span class="line">commandN</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>此外，在实际开发过程中还经常会对文件状态进行判断，比如说判断这是不是一个文件夹、是不是一个文本文件等；或者会对字符串进行判断，比如说字符串是否为空，字符串长度是否符合要求；还会对数值进行比较操作，就像例子中提到到值是不是为 0 等。</p><h4 id="判断表达式"><a href="#判断表达式" class="headerlink" title="判断表达式"></a>判断表达式</h4><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if test     #表达式为真</span><br><span class="line">if test !   #表达式为假</span><br><span class="line">test 表达式1 –a 表达式2     #两个表达式都为真</span><br><span class="line">test 表达式1 –o 表达式2     #两个表达式有一个为真</span><br><span class="line">test 表达式1 ! 表达式2       #条件求反</span><br></pre></td></tr></table></figure><h4 id="文件表达式"><a href="#文件表达式" class="headerlink" title="文件表达式"></a>文件表达式</h4><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">test File1 –ef File2    #两个文件是否为同一个文件，可用于硬连接。主要判断两个文件是否指向同一个inode。</span><br><span class="line">test File1 –nt File2    #判断文件1是否比文件2新</span><br><span class="line">test File1 –ot File2    #判断文件1比是否文件2旧</span><br><span class="line">test –b file   #文件是否块设备文件</span><br><span class="line">test –c File   #文件并且是字符设备文件</span><br><span class="line">test –d File   #文件并且是目录</span><br><span class="line">test –e File   #文件是否存在 （常用）</span><br><span class="line">test –f File   #文件是否为正规文件 （常用）</span><br><span class="line">test –g File   #文件是否是设置了组id</span><br><span class="line">test –G File   #文件属于的有效组ID</span><br><span class="line">test –h File   #文件是否是一个符号链接（同-L）</span><br><span class="line">test –k File   #文件是否设置了Sticky bit位</span><br><span class="line">test –b File   #文件存在并且是块设备文件</span><br><span class="line">test –L File   #文件是否是一个符号链接（同-h）</span><br><span class="line">test –o File   #文件的属于有效用户ID</span><br><span class="line">test –p File   #文件是一个命名管道</span><br><span class="line">test –r File   #文件是否可读</span><br><span class="line">test –s File   #文件是否是非空白文件</span><br><span class="line">test –t FD     #文件描述符是在一个终端打开的</span><br><span class="line">test –u File   #文件存在并且设置了它的set-user-id位</span><br><span class="line">test –w File   #文件是否存在并可写</span><br><span class="line">test –x File   #文件属否存在并可执行</span><br></pre></td></tr></table></figure><h4 id="字符串表达式"><a href="#字符串表达式" class="headerlink" title="字符串表达式"></a>字符串表达式</h4><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test string #string不为空</span><br><span class="line">test –n 字符串    #字符串的长度非零</span><br><span class="line">test –z 字符串    #字符串的长度是否为零</span><br><span class="line">test 字符串1＝字符串2       #字符串是否相等，若相等返回true</span><br><span class="line">test 字符串1＝=字符串2      #字符串是否相等，若相等返回true</span><br><span class="line">test 字符串1!＝字符串2      #字符串是否不等，若不等反悔false</span><br><span class="line">test 字符串1&gt;字符串2# 在排序时，string1 在 string2 之后</span><br><span class="line">test 字符串1&lt;字符串2# 在排序时，string1 在 string2 之前</span><br></pre></td></tr></table></figure><h4 id="整数表达式"><a href="#整数表达式" class="headerlink" title="整数表达式"></a>整数表达式</h4><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test 整数1 -eq 整数2    #整数相等</span><br><span class="line">test 整数1 -ge 整数2    #整数1大于等于整数2</span><br><span class="line">test 整数1 -gt 整数2    #整数1大于整数2</span><br><span class="line">test 整数1 -le 整数2    #整数1小于等于整数2</span><br><span class="line">test 整数1 -lt 整数2    #整数1小于整数2</span><br><span class="line">test 整数1 -ne 整数2    #整数1不等于整数2</span><br></pre></td></tr></table></figure><p>以上表达式摘自<a href="https://www.jishuchi.com/read/linux-command-collection/1576?wd=%E7%BC%96%E7%A8%8B" target="_blank" rel="noopener">test - shell环境中测试条件表达式工具</a>，test 是测试条件表达式的工具，test 后面部分的内容可以用于<code>if</code>条件判断中。</p><h3 id="WHILE-和-UNTIL-循环"><a href="#WHILE-和-UNTIL-循环" class="headerlink" title="WHILE 和 UNTIL 循环"></a>WHILE 和 UNTIL 循环</h3><p>再接之前的脚本来讲解 while 的用法</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">!/bin/bash</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"></span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    read -p "please input a positive number: " num</span><br><span class="line">    expr $num + 1 &amp;&gt; /dev/null</span><br><span class="line">    if [ $? -eq 0 ];then</span><br><span class="line">        if [ `expr $num \&gt; 0` -eq 1 ];then</span><br><span class="line">            for((i=1;i&lt;=$num;i++))</span><br><span class="line">            do</span><br><span class="line">                sum=`expr $sum + $i`</span><br><span class="line">            done    </span><br><span class="line">            echo "1+2+3+....+$num = $sum"</span><br><span class="line">            exit</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">    echo "error,input enlegal"</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>前面也说过，这个脚本的目的是接收一个 num，如果输入的 num 不是一个整数就一直让用户输入，直到输入的 num 是一个整数为止。这里就用到了 while 循环，并且将循环条件设置为 true，也就是一个永久的循环。循环不能终止，按照逻辑我们要在用户输入整数并完成计算之后推出程序,所以这里通过<code>exit</code>来退出程序，这里也可以使用<code>break</code>来跳出循环。我们还可以配合使用<code>continue</code>表示继续执行，这里没有举例说明。</p><p>while命令退出状态不为0时终止循环，而until命令则刚好相反。除此之外，until命令与while命令很相似。until循环会在接收到为0的退出状态时终止。在while-count脚本中，循环会一直重复到count变量小于等于5。使用until改写脚本也可以达到相同的效果。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">!/bin/bash</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> until-count: display a series of numbers</span></span><br><span class="line"></span><br><span class="line">count=1</span><br><span class="line"></span><br><span class="line">until [ $count -gt 5 ]; do</span><br><span class="line">　　　　　echo $count</span><br><span class="line">　　　　　count=$((count + 1))</span><br><span class="line">done</span><br><span class="line">echo "Finished."</span><br></pre></td></tr></table></figure><p>将测试表达式改写为<code>count –gt 5 until</code>就可以在合适的时刻终止循环。选择使用while还是until，通常取决于哪种循环能够允许程序员写出最明了的测试表达式。</p><h3 id="case-分支"><a href="#case-分支" class="headerlink" title="case 分支"></a>case 分支</h3><p>前面讲了使用<code>if</code>做条件判断，在其他语言比如 C++ 或者 Java 等中都存在<code>switch..case..</code>这样的语句，shell 也提供了<code>case</code>这个多选项符合命令，它的命令格式是这样的：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">case word in</span><br><span class="line">　　　　[pattern [| pattern]...) commands ;;]...</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>在这里我想举一个做算数运算的例子，这和例子与下一节讲解的函数相关，其中用到了<code>case</code>，但是即使不了解函数怎么使用，也不会对理解<code>case</code>的运用造成影响。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">!/bin/bash</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"></span></span><br><span class="line">function calcu</span><br><span class="line">&#123;</span><br><span class="line">    case $2 in</span><br><span class="line">        +)</span><br><span class="line">            echo "`expr $1 + $3`"</span><br><span class="line">            ;;</span><br><span class="line">        -)</span><br><span class="line">            echo "`expr $1 - $3`"</span><br><span class="line">            ;;</span><br><span class="line">        \*)</span><br><span class="line">            echo "`expr $1 \* $3`"</span><br><span class="line">            ;;</span><br><span class="line">        /)</span><br><span class="line">            echo "`expr $1 / $3`"</span><br><span class="line">            ;;</span><br><span class="line">    esac</span><br><span class="line">&#125;</span><br><span class="line">calcu $1 $2 $3</span><br></pre></td></tr></table></figure><p>这个脚本希望做的是一次算数运算，根据操作符是<code>+ - * /</code>来进行运算。</p><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p>现在到了流控制的最后一节了，for 循环其实在文章一开始我们就见过了，在文章最开始我举了两个例子：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 获取该文件夹下后缀为 jpg 结尾的列表</span></span><br><span class="line">for image in `ls *.jpg`</span><br><span class="line">do</span><br><span class="line">....</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 输出 0-9 共 10 个数字</span></span><br><span class="line">for ((i=0; i&lt;10; i++));</span><br><span class="line">do</span><br><span class="line">    echo $&#123;i&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>第一种是传统的形式，和 python 中的 for 循环很像，我们可以像这样<code>for i in A B C D;do echo $i; done</code>使用 for 循环，可以将循环的内容就当成 python 中的一个列表，也可以像<code>for i in {A..E};do echo $i; done</code>这样创建字符列表。</p><p>第二种方式就是 C 语言的形式了<code>for ((i=0; i&lt;10; i++))</code>，比较常规也没什么值得讲的。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>在上一节中，我们介绍了 shell 中的流控制的语法：if, while, until, case和 for。再之前我们讲了变量、字符串和数学运算。到这一节就可以讲一下函数这个话题了。</p><p>了解了上面这些内容理论上已经能够写出任何的程序的，不过写程序的过程中会有许多类似的代码，如果全部重新写一遍程序就会显得冗长，所以一般的做法就是将可以复用的代码抽取出来形成函数。shell 自然也支持函数的使用，接下里就看看在 shell 中怎么定义和使用函数。</p><p>首先看 shell 中函数是怎么定义的。shell 中的函数有两种定义格式，使用任意一种都可以。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name()</span><br><span class="line">&#123;</span><br><span class="line">command1</span><br><span class="line">  command2</span><br><span class="line">  ...</span><br><span class="line">  commandn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function name</span><br><span class="line">&#123;</span><br><span class="line">command1</span><br><span class="line">  command2</span><br><span class="line">  ...</span><br><span class="line">  commandn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我比较习惯用第二种形式，你可以选择任何一种方式，不过我接下来的例子是按照第二种定义方式。</p><p>我们知道了函数定义的架构，但是如果你用过其他编程语言会发现它没有参数列表，也没有返回值，这在一开始也让我觉得很困惑，但是我们在变量那一节学过特殊变量的含义，其中有一个变量是<code>$0</code>表示函数的名称，shell 中的变量是通过命令行键入，再用<code>$1 $2 $3</code>读取的。这就和 C++ 或者 Java 中的主函数读取参数一个道理，<code>char** argv</code>和<code>String[] args</code>就是由命令行键入的参数列表。</p><p>下面就用一个具体函数的例子进行说明，这个例子在 流控制——case 这一节也讲过，但是没有讲完：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">!/bin/bash</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"></span></span><br><span class="line">function calcu</span><br><span class="line">&#123;</span><br><span class="line">    case $2 in</span><br><span class="line">        +)</span><br><span class="line">            echo "`expr $1 + $3`"</span><br><span class="line">            ;;</span><br><span class="line">        -)</span><br><span class="line">            echo "`expr $1 - $3`"</span><br><span class="line">            ;;</span><br><span class="line">        \*)</span><br><span class="line">            echo "`expr $1 \* $3`"</span><br><span class="line">            ;;</span><br><span class="line">        /)</span><br><span class="line">            echo "`expr $1 / $3`"</span><br><span class="line">            ;;</span><br><span class="line">    esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">calcu $1 $2 $3</span><br><span class="line">echo ""calcu $1 $2 $3""</span><br></pre></td></tr></table></figure><p>首先这个脚本的文件名为 calcu，其中定义了一个函数 calcu，采用的是第二种函数定义方式，在函数体中我们利用<code>case</code>做了一个多条件判断。</p><p>在脚本的结尾我们调用了 calcu 这个函数，并将输入了三个参数，紧接着为了给大家看到三个参数分别是什么我选择将其打印出来。调用函数的过程是这样的：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-2-ubuntu:/tmp$ ./calcu.sh 5 + 3</span><br><span class="line">8</span><br><span class="line">calcu 5 + 3</span><br></pre></td></tr></table></figure><p>可以看到在这里<code>$1 = 5, $2 = +, $3 = 3</code>，这就是 shell 中传递参数的方式。</p><p>再看 shell 中返回值这个问题，shell 有两种返回值的方式，一种是使用<code>return</code>，一种是使用<code>echo</code>。</p><ul><li>使用<code>return</code><ul><li>使用 return 返回值，只能返回 1-255 的整数</li><li>函数使用 return 返回值。通常只能用来供其他地方调用获取状态，因此通常仅返回0或1；0表示成功，1表示失败</li></ul></li><li>使用<code>echo</code><ul><li>使用 echo 可以返回任何字符串结果</li><li>通常用于返回数据，比如一个字符串值或者列表值</li></ul></li></ul><p><code>echo</code>的内容作为返回值可以看一下上面这个例子，这里再举一个<code>return</code>来返回值的例子。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">!/bin/bash</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"></span></span><br><span class="line">this_pid=$$</span><br><span class="line">function is_nginx_running</span><br><span class="line">&#123;</span><br><span class="line">    ps -ef | grep nginx | grep -v grep | grep -v $this_pid &amp;&gt; /dev/null</span><br><span class="line">    if [ $? -eq 0 ];then</span><br><span class="line">        return</span><br><span class="line">    else</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line">is_nginx_running &amp;&amp; echo "Nginx is running" || echo "Nginx is stoped"</span><br></pre></td></tr></table></figure><p>和前面说过的退出状态一样，return 也是 0 表示函数执行成功，其他表示执行失败。这里举的例子是通过查看 Nginx 的进程来来确认 Nginx 是否运行。</p><p>首先是用<code>$$</code>来接收这个 shell 脚本的 Pid，因为脚本名字中带有 Nginx 就需要将其利用 Pid 过滤掉。还记得之前讲的的退出状态么，如果 ps 命令找到了 nginx 进程退出状态就会是 0，表示成功。最后就通过<code>return</code>来返回 nginx 是否正常运行。</p><p>之后可以用后台挂起的形式运行这个脚本，将其作为 nginx 的守护进程：<code>nohup sh nginx.sh &amp;</code>，使用<code>tail -f nohup.out</code>来查看监听结果。</p><h2 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h2><p>讲到函数就还有一个作用域的问题需要讨论，shell 中的局部变量、全局变量和一般编程语言没什么区别。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">!/bin/bash</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"></span></span><br><span class="line">var1="Hello world"</span><br><span class="line">function test</span><br><span class="line">&#123;</span><br><span class="line">    local var2=87</span><br><span class="line">&#125;</span><br><span class="line">test</span><br><span class="line">echo $var1</span><br><span class="line">echo $var2</span><br></pre></td></tr></table></figure><p>这里给到一个脚本自行体会一下即可。</p><h2 id="函数库"><a href="#函数库" class="headerlink" title="函数库"></a>函数库</h2><p>基础篇的最后一部分就用来介绍一下 shell 中的函数库。函数库是每一门编程语言中非常重要的一部分，比如说 C++ 中的标准库，Java 中的 JDK，正式这些优秀的库存在才让编程变得更加高效。</p><p>shell 也是可以封装自己的库的，比如我现在下一个你要加加减乘除封装成一个函数库，作为之前 calcu 脚本的升级版，该函数库实现以下几个函数：</p><ol><li>加法函数 add </li><li>减法函数 reduce </li><li>乘法函数 multiple </li><li>除法函数 divide </li><li>打印系统运行情况的函数 sys_load，该函数显示内存运行情况， </li></ol><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function add</span><br><span class="line">&#123;</span><br><span class="line">    echo "`expr $1 + $2`"</span><br><span class="line">&#125;</span><br><span class="line">function reduce</span><br><span class="line">&#123;</span><br><span class="line">    echo "`expr $1 - $2`"</span><br><span class="line">&#125;</span><br><span class="line">function multiple</span><br><span class="line">&#123;</span><br><span class="line">    echo "`expr $1 \* $2`"</span><br><span class="line">&#125;</span><br><span class="line">function divide</span><br><span class="line">&#123;</span><br><span class="line">    echo "`expr $1 / $2`"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sys_load</span><br><span class="line">&#123;</span><br><span class="line">    echo "Memory Info"</span><br><span class="line">    echo</span><br><span class="line">    free -m</span><br><span class="line">    echo</span><br><span class="line">    </span><br><span class="line">    echo "Disk Usage"</span><br><span class="line">    echo</span><br><span class="line">    df -h</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将上面文件封装成一个函数库 lib/base_function。</p><ul><li>经常使用的重复代码封装成函数文件 </li><li>一般不直接执行，而是由其他脚本调用 </li></ul><p>接着用一个 shell 脚本 calculate.sh 调用函数库中的函数</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">!/bin/bash</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"></span></span><br><span class="line">. /root/lesson/3.5/lib/base_function</span><br><span class="line">add 12 23</span><br><span class="line">reduce 90 30</span><br><span class="line">multiple 12 12</span><br><span class="line">divide 12 2</span><br></pre></td></tr></table></figure><p>编写函数库文件的建议 </p><ul><li>库文件名的后缀是任意的，但一般使用 .lib </li><li>库文件通常没有可执行选项 </li><li>库文件无序和脚本在同级目录，只需在脚本中引用时指定 </li><li>第一行一般使用 #/bin/echo, 输出警告信息，避免用户执行 </li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/22226727/" target="_blank" rel="noopener">《Linux 命令行大全》</a></p><p><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md" target="_blank" rel="noopener">Shell脚本编程30分钟入门</a></p><p><a href="https://github.com/alebcay/awesome-shell" target="_blank" rel="noopener">Awesome Shell</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux进程</title>
      <link href="/post/87698413.html"/>
      <url>/post/87698413.html</url>
      
        <content type="html"><![CDATA[<ul><li>ps：显示当前所有进程的运行情况。</li><li>top：实时显示当前所有任务的资源占用情况。</li><li>jobs：列出所有活动作业的状态信息。</li><li>bg：设置在后台中运行作业。</li><li>fg：设置在前台中运行作业。</li><li>kill：发送信号给某个进程。</li><li>killall：杀死指定名字的进程。</li><li>shutdown：关机或者重启系统。</li></ul><a id="more"></a><h1 id="使用ps命令查看进程信息"><a href="#使用ps命令查看进程信息" class="headerlink" title="使用ps命令查看进程信息"></a>使用ps命令查看进程信息</h1>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux目录结构</title>
      <link href="/post/5e2eb880.html"/>
      <url>/post/5e2eb880.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/linux_directory.jpeg" alt="Linux目录结构"></p><a id="more"></a><ol><li>/bin - 基本命令的二进制文件。</li><li>/boot - 引导加载程序的静态文件。</li><li>/dev - 设备文件。</li><li><strong>/etc</strong> - 配置文件。</li><li>/home - 普通用户主目录的父目录。</li><li>/lib - 共享库文件。</li><li>/lib64 - 共享64位库文件。</li><li>/lost+found - 存放未链接文件。</li><li>/media - 自动识别设备的挂载目录。</li><li>/mnt - 临时挂载文件系统的挂载点。</li><li>/opt - 可选插件软件包安装位置。</li><li>/proc - 内核和进程信息。</li><li><strong>/root</strong> - 超级管理员用户主目录。</li><li>/run - 存放系统运行时需要的东西。</li><li>/sbin - 超级用户的二进制文件。</li><li>/sys - 设备的伪文件系统。</li><li>/tmp - 临时文件夹。</li><li><strong>/usr</strong> - 用户应用目录。</li><li>/var - 变量数据目录。</li></ol><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">"/" : 根目录Linux文件系统的入口.也是最高级，最重要的的目录.除衍生出其它目录，还和系统的开机，还原，系统修复有的，一般要求不要把任务应用程序直接放在根目录下，如果满了，可能就登录不了了（需要注意是否日志输出在根目录下）</span><br><span class="line">"/bin":基本系统所需要的命令,主要是单用户模式下，还能执行的命令。主要有cat，mv,mkdir,cp,bash ,ls</span><br><span class="line">"/boot":内核和加载内核所需要的文件.grub系统引导管理器也在这个目录下,存在/boot/grub/</span><br><span class="line">"/dev":在linux系统下，任何设备及接口设备，都是以文件的形式存在，设备文件存储目录.像终端.磁盘等.比较重要的有/dev/null （crontab经常把不想输出输到这里）;/dev/zero;/dev/tty;/dev/lp*;/dev/hd*;/dev/sd*</span><br><span class="line">"/etc":系统的主要配置文件都放在这个目录下，一般来说，这个普通人是看不到这些文件的;这里最好也不要放可执行文件。常见的目录有如下：/etc/inittab ;/etc/init.d/;/etc/modprobe.conf ;/etc/X11/ ;/etc/fstab/ ;/etc/sysconfig/ ;</span><br><span class="line">/etc/init.d/开机启动脚本放在这里;/etc/xinetd.d/ super daemon启动脚本放在这里</span><br><span class="line">/etc/sysconfig/network/scripts/网管配置放在下面下</span><br><span class="line">"/home":普通用户的目录默认存储目录.主文件夹有两种代号：</span><br><span class="line">~ 代表这个用户的主目录</span><br><span class="line">~dmtsai:代表 dmtsai的主文件夹</span><br><span class="line">"/lib":库文件和内核模块存放目录.主要是开机用到，以及在/bin/;/sbin目录下命 令会调用的库函数。/lib/modules会放内核相关的模块。</span><br><span class="line">"/lib64":和/lib类似，主要是64的库函数</span><br><span class="line">/usr 是存放可以分享与不可以动的内容，不是user的缩写，而是UNIX Software Resource 的缩写，就是UNIX操作系统的软件资源</span><br><span class="line">主要子目录有：</span><br><span class="line">/usr/X**/ X Windows数据存在于此</span><br><span class="line">/usr/bin/ 绝大部分用户可用命令在此</span><br><span class="line">/usr/include/ C/C++等的头文件与包含文件在些。如果以源码的*.tar.gz安装软件时，可能会引用下面的文件</span><br><span class="line">/usr/lib/ 包含应用程序函数库及目标文件，以及不被一般用户惯用的执行文件或脚 本</span><br><span class="line">/usr/lib64/ 与/usr/lib/相似，会对64位的</span><br><span class="line">/usr/local/ 本机自己安装的的软件，建议安装到这里，下面也有bin,etc,include,lib子目录，这些子目录功能大家可以想到</span><br><span class="line">/usr/sbin/ 非系统正常运行所需要的命令，最常见的就是网络服务器软件的daemon</span><br><span class="line">/usr/share/ 放共享文件的地方，基本是文本文件，可读的。子目录有</span><br><span class="line">/usr/share/man 在线帮助文件</span><br><span class="line">/usr/share/doc 软件杂项的说明文件</span><br><span class="line">/usr/share/zoneinfo 软件杂项的说明文件</span><br><span class="line">/usr/src 软件源码放在这里</span><br><span class="line">"/media":即插即用设备的挂载点自动存放在这个目录下.像U盘,cdrom/dvd自动挂载后,就会在这个目录下.常见有/media/floppy,/media/cdrom</span><br><span class="line">"/mnt":临时文件系统的挂载点目录.以前和/media一样，但有专门/media后，专门做临时挂载</span><br><span class="line">"/opt":第三方软件的存放目录.什么叫第三方呢？像KDE，就是第三方的，只是集成到linux里，当然你可以放自己的东西到下面。</span><br><span class="line">"/root":Linux超级权限用户root的跟目录.单独存放，也方便在进入单用户模式的操作。</span><br><span class="line">"/sbin":基本的系统维护命令,只能由超级用户使用.这些命令为开机、修复、还原系统过程所需要的。常见的命令有fdisk,fsck,ifconfig,init,mkfs</span><br><span class="line">"/srv":存放一些服务器启动之后需要提取的数据.主要存放网络服务后的一些数据，如www,ftp</span><br><span class="line">"/tmp":临时文件目录,这个目录任何人可以访问，有可能需要定期清理。</span><br><span class="line">"/usr":存放用户使用系统命令和应用程序等信息.像命令.帮助文件等.</span><br><span class="line">"/var":存放经常变动的数据,像日志.邮件等.这个目录下的数据，需要定期清理，最好写个脚本，放在crontab里。常见的子目录：</span><br><span class="line">/var/cache/ 执行中的缓存文件</span><br><span class="line">/var/lib/ 软件本身执行的过程中，用到的数据。比如Mysql数据一般放在/var/lib/mysql/;而rpm数据则放在 /var/lib/rpm/</span><br><span class="line">/var/lock/ 资源被锁时，放在此。有些资源只能一个程序使用，比如刻录机。</span><br><span class="line">/var/log/ 系统日志存在地，有可能需要定时清理</span><br><span class="line">/var/mail/ 系统邮件，看情况需要定时清理</span><br><span class="line">/var/run/ 某些程序或服务启动后，PID放在下现</span><br><span class="line">/var/spool/放置队列数据， 看情况需要定时清理</span><br><span class="line">/lost+found 是ext2/ext3文件系统才产生的，目的是当文件系统产生错误里，将一些丢失的片段防在这个目录下。</span><br><span class="line">/proc 是一个虚拟文件系统。放置内存中的数据，当有一个进程启动时，就有一个文件夹。比较重要的/proc/meminfo,/proc/cpuinfo可以通过这两文件查看内存和CPU情况，当然还有 /proc/dma, /proc/interrupts, /proc/ioports,/proc/net/*等</span><br><span class="line">/sys 和/proc相似，也是虚拟文件系统，主要记录内核相关，比如内核模块，内核检测的硬件信息。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备忘-Mac使用小技巧</title>
      <link href="/post/ccb5aaa3.html"/>
      <url>/post/ccb5aaa3.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/apple-1839046_1920.jpg" alt="题图: https://pixabay.com/photos/apple-books-computers-desk-desktop-1839046/"></p><p>备忘：一些使用 mac 的小 tips。</p><a id="more"></a><h1 id="如何设置允许任何来源软件安装？"><a href="#如何设置允许任何来源软件安装？" class="headerlink" title="如何设置允许任何来源软件安装？"></a>如何设置允许任何来源软件安装？</h1><p>“安全性与隐私” 勾选任何来源，如果没有该选项，在终端输入如下命令：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure><h1 id="如何设置开机启动项目"><a href="#如何设置开机启动项目" class="headerlink" title="如何设置开机启动项目"></a>如何设置开机启动项目</h1><p><img src="http://image.shuiyujie.com/2019-09-23-00-40-46.png" alt="如何设置开机启动项目"></p><h1 id="连接不上-Wifi，其他设备可以正常使用"><a href="#连接不上-Wifi，其他设备可以正常使用" class="headerlink" title="连接不上 Wifi，其他设备可以正常使用"></a>连接不上 Wifi，其他设备可以正常使用</h1><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">以下方法都是打苹果客服的热线得来的，顺序为推荐顺序</span><br><span class="line"></span><br><span class="line">1.打开设置-网络-位置，更改为自动，或者顺便新建一个新的位置</span><br><span class="line">2.打开设置-网络-高级，DNS，设置为114.114.114.114和8.8.8.8</span><br><span class="line">3.打开finder-前往-电脑-Macintosh HD-资源库-Perferences，删除这个文件com.apple.wifi.message-tracer</span><br><span class="line">4.关机，立即同时按下control+commmand+R+P, 听到三声响声后松手</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 善用佳软 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Caffe】Caffe实战手写数字分类</title>
      <link href="/post/96cd1245.html"/>
      <url>/post/96cd1245.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://image.shuiyujie.com/2019-06-17-18-25-09.png" alt="Caffe"></p><p><a href="http://caffe.berkeleyvision.org/" target="_blank" rel="noopener">Caffe</a>是优秀的深度学习开源框架，并具有良好的开源生态，我们可以在<a href="https://github.com/BVLC/caffe/wiki/Model-Zoo" target="_blank" rel="noopener">Model zoo</a>中找到许多模型的实现。本文以 Caffe 提供的 <a href="https://caffe.berkeleyvision.org/gathered/examples/mnist.html" target="_blank" rel="noopener">Training LeNet on MNIST with Caffe</a> 为例，介绍 Caffe 使用流程，并且在原文基础上增加可视化 accuracy 和 loss 的内容。</p><p>本文的目标是能够了解 Caffe 基本的使用流程。</p><a id="more"></a><p><img src="https://image.shuiyujie.com/2019-06-17-18-23-18.png" alt="Caffe 使用流程"></p><h1 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h1><p>在安装和编译 Caffe 之后进入根目录，执行以下命令，将会下载 <a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">MNIST</a> 数据集。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd $CAFFE_ROOT</span><br><span class="line">./data/mnist/get_mnist.sh #下载 mnist 数据集</span><br><span class="line">./examples/mnist/create_mnist.sh # 将下载下来的数据集格式调整为 caffe 能够解析的格式</span><br></pre></td></tr></table></figure><p>数据集包括 mnist_train_lmdb 和 mnist_test_lmdb 两部分。</p><h1 id="定义-Net"><a href="#定义-Net" class="headerlink" title="定义 Net"></a>定义 Net</h1><p>Caffe 提供的示例中使用 lenet_train_test.prototxt 定义 <a href="http://yann.lecun.com/exdb/publis/pdf/lecun-01a.pdf" target="_blank" rel="noopener">LeNet</a> 的网络结构。LetNet 网络结构为<code>卷积层 -&gt; 池化层 -&gt; 卷积层 -&gt; 池化层 -&gt; 全连接层 -&gt; 全连接层 -&gt; 全连接层</code>。Caffe 用 layer 来表示表示网络，网络被定义在以<code>.prototxt</code>结尾的文件中，因为 Caffe 使用了 <a href="https://developers.google.com/protocol-buffers/docs/overview" target="_blank" rel="noopener">Google Protobuf</a> 作为数据传输的格式。</p><p>在 lenet_train_test.prototxt 中我们可看到<code>name: &quot;LeNet&quot;</code>表示网络结构的名称为 LeNet，接下来是</p><figure class="highlight protobuf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">layer &#123;</span><br><span class="line">  name: <span class="hljs-string">"mnist"</span> # 名称</span><br><span class="line">  type: <span class="hljs-string">"Data"</span> # 输入层</span><br><span class="line">  transform_param &#123;</span><br><span class="line">    scale: <span class="hljs-number">0.00390625</span> # 归一化，范围为 <span class="hljs-number">0</span>-<span class="hljs-number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  data_param &#123;</span><br><span class="line">    source: <span class="hljs-string">"mnist_train_lmdb"</span> # 指定要读取的数据</span><br><span class="line">    backend: LMDB</span><br><span class="line">    batch_size: <span class="hljs-number">64</span></span><br><span class="line">  &#125;</span><br><span class="line">  top: <span class="hljs-string">"data"</span></span><br><span class="line">  top: <span class="hljs-string">"label"</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我们可以通过 <a href="http://ethereon.github.io/netscope/#/editor" target="_blank" rel="noopener">http://ethereon.github.io/netscope/#/editor</a> 生成网络图像，或者使用 caffe 提供的脚本，它在<code>caffe/python/draw_net.py</code>。</p><h1 id="配置-Solver"><a href="#配置-Solver" class="headerlink" title="配置 Solver"></a>配置 Solver</h1><p>Solver 用来指定训练的一些参数，比如使用哪个网络、迭代次数、优化方法、使用 GPU 还是 CPU 等信息。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> The train/<span class="hljs-built_in">test</span> net protocol buffer definition</span></span><br><span class="line">net: "examples/mnist/lenet_train_test.prototxt"</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> test_iter specifies how many forward passes the <span class="hljs-built_in">test</span> should carry out.</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> In the <span class="hljs-keyword">case</span> of MNIST, we have <span class="hljs-built_in">test</span> batch size 100 and 100 <span class="hljs-built_in">test</span> iterations,</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> covering the full 10,000 testing images.</span></span><br><span class="line">test_iter: 100</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> Carry out testing every 500 training iterations.</span></span><br><span class="line">test_interval: 500</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> The base learning rate, momentum and the weight decay of the network.</span></span><br><span class="line">base_lr: 0.01</span><br><span class="line">momentum: 0.9</span><br><span class="line">weight_decay: 0.0005</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> The learning rate policy</span></span><br><span class="line">lr_policy: "inv"</span><br><span class="line">gamma: 0.0001</span><br><span class="line">power: 0.75</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> Display every 100 iterations</span></span><br><span class="line">display: 100</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> The maximum number of iterations</span></span><br><span class="line">max_iter: 10000</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> snapshot intermediate results</span></span><br><span class="line">snapshot: 5000</span><br><span class="line">snapshot_prefix: "examples/mnist/lenet"</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> solver mode: CPU or GPU</span></span><br><span class="line">solver_mode: GPU</span><br></pre></td></tr></table></figure><h1 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h1><p>训练的时候指定 Solver，保存权值文件的路径，日志：<code>./examples/mnist/train_lenet.sh -gpu 1</code></p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">!/usr/bin/env sh</span></span><br><span class="line">set -e</span><br><span class="line">SOLVER=examples/mnist/lenet_solver.prototxt</span><br><span class="line">WEIGHTS=./lenet_iter_10000.caffemodel</span><br><span class="line">./build/tools/caffe train --solver=$&#123;SOLVER&#125; $@ 2&gt;&amp;1 | tee log.txt</span><br></pre></td></tr></table></figure><p>通过解析日志，我们能够可视化模型训练过程中的 accuray 和 loss 的情况。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 解析日志文件,将 acc 和 loss 输出到 .refine 文件</span></span><br><span class="line">grep "Test net output #0: accuracy =" log.txt &gt; trainacc.refine</span><br><span class="line">grep "Test net output #1: loss =" log.txt &gt; trainloss.refine</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 生成如下所示的 .refine 文件</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> trainacc.refine</span></span><br><span class="line">I0615 10:16:15.671094 11161 solver.cpp:414] Test net output #0: accuracy = 0.9903</span><br><span class="line">I0615 10:16:16.061339 11161 solver.cpp:414] Test net output #0: accuracy = 0.9903</span><br><span class="line">I0615 10:16:16.451835 11161 solver.cpp:414] Test net output #0: accuracy = 0.988</span><br><span class="line">I0615 10:16:16.850911 11161 solver.cpp:414] Test net output #0: accuracy = 0.9906</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> trainloss.refine</span></span><br><span class="line">I0615 10:16:15.671116 11161 solver.cpp:414] Test net output #1: loss = 0.0298686 (* 1 = 0.0298686 loss)</span><br><span class="line">I0615 10:16:16.061362 11161 solver.cpp:414] Test net output #1: loss = 0.0285139 (* 1 = 0.0285139 loss)</span><br><span class="line">I0615 10:16:16.451859 11161 solver.cpp:414] Test net output #1: loss = 0.0348767 (* 1 = 0.0348767 loss)</span><br><span class="line">I0615 10:16:16.850932 11161 solver.cpp:414] Test net output #1: loss = 0.0284803 (* 1 = 0.0284803 loss)</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 接着用 python 脚本解析 .refine 绘制 acc 和 loss 曲线</span></span><br><span class="line">python show_acc.py</span><br><span class="line">python show_loss.py</span><br></pre></td></tr></table></figure><p>Python 脚本可以在 <a href="https://gist.github.com/YujieShui/67933c77054410461cb18c031b36057d" target="_blank" rel="noopener">Github Gist</a> 中查看，需要根据之前生成的日志进行小改动。</p><p><img src="https://image.shuiyujie.com/2019-06-17-19-13-31.png" alt="train_loss"></p><p>可以看到迭代 100 次 loss 已经降到很低了,之后略有降低,300次左右基本上就在 0.3, 0.4 左右</p><p><img src="https://image.shuiyujie.com/2019-06-17-19-14-19.png" alt="train_accuracy"></p><p>与之相对的，100 次左右准确率就有 0.96 了,缓慢上升,最后准确率稳定在 0.98 。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>测试的方法和训练的方法基本一致，使用 <code>./examples/mnist/test_lenet.sh -gpu 1</code></p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">!/usr/bin/env sh</span></span><br><span class="line">set -e</span><br><span class="line">MODEL=examples/mnist/lenet_iter_10000.caffemodel</span><br><span class="line">TRAIN_NET=examples/mnist/lenet_train_test.prototxt</span><br><span class="line">./build/tools/caffe test -model $&#123;TRAIN_NET&#125; -weights $&#123;MODEL&#125; $@ 2&gt;&amp;1 | tee test_log.txt</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 结果如下所示</span></span><br><span class="line">...</span><br><span class="line">I0616 15:29:32.107722 13441 caffe.cpp:304] Batch 49, accuracy = 1</span><br><span class="line">I0616 15:29:32.107739 13441 caffe.cpp:304] Batch 49, loss = 0.00704199</span><br><span class="line">I0616 15:29:32.107748 13441 caffe.cpp:309] Loss: 0.0412109</span><br><span class="line">I0616 15:29:32.107769 13441 caffe.cpp:321] accuracy = 0.9862</span><br><span class="line">I0616 15:29:32.107782 13441 caffe.cpp:321] loss = 0.0412109 (* 1 = 0.0412109 loss)</span><br></pre></td></tr></table></figure><p>用上面同样的方法能够可视化测试的 loss 和 accuracy。</p><hr><p>本文介绍了 Caffe 的基本使用流程，这样就可以把一些别人写好的网络用起来了。进一步我们需要了解如何用 Caffe 自定义网络结构，调整网络的参数，完成更加个性化的任务。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://caffe.berkeleyvision.org/gathered/examples/mnist.html" target="_blank" rel="noopener">Training LeNet on MNIST with Caffe</a></p><p><a href="http://shengshuyang.github.io/A-step-by-step-guide-to-Caffe.html" target="_blank" rel="noopener">A step by step guide to Caffe</a></p><p><a href="http://caffe.berkeleyvision.org/" target="_blank" rel="noopener">Caffe</a></p><p><a href="https://github.com/BVLC/caffe/wiki/Model-Zoo#cnn-object-proposal-models-for-salient-object-detection" target="_blank" rel="noopener">Caffe Model zoo</a></p>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deeplearning </tag>
            
            <tag> caffe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Caffe】Caffe代码结构</title>
      <link href="/post/c2c24b74.html"/>
      <url>/post/c2c24b74.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://image.shuiyujie.com/2019-06-17-18-25-09.png" alt="Caffe"></p><blockquote><p>Caffe 安装看 <a href="http://caffe.berkeleyvision.org/installation.html" target="_blank" rel="noopener">Installation</a>, 第一个例子可以看 <a href="http://caffe.berkeleyvision.org/gathered/examples/mnist.html" target="_blank" rel="noopener">Training LeNet on MNIST with caffe</a>  的示例.跟着示例做一遍,精确度能有 98% 左右,做完很有成就感.跑完之后可以跑更多的官方示例,它包括 Notebook Example 和 Command Line Example.</p><p><a href="http://caffe.berkeleyvision.org/tutorial/" target="_blank" rel="noopener">Caffe Tutorial</a>介绍了 Caffe 的基础,其中也包括各种数据结构 <a href="http://caffe.berkeleyvision.org/tutorial/" target="_blank" rel="noopener">http://caffe.berkeleyvision.org/tutorial/</a></p><p><a href="http://caffe.berkeleyvision.org/model_zoo.html" target="_blank" rel="noopener">Model Zoo</a>有很多实现的网络和训练好的模型</p><p>接下来重点看一下 <a href="http://caffe.berkeleyvision.org/tutorial/" target="_blank" rel="noopener">Caffe Tutorial</a> 了解基本数据结构</p></blockquote><a id="more"></a><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p><img src="https://image.shuiyujie.com/2019-09-22-22-22-16.png" alt="目录结构"></p><h1 id="数据结构类"><a href="#数据结构类" class="headerlink" title="数据结构类"></a>数据结构类</h1><p><strong>src/caffe 目录下</strong></p><table><thead><tr><th>blob.hpp / cpp</th><th></th></tr></thead><tbody><tr><td>layer.hpp / cpp</td><td></td></tr><tr><td>net.hpp/cpp</td><td></td></tr><tr><td>solver.hpp/cpp</td><td></td></tr><tr><td>sgd_solvers.hpp/cpp</td><td>blob , layer , net 的定义</td></tr><tr><td></td><td></td></tr><tr><td>solver _factory.hpp/cpp</td><td></td></tr><tr><td>layer_factory.hpp/cpp</td><td>工厂类模板定义和普通 layer 的模板定义</td></tr><tr><td></td><td></td></tr><tr><td>caffe.hpp/cpp</td><td></td></tr><tr><td>common.hpp/cpp</td><td>通用包含文件</td></tr><tr><td></td><td></td></tr><tr><td>internal thread.hpp/cpp</td><td></td></tr><tr><td>parallel.hpp/cpp</td><td></td></tr><tr><td>syncedmem.hpp/cpp</td><td>gpu 编程和内存等较为底层的文件</td></tr></tbody></table><h1 id="IO-类"><a href="#IO-类" class="headerlink" title="IO 类"></a>IO 类</h1><p>不同格式的数据读取层</p><table><thead><tr><th>base_data_layer.hpp/cpp</th><th></th></tr></thead><tbody><tr><td>data_layer.npp/cpp</td><td></td></tr><tr><td>window_data_layer.cpp</td><td></td></tr><tr><td>parameter_layer.cpp</td><td></td></tr><tr><td>memory_data_layer.cpp</td><td></td></tr><tr><td>dummy_data_layer.cpp</td><td></td></tr><tr><td>hdf5_data_layer.cpp</td><td></td></tr><tr><td>hdf5_output_layer.cpp</td><td></td></tr><tr><td>image_data_layer.hpp/cpp</td><td>不同格式的数据读取层</td></tr><tr><td></td><td></td></tr><tr><td>data_transformer.hpp/cpp</td><td>数据的预处理，增强等变换</td></tr></tbody></table><h1 id="基础函数类"><a href="#基础函数类" class="headerlink" title="基础函数类"></a>基础函数类</h1><table><thead><tr><th>math.hpp / cpp</th><th>基本数学操作，加减乘除</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td>absval_layer.hpp / cpp</td><td></td></tr><tr><td>exp_layer.hpp / cpp</td><td></td></tr><tr><td>log_layer.hpp / cpp</td><td>基础数学函数变换</td></tr><tr><td></td><td></td></tr><tr><td>power_layer.hpp /cpp</td><td></td></tr><tr><td>tanh_layer.hpp / cpp</td><td></td></tr><tr><td>sigmoid_layer.hpp / cpp</td><td></td></tr><tr><td>relu_layer.hpp / cpp</td><td>若干激活函数</td></tr></tbody></table><h1 id="形状处理类"><a href="#形状处理类" class="headerlink" title="形状处理类"></a>形状处理类</h1><table><thead><tr><th>flatten_layer.hpp/cpp</th><th></th></tr></thead><tbody><tr><td>slice_layer.hpp / cpp</td><td></td></tr><tr><td>split_layer.hpp / cpp</td><td></td></tr><tr><td>tile_layer.hpp / cpp</td><td></td></tr><tr><td>concat_layer.hpp / cpp</td><td></td></tr><tr><td>reduction_layer.hpp / cpp</td><td></td></tr><tr><td>eltwise_layer.hpp/cpp</td><td></td></tr><tr><td>crop_layer.hpp/cpp</td><td></td></tr><tr><td>pooling_layer.hpp / cpp</td><td></td></tr><tr><td>scale_layer.hpp / cpp</td><td>对 blob 进行各类形状变换</td></tr></tbody></table><h1 id="损失函数类"><a href="#损失函数类" class="headerlink" title="损失函数类"></a>损失函数类</h1><p>用于分类，回归等任务的常见损失函数定义</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">multinomial_logistic_loss_layer.hpp/cpp</span><br><span class="line">softmax_loss_layer.hpp/cpp</span><br><span class="line">euclidean_loss_layer.hpp/cpp</span><br><span class="line">sigmoid_cross_entropy_loss_layer.hpp/cpp</span><br><span class="line">contrastive_loss_layer.hpp/cpp</span><br><span class="line">hinge_loss_layer.hpp/cpp</span><br><span class="line">infogain_loss_layer.hpp/cpp</span><br></pre></td></tr></table></figure><h1 id="卷积类"><a href="#卷积类" class="headerlink" title="卷积类"></a>卷积类</h1><p>卷积与反卷积定义</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">im2col_layer.cpp</span><br><span class="line">base_conv_layer.cpp</span><br><span class="line">conv_layer.cpp</span><br><span class="line">deconv_layer.cpp</span><br><span class="line">inner_product_layer.cpp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deeplearning </tag>
            
            <tag> caffe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Caffe】caffe的数据层次</title>
      <link href="/post/691f534d.html"/>
      <url>/post/691f534d.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://image.shuiyujie.com/2019-06-17-18-25-09.png" alt="Caffe"></p><blockquote><p>Deep networks are compositional models that are naturally represented as a collection of inter-connected layers that work on chunks of data. Caffe defines a net layer-by-layer in its own model schema. The network defines the entire model bottom-to-top from input data to loss. As data and derivatives flow through the network in the <a href="https://caffe.berkeleyvision.org/tutorial/forward_backward.html" target="_blank" rel="noopener">forward and backward passes</a> Caffe stores, communicates, and manipulates the information as <em>blobs</em>: the blob is the standard array and unified memory interface for the framework. The layer comes next as the foundation of both model and computation. The net follows as the collection and connection of layers. The details of blob describe how information is stored and communicated in and across layers and nets.</p><p><a href="https://caffe.berkeleyvision.org/tutorial/solver.html" target="_blank" rel="noopener">Solving</a> is configured separately to decouple modeling and optimization.</p><p>We will go over the details of these components in more detail.</p><p><a href="https://caffe.berkeleyvision.org/tutorial/net_layer_blob.html" target="_blank" rel="noopener">https://caffe.berkeleyvision.org/tutorial/net_layer_blob.html</a></p></blockquote><a id="more"></a><h1 id="blob"><a href="#blob" class="headerlink" title="blob"></a>blob</h1><p><img src="https://image.shuiyujie.com/2019-09-22-22-08-31.png" alt="Caffe的数据层次"></p><p>数据表示为四维张量 (N, C, H, W)</p><ul><li>N 是 batch Size 大小</li><li>C 是 channel</li><li>H, W 为图片宽高</li></ul><p><img src="https://image.shuiyujie.com/2019-09-22-22-09-32.png" alt="blob"></p><ul><li>data 存储数据</li><li>diff 存储梯度</li><li>shape 分别为 blob 的尺度</li><li>count 是所有数据数目,即 N<em>C</em>H*W</li></ul><h1 id="layer"><a href="#layer" class="headerlink" title="layer"></a>layer</h1><p>layer 是基本计算单元,除了输入层没有 bottom,输出层没有 top,每一层都有 bottom 和 top,分别串接前一层和后一层.每一种 layer 都有对应的 layer_param,用于实现该层参数的配置。</p><p><img src="https://image.shuiyujie.com/2019-09-22-22-12-34.png" alt="layer"></p><ul><li>需要实现 setup, forward, backward 登函数</li><li>使用 prototxt 配置</li><li>包含网络层参数,如输入数据层的 data_param</li></ul><h2 id="Caffe-中的序列化"><a href="#Caffe-中的序列化" class="headerlink" title="Caffe 中的序列化"></a>Caffe 中的序列化</h2><p><img src="https://image.shuiyujie.com/2019-09-22-22-14-01.png" alt="序列化"></p><p><code>/caffe/src/caffe/proto/caffe.proto</code>使用 protobuf 协议进行数据序列化和解析,实际使用的时候回编译成与所定义的数据结构对应的代码,从而实现数据的读取,解析和存储</p><p><strong>Caffe 中的 LayerParameter 示例</strong></p><figure class="highlight protobuf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// NOTE</span></span><br><span class="line"><span class="hljs-comment">// Update the next available ID when you add a new LayerParameter field.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// LayerParameter next available layer-specific ID: 149 (last added: clip_param)</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">LayerParameter</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">optional</span> <span class="hljs-built_in">string</span> name = <span class="hljs-number">1</span>; <span class="hljs-comment">// the layer name</span></span><br><span class="line">  <span class="hljs-keyword">optional</span> <span class="hljs-built_in">string</span> type = <span class="hljs-number">2</span>; <span class="hljs-comment">// the layer type</span></span><br><span class="line">  <span class="hljs-keyword">repeated</span> <span class="hljs-built_in">string</span> bottom = <span class="hljs-number">3</span>; <span class="hljs-comment">// the name of each bottom blob</span></span><br><span class="line">  <span class="hljs-keyword">repeated</span> <span class="hljs-built_in">string</span> top = <span class="hljs-number">4</span>; <span class="hljs-comment">// the name of each top blob</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// The train / test phase for computation.</span></span><br><span class="line">  <span class="hljs-keyword">optional</span> Phase phase = <span class="hljs-number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// The amount of weight to assign each top blob in the objective.</span></span><br><span class="line">  <span class="hljs-comment">// Each layer assigns a default value, usually of either 0 or 1,</span></span><br><span class="line">  <span class="hljs-comment">// to each top blob.</span></span><br><span class="line">  <span class="hljs-keyword">repeated</span> <span class="hljs-built_in">float</span> loss_weight = <span class="hljs-number">5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// Specifies training parameters (multipliers on global learning constants,</span></span><br><span class="line">  <span class="hljs-comment">// and the name and other settings used for weight sharing).</span></span><br><span class="line">  <span class="hljs-keyword">repeated</span> ParamSpec param = <span class="hljs-number">6</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// The blobs containing the numeric parameters of the layer.</span></span><br><span class="line">  <span class="hljs-keyword">repeated</span> BlobProto blobs = <span class="hljs-number">7</span>;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/BVLC/caffe/blob/master/src/caffe/proto/caffe.proto" target="_blank" rel="noopener">https://github.com/BVLC/caffe/blob/master/src/caffe/proto/caffe.proto</a></p></blockquote><h1 id="net"><a href="#net" class="headerlink" title="net"></a>net</h1><p>Net 就是一个由 layer 实例组成的完整的 CNN 模型</p><p><img src="https://image.shuiyujie.com/2019-09-22-22-20-25.png" alt="net"></p><p><a href="https://zhuanlan.zhihu.com/p/21878314" target="_blank" rel="noopener">Caffe中的Net类是如何工作的</a></p><h2 id="Caffe-中的训练参数"><a href="#Caffe-中的训练参数" class="headerlink" title="Caffe 中的训练参数"></a>Caffe 中的训练参数</h2><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>net</td><td>网络文件路径</td></tr><tr><td>test_iter</td><td>一次测试的 batch 数目，如果它等于 1，就说明支取一个 batch size 的数据来做测试，如果 batch size 太小，那么对于分类任务来说统计出来的指标也不可信，所以一次测试，用到所有测试数据，因为常令 test_iter *test_batchsize = 测试集合的大小</td></tr><tr><td>test_interval</td><td>测试间隔，即每隔多少次迭代进行一次测试</td></tr><tr><td>base_lr</td><td>学习率</td></tr><tr><td>lr_policy</td><td>学习率策略，base_lr 和 lr_policy 决定了学习率大小如何变化，而不同的学习率变化方法又有不同的参数 学习率的变化方法很多：fixed, step, exp, inv, multistep, poly, sigmoid</td></tr><tr><td>type</td><td>优化方法</td></tr><tr><td>clip_gradients</td><td>固定梯度范围</td></tr><tr><td>momentum</td><td>动量项</td></tr><tr><td>momentum</td><td>优化策略 Adam 用到的参数</td></tr><tr><td>weight_decay</td><td>权重衰减率</td></tr><tr><td>display</td><td>显示间隔 debug_info</td></tr><tr><td>max_iter</td><td>最大迭代次数</td></tr><tr><td>snapshot</td><td>存储模型间隔</td></tr><tr><td>snapshot_prefix</td><td>存储路径与前缀</td></tr><tr><td>solver_mode</td><td>GPU/CPU 开关，可以指定用 GPU 或者 CPU 进行训</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deeplearning </tag>
            
            <tag> caffe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA的使用</title>
      <link href="/post/d3e6b9b.html"/>
      <url>/post/d3e6b9b.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/fly910905/article/details/77868300" target="_blank" rel="noopener">IDEA的基本使用：让你的IDEA有飞一般的感觉</a></p><p><a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="noopener">IntelliJ IDEA 简体中文专题教程</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxNDMwMTMwMw==&amp;mid=2247490198&amp;idx=1&amp;sn=76006754c2d4486d0cd97dc49a323749&amp;chksm=9b943b8eace3b29866be294660ca4aab3a521a8a9079ee67150f95bd85544a2c97f0e577027e&amp;mpshare=1&amp;scene=1&amp;srcid=1218iTWPb2eze6WcuQZCya0H#rd" target="_blank" rel="noopener">IntelliJ IDEA 使用教程(2019图文版) – 从入门到上瘾</a></p><p><a href="http://mp.weixin.qq.com/s?__biz=MzUyOTk5NDQwOA==&amp;mid=2247484755&amp;idx=1&amp;sn=527d3ee9a43b264d77c0bda60f974799&amp;chksm=fa59c294cd2e4b82fd7b1a756b69154c2e9d8cdc5bb9216fa9317809370d6160949f00476ca6&amp;mpshare=1&amp;scene=1&amp;srcid=0118CuimqfKV7CU76VPn6Az0#rd" target="_blank" rel="noopener">IDEA一定要懂的32条快捷键 </a></p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 善用佳软 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 记要</title>
      <link href="/post/c002250d.html"/>
      <url>/post/c002250d.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/2019-06-14-22-01-01.png" alt="Markdown"></p><p><a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Markdown</a> 是一种轻量级的’「标记语言」，支持插入图片、图表、超链接、数学公式，用简单的语法能够形成一篇形式丰富的文章。</p><p>Markdown 编辑器有很多，我使用的是 <a href="https://typora.io/" target="_blank" rel="noopener">typora</a>。</p><a id="more"></a><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">个人不建议使用三级以上的标题</span><br><span class="line"></span><br><span class="line">生成目录：[TOC]</span><br><span class="line"></span><br><span class="line">锚点：(能够链接到某个一级标题)</span><br><span class="line">[想要显示的名称](#锚点的名称)</span><br><span class="line"></span><br><span class="line">**粗体**</span><br><span class="line"></span><br><span class="line">*斜体*</span><br><span class="line"></span><br><span class="line">`行内代码`</span><br><span class="line"></span><br><span class="line">&gt; 在一段话后面加上 ——某名人，这就是一句名言</span><br><span class="line"></span><br><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br><span class="line"></span><br><span class="line">~~删除线~~</span><br><span class="line"></span><br><span class="line">[超链接名称](超链接路径)</span><br><span class="line"></span><br><span class="line">![图片名称](图片链接)</span><br><span class="line"></span><br><span class="line">有序列表</span><br><span class="line">1. 选项一</span><br><span class="line">2. 选项二</span><br><span class="line">3. 选项三</span><br><span class="line"></span><br><span class="line">无序列表</span><br><span class="line">- 列表一</span><br><span class="line">- 列表二</span><br><span class="line">- 列表三</span><br><span class="line"></span><br><span class="line">复选框</span><br><span class="line">* [ ] 第一件事</span><br><span class="line">* [x] 第二件事</span><br><span class="line">* [ ] 第三件事</span><br><span class="line"></span><br><span class="line">表格</span><br><span class="line">name | age</span><br><span class="line">---- | ---</span><br><span class="line">LearnShare | 12</span><br><span class="line">Mike |  32</span><br><span class="line"></span><br><span class="line">邮箱：&lt;123456@qq.com&gt;</span><br><span class="line"></span><br><span class="line">分隔线</span><br><span class="line">***</span><br></pre></td></tr></table></figure><ul><li>微信公众号 makedown 排版工具：<em><a href="http://prod.zkqiang.cn/wxeditor" target="_blank" rel="noopener">http://prod.zkqiang.cn/wxeditor</a></em></li></ul>]]></content>
      
      
      <categories>
          
          <category> 善用佳软 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矢量素材&amp;图片素材</title>
      <link href="/post/4b821db7.html"/>
      <url>/post/4b821db7.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/2019-09-16-19-08-23.png" alt="题图:https://gratisography.com/photo/paint-brushes/"></p><ul><li>免费矢量素材</li><li>高清无版权限制大图特供网站 </li></ul><a id="more"></a><h1 id="免费矢量素材"><a href="#免费矢量素材" class="headerlink" title="免费矢量素材"></a>免费矢量素材</h1><p><a href="http://www.vecteezy.com/" target="_blank" rel="noopener">http://www.vecteezy.com/</a>  </p><p><a href="http://www.vectorportal.com/" target="_blank" rel="noopener">http://www.vectorportal.com/</a>  </p><p><a href="http://vector4free.com/" target="_blank" rel="noopener">http://vector4free.com/</a>   </p><p><a href="http://www.freepik.com/" target="_blank" rel="noopener">http://www.freepik.com/</a>  </p><p><a href="http://vectorart.org/" target="_blank" rel="noopener">http://vectorart.org/</a>  </p><p><a href="http://sxc.hu/" target="_blank" rel="noopener">http://sxc.hu/</a>  </p><p><a href="http://www.stockvault.net/" target="_blank" rel="noopener">http://www.stockvault.net/</a>  </p><p><a href="http://www.squidfingers.com/patterns/" target="_blank" rel="noopener">http://www.squidfingers.com/patterns/</a>  </p><p><a href="http://lostandtaken.com/" target="_blank" rel="noopener">http://lostandtaken.com/</a>  </p><p><a href="http://www.cgtextures.com/" target="_blank" rel="noopener">http://www.cgtextures.com/</a>  </p><p><a href="http://www.textureking.com/" target="_blank" rel="noopener">http://www.textureking.com/</a>   </p><p><a href="http://subtlepatterns.com/" target="_blank" rel="noopener">http://subtlepatterns.com/</a>  </p><h1 id="12个高清无版权限制大图特供网站"><a href="#12个高清无版权限制大图特供网站" class="headerlink" title="12个高清无版权限制大图特供网站"></a>12个高清无版权限制大图特供网站</h1><p><a href="http://pixabay.com/" target="_blank" rel="noopener">http://pixabay.com/</a>  </p><p><a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a></p><p><a href="http://www.gratisography.com/" target="_blank" rel="noopener">http://www.gratisography.com/</a> </p><p><a href="http://picjumbo.com/page/5/" target="_blank" rel="noopener">http://picjumbo.com/page/5/</a>  </p><p><a href="http://www.lifeofpix.com/" target="_blank" rel="noopener">http://www.lifeofpix.com/</a>  </p><p><a href="http://www.imcreator.com/free" target="_blank" rel="noopener">http://www.imcreator.com/free</a>  </p><p><a href="http://www.freeimages.com/home" target="_blank" rel="noopener">http://www.freeimages.com/home</a>  </p><p><a href="http://deathtothestockphoto.com" target="_blank" rel="noopener">http://deathtothestockphoto.com</a>  </p><p><a href="http://publicdomainarchive.com/" target="_blank" rel="noopener">http://publicdomainarchive.com/</a>  </p><p><a href="http://snapographic.com/" target="_blank" rel="noopener">http://snapographic.com/</a>  </p><h1 id="20个下载免费矢量素材的最佳网站"><a href="#20个下载免费矢量素材的最佳网站" class="headerlink" title="20个下载免费矢量素材的最佳网站"></a>20个下载免费矢量素材的最佳网站</h1><p><a href="http://www.vectorportal.com/" target="_blank" rel="noopener">http://www.vectorportal.com/</a>  </p><p><a href="http://www.vectorss.com/" target="_blank" rel="noopener">http://www.vectorss.com/</a>  </p><p><a href="http://www.vectorstock.com/" target="_blank" rel="noopener">http://www.vectorstock.com/</a>  </p><p><a href="http://www.vecteezy.com/" target="_blank" rel="noopener">http://www.vecteezy.com/</a>  </p><p><a href="http://qvectors.net/" target="_blank" rel="noopener">http://qvectors.net/</a>  </p><p><a href="http://www.freevectors.com/" target="_blank" rel="noopener">http://www.freevectors.com/</a>   </p><p><a href="http://www.uberpiglet.com/" target="_blank" rel="noopener">http://www.uberpiglet.com/</a>   </p><p><a href="http://dezignus.com/category/vector/" target="_blank" rel="noopener">http://dezignus.com/category/vector/</a>  </p><p><a href="http://www.123freevectors.com/" target="_blank" rel="noopener">http://www.123freevectors.com/</a>  </p><p><a href="http://coolvectors.com/" target="_blank" rel="noopener">http://coolvectors.com/</a>  </p><p><a href="http://vector.t" target="_blank" rel="noopener">http://vector.t</a></p>]]></content>
      
      
      <categories>
          
          <category> 善用佳软 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 图片素材 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Darknet】改进版Darknet</title>
      <link href="/post/3054b634.html"/>
      <url>/post/3054b634.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://image.shuiyujie.com/2019-06-13-21-01-25.png" alt="darknet"></p><p><a href="AlexeyAB/darknet">AlexeyAB/darknet</a> 在<a href="http://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">原版darknet</a>的基础上做了一些改进，用得最舒服的两个点是：可以实时查看 loss 和 mAP；可以自动计算一些模型评估指标。</p><p>下面是对其 README.md 的翻译。</p><a id="more"></a><ul><li><a href="https://github.com/AlexeyAB/darknet#requirements" target="_blank" rel="noopener">Requirements (and how to install dependecies)</a></li><li><a href="https://github.com/AlexeyAB/darknet#pre-trained-models" target="_blank" rel="noopener">Pre-trained models</a></li><li><a href="https://github.com/AlexeyAB/darknet/issues?q=is%3Aopen+is%3Aissue+label%3AExplanations" target="_blank" rel="noopener">Explanations in issues</a></li><li><a href="https://github.com/AlexeyAB/darknet#yolo-v3-in-other-frameworks" target="_blank" rel="noopener">Yolo v3 in other frameworks (TensorRT, TensorFlow, PyTorch, OpenVINO, OpenCV-dnn,…)</a></li><li><a href="https://github.com/AlexeyAB/darknet#datasets" target="_blank" rel="noopener">Datasets</a></li></ul><ol><li><p><a href="https://github.com/AlexeyAB/darknet#improvements-in-this-repository" target="_blank" rel="noopener">Improvements in this repository</a></p></li><li><p><a href="https://github.com/AlexeyAB/darknet#how-to-use-on-the-command-line" target="_blank" rel="noopener">How to use</a></p></li><li><p><a href="https://github.com/AlexeyAB/darknet#how-to-compile-on-linux" target="_blank" rel="noopener">How to compile on Linux</a></p></li><li><p>How to compile on Windows</p></li><li><ul><li><a href="https://github.com/AlexeyAB/darknet#how-to-compile-on-windows-using-vcpkg" target="_blank" rel="noopener">Using vcpkg</a></li><li><a href="https://github.com/AlexeyAB/darknet#how-to-compile-on-windows-legacy-way" target="_blank" rel="noopener">Legacy way</a></li></ul></li><li><p><a href="https://github.com/AlexeyAB/darknet#how-to-train-pascal-voc-data" target="_blank" rel="noopener">How to train (Pascal VOC Data)</a></p></li><li><p><a href="https://github.com/AlexeyAB/darknet#how-to-train-with-multi-gpu" target="_blank" rel="noopener">How to train with multi-GPU:</a></p></li><li><p><a href="https://github.com/AlexeyAB/darknet#how-to-train-to-detect-your-custom-objects" target="_blank" rel="noopener">How to train (to detect your custom objects)</a></p></li><li><p><a href="https://github.com/AlexeyAB/darknet#how-to-train-tiny-yolo-to-detect-your-custom-objects" target="_blank" rel="noopener">How to train tiny-yolo (to detect your custom objects)</a></p></li><li><p><a href="https://github.com/AlexeyAB/darknet#when-should-i-stop-training" target="_blank" rel="noopener">When should I stop training</a></p></li><li><p><a href="https://github.com/AlexeyAB/darknet#how-to-calculate-map-on-pascalvoc-2007" target="_blank" rel="noopener">How to calculate mAP on PascalVOC 2007</a></p></li><li><p><a href="https://github.com/AlexeyAB/darknet#how-to-improve-object-detection" target="_blank" rel="noopener">How to improve object detection</a></p></li><li><p><a href="https://github.com/AlexeyAB/darknet#how-to-mark-bounded-boxes-of-objects-and-create-annotation-files" target="_blank" rel="noopener">How to mark bounded boxes of objects and create annotation files</a></p></li><li><p><a href="https://github.com/AlexeyAB/darknet#how-to-use-yolo-as-dll-and-so-libraries" target="_blank" rel="noopener">How to use Yolo as DLL and SO libraries</a></p></li></ol><h1 id="如何训练自定义的数据集"><a href="#如何训练自定义的数据集" class="headerlink" title="如何训练自定义的数据集"></a>如何训练自定义的数据集</h1><p>使用 yolo，yolov2 的配置文件 yolov2-voc.cfg, yolov2-tiny-voc.cfg, yolo-voc.cfg, yolo-voc.2.0.cfg 进行训练 <a href="https://github.com/AlexeyAB/darknet/tree/47c7af1cea5bbdedf1184963355e6418cb8b1b4f#how-to-train-pascal-voc-data" target="_blank" rel="noopener">click by the link</a></p><p>##Yolo v3</p><p>Yolo v3 训练步骤：</p><ol><li><p>copy yolov3.cfg to yolo-obj.cfg and:</p></li><li><p>change batch = 64</p></li><li>change subdivision = 8</li><li>change max_batch to (classes*2000), eg 比如 3 类，则 max_batches = 6000</li><li>max_batches 设置为 max_batch 的 80% 和 90%，接上面的则 step = 4800,5400</li><li>修改 [yolo] - layers 的 classes = 3</li><li>修改 [convolutions] 的 filters = (classes + 5)x3</li></ol><ul><li>在 build\darknet\x64\data\ 目录下创建 obj.names,存放检测目标的名称</li><li>在 build\darknet\x64\data\ 目录下创建 obj.data</li></ul><ol><li>classes= 2</li><li>train  = data/train.txt</li><li>valid  = data/test.txt</li><li>names = data/obj.names</li><li>backup = backup/</li></ol><ul><li>build\darknet\x64\data\obj\ 放置图片,并且将 yolo 格式的 txt 文件和图片放在一起</li><li>在 build\darknet\x64\data\ 放置 train.txt, val.txt, test.txt 用来存放训练集, 验证集和测试集的图片列表</li></ul><ol><li>可以用相对路径也可以用绝对路径</li><li>更好的做法是将数据集统一放在一个文件夹下,可以用软连接的形式放到 data 目录下,或者直接用绝对路径</li></ol><ul><li>在 build\darknet\x64 放置供卷积层使用的预训练文件,<a href="https://pjreddie.com/media/files/darknet53.conv.74" target="_blank" rel="noopener">点击下载</a></li><li>使用命令进行训练 ./darknet detector train data/obj.data yolo-obj.cfg darknet53.conv.74</li></ul><ol><li>每迭代 100 次 yolo-obj_last.weights 会被保存到 build\darknet\x64\backup\ (在前面 obj.data 中可以设定)</li><li>每迭代 1000 次 yolo-obj_xxxx.weights 会被保存到 build\darknet\x64\backup\</li><li>darknet.exe detector train data/obj.data yolo-obj.cfg darknet53.conv.74 -dont_show 可以禁止显示 Loss-Window,比如说我在远程主机上训练不想显示 loss 窗口</li><li>不通过 GUI 而是通过浏览器来查看 mAP 和 Loss-chart 可以使用 ./darknet detector train data/obj.data yolo-obj.cfg darknet53.conv.74 -dont_show -mjpeg_port 8090 -map.接着在 <a href="http://ip-address:8090/" target="_blank" rel="noopener">http://ip-address:8090</a>查看</li></ol><ul><li>训练的时候每 4 个 epoch 计算一次 mAP,需要在 obj.data 中设置好 valid=valid.txtor train.txt,然后使用命令 darknet.exe detector train data/obj.data yolo-obj.cfg darknet53.conv.74 <strong>-map</strong></li><li>训练结束之后可以在 build\darknet\x64\backup\ 找到最终的权重文件 yolo-obj_final.weights</li><li>每迭代 100 次都可以停止训练,之后再重新开始训练, 比如说 2000 次迭代之后暂停并重新开始 bdarknet.exe detector train data/obj.data yolo-obj.cfg backup\yolo-obj_2000.weights</li></ul><ol><li>darknet 的<a href="https://github.com/pjreddie/darknet" target="_blank" rel="noopener">原始项目</a>中权重文件每 10 000 次迭代才会保存一次(iteration &gt; 1000)</li><li>当然也会保存所有之前的中间结果</li></ol><p>Note</p><ol><li>如果在训练中看到 avg(loss) 字段出现了 nan 表示训练出现了问题;如果其他字段出现 nan 训练依然正常</li><li>如果在 cfg-file 中修改 width= 或者 height=,它们必须要是 32 的倍数</li><li>测试目标检测效果可以使用 darknet.exe detector test data/obj.data yolo-obj.cfg yolo-obj_8000.weights</li><li>如果出现 Out of memory 的错误,可以修改 cfg-file 增大 subdivisions=16, 32 or 64</li></ol><h2 id="Yolov3-tiny"><a href="#Yolov3-tiny" class="headerlink" title="Yolov3 tiny"></a>Yolov3 tiny</h2><p>训练步骤和 Yolov3 类似，下面几个地方有区别：</p><ul><li>下载 yolov3-tiny 的 weights 文件: <a href="https://pjreddie.com/media/files/yolov3-tiny.weights" target="_blank" rel="noopener">https://pjreddie.com/media/files/yolov3-tiny.weights</a></li><li>获取预训练权值文件 yolov3-tiny.conv.15: <code>darknet.exe partial cfg/yolov3-tiny.cfg yolov3-tiny.weights yolov3-tiny.conv.15 15</code></li></ul><p>更多 yolo 系列的模型可以使用 (<a href="https://github.com/AlexeyAB/darknet/blob/master/build/darknet/x64/densenet201_yolo.cfg" target="_blank" rel="noopener">DenseNet201-Yolo</a>or <a href="https://github.com/AlexeyAB/darknet/blob/master/build/darknet/x64/resnet50_yolo.cfg" target="_blank" rel="noopener">ResNet50-Yolo</a>), 预训练模型可以从这里获取: <a href="https://github.com/AlexeyAB/darknet/blob/master/build/darknet/x64/partial.cmdIf" target="_blank" rel="noopener">https://github.com/AlexeyAB/darknet/blob/master/build/darknet/x64/partial.cmdIf</a> 。</p><h1 id="多-GPU-训练"><a href="#多-GPU-训练" class="headerlink" title="多 GPU 训练"></a>多 GPU 训练</h1><p>多 GPU 训练，在迭代1000以上之后：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">darknet.exe detector train cfg/voc.data cfg/yolov3-voc.cfg /backup/yolov3-voc_1000.weights -gpus 0,1,2,3</span><br></pre></td></tr></table></figure><h1 id="什么时候停止训练"><a href="#什么时候停止训练" class="headerlink" title="什么时候停止训练"></a>什么时候停止训练</h1><p>一般来说每个类迭代 2000 就足够了，但是总的迭代次数不应少于 4000 次。但是如果想要更深入了解什么时候停止训练，请看下面这个手册：</p><ol><li>在训练期间，你会看到很多的错误提示，当看到 0.XXXXXXX avg 不再增长的时候就应该停止训练</li></ol><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Region Avg IOU: 0.798363, Class: 0.893232, Obj: 0.700808, No Obj: 0.004567, Avg Recall: 1.000000, count: 8 Region Avg IOU: 0.800677, Class: 0.892181, Obj: 0.701590, No Obj: 0.004574, Avg Recall: 1.000000, count: 8</span><br></pre></td></tr></table></figure><p>当你看到 average loss 0.xxxxxx 在多个 iterations 中都不再减小时，你就应该停止训练。avgerage loss 最终一般在 0.05(小模型，简单数据集) 到 3.0(大模型，复杂数据集) 之间</p><ol start="2"><li>训练停止之后，你应该从 darknet\build\darknet\x64\backup 中选择出 last .weights 中表现最好的那个</li></ol><p>比如说，你在迭代 9000 次时停止训练，但是最好的训练结果可能是 9000 之前的（7000，8000，9000）某一个 weight 文件。这是由过拟合(overfitting)导致的，过拟合指的是你可以在训练集的数据上表现良好，但是在测试集上表现很糟。所以，你应该使用过拟合之前的 weight 文件，也就是 Early stopping point 之前。</p><p>如何获取在 Early Stopping Point 之前的 weights？</p><ol><li>首先需要在 obj.data 中设置好 valid = valid.txt (验证集图片的路径列表文件，如果没有验证集就使用训练集的文件改名为 vaild.txt)</li><li><p>如果在 9000 次迭代之后停止训练，那么就是使用 9000 次之前的几个 weights 进行验证</p></li><li><p>darknet.exe detector map data/obj.data yolo-obj.cfg backup\yolo-obj_7000.weights</p></li><li>darknet.exe detector map data/obj.data yolo-obj.cfg backup\yolo-obj_8000.weights</li><li>darknet.exe detector map data/obj.data yolo-obj.cfg backup\yolo-obj_9000.weights</li></ol><p><img src="https://image.shuiyujie.com/2019-09-21-00-45-23.png" alt="IOU"></p><ul><li>接着对比每一个 weight(7000,8000,9000)最后一行输出</li></ul><ol><li>选择 mAP (mean average precision) 或者 IoU (intersect over union) 高的</li><li>比如说 yolo-obj_8000.weights 的 mAP 最高，就使用这个 weight 进行检测</li></ol><ul><li>或者使用 -mAP 参数进行训练 darknet.exe detector train data/obj.data yolo-obj.cfg darknet53.conv.74 -map，那么就会在 Loss-chart 中看到 mAP-chart</li></ul><ol><li>mAP 每 4 个 Epochs 会使用 valid=valid.txt 文件（1 Epoch = images_in_train_txt / batchiterations）</li><li>可以用通过修改  <a href="https://github.com/AlexeyAB/darknet/blob/0039fd26786ab5f71d5af725fc18b3f521e7acfd/cfg/yolov3.cfg#L20" target="_blank" rel="noopener">max_batches=</a> 来改变 x 轴坐标的最大值，一般来说 max_batches=2000*classes</li></ol><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 单张图测试</span></span><br><span class="line">./darknet detector test data/obj.data yolo-obj.cfg backup/yolo-obj_8000.weights</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 计算 mAP</span></span><br><span class="line">./darknet detector map data/obj.data yolo-obj.cfg backup/yolo-obj_7000.weights</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deeplearning </tag>
            
            <tag> darknet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Darknet】Darknet实战</title>
      <link href="/post/5ba44047.html"/>
      <url>/post/5ba44047.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://image.shuiyujie.com/2019-06-13-21-01-25.png" alt="darknet"></p><blockquote><p>Darknet is an open source neural network framework written in C and CUDA. It is fast, easy to install, and supports CPU and GPU computation.</p><p>—— <a href="https://pjreddie.com/darknet/" target="_blank" rel="noopener">https://pjreddie.com/darknet/</a></p></blockquote><p>本文是对使用 darknet 进行目标检测的小结，包括：</p><ol><li>数据集准备：如何使用 labelimage 对数据进行标注，注意事项，文件格式转换</li><li>darknet 使用：如何编译和修改配置文件</li><li>模型评估：如何查看 loss、计算 IoU、recall、mAP</li></ol><a id="more"></a><h1 id="数据集准备"><a href="#数据集准备" class="headerlink" title="数据集准备"></a>数据集准备</h1><p><img src="https://image.shuiyujie.com/2019-06-04-22-23-29.png" alt="如图"></p><p>大多数情况下，数据集决定了任务的成败。一开始我认为标注数据是一件非常枯燥和乏味的事情，但是当模型指标一直上不去，检测和识别效果也一直不好时，回过头才会发现是因为数据标注的有问题。</p><p>这只有自己经历过之后才会有体会，得出这样几条经验：</p><ol><li>保持类间差距大，类内差距小</li><li>一开始先标注少量的图片并训练模型查看效果，根据结果进行调整，否则等到标注了大量图片之后再回过头修改，得不偿失。</li></ol><h2 id="labelimage"><a href="#labelimage" class="headerlink" title="labelimage"></a>labelimage</h2><p>图片标注使用的是开源的工具 <a href="https://github.com/tzutalin/labelImg" target="_blank" rel="noopener">LabelImg</a>，可以查看文档自行编译，下载之后的文件结构如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── build-tools</span><br><span class="line">├── CONTRIBUTING.rst</span><br><span class="line">├── data</span><br><span class="line">    |—— predefined_classes.txt</span><br><span class="line">├── labelImg.py</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>在<code>data/predefined_classes.txt</code>文件配置进行图片的类别</li></ul><h2 id="界面展示及注意事项"><a href="#界面展示及注意事项" class="headerlink" title="界面展示及注意事项"></a>界面展示及注意事项</h2><p>启动 labelimg 之后的界面如下图所示</p><p><img src="https://image.shuiyujie.com/labelimg.png" alt="labelimg 界面"></p><p>注意：</p><ol><li>存放图片文件夹和存放标记文件的文件夹需要保持一致</li><li>正确选择标记文件的格式，是需要 yolo 格式还是 xml 格式，默认为 xml 格式</li><li>右侧可以选择默认标签，当密集标注一个类的时候很实用</li><li>打完几张标签之后请确认标签是否正确，再去文件目录下确认以下标记文件是否生成且格式正确</li></ol><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------------+--------------------------------------------+</span><br><span class="line">| Space      | 保存                                        |</span><br><span class="line">+------------+--------------------------------------------+</span><br><span class="line">| w          | 创建矩形框                                   |</span><br><span class="line">+------------+--------------------------------------------+</span><br><span class="line">| d          | 下一张图片                                   |</span><br><span class="line">+------------+--------------------------------------------+</span><br><span class="line">| a          | 上一张图片                                   |</span><br><span class="line">+------------+--------------------------------------------+</span><br></pre></td></tr></table></figure><p>最常用的快捷键是上面这 4 个，用好快捷键可以调高打标效率。此外按住<code>ctrl+鼠标滚轮</code>可以调整图片大小，局部放大图片可以提高打标的精准度。</p><h2 id="yolo格式和-xml-格式转换"><a href="#yolo格式和-xml-格式转换" class="headerlink" title="yolo格式和 xml 格式转换"></a>yolo格式和 xml 格式转换</h2><h3 id="xml2yolo-py"><a href="#xml2yolo-py" class="headerlink" title="xml2yolo.py"></a>xml2yolo.py</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">1. 修改 classes 列表中的元素为当前标签列表</span></span><br><span class="line"><span class="hljs-string">2. 修改 list_xml 指向的 xml 文件保存的位置</span></span><br><span class="line"><span class="hljs-string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#import xml.etree.ElementTree as ET</span></span><br><span class="line"><span class="hljs-keyword">from</span> xml.etree <span class="hljs-keyword">import</span> ElementTree <span class="hljs-keyword">as</span> ET</span><br><span class="line"><span class="hljs-keyword">import</span> pickle</span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> listdir, getcwd</span><br><span class="line"><span class="hljs-keyword">from</span> os.path <span class="hljs-keyword">import</span> join</span><br><span class="line"><span class="hljs-keyword">import</span> glob</span><br><span class="line"></span><br><span class="line">classes = [<span class="hljs-string">'rabbit'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">convert</span><span class="hljs-params">(size, box)</span>:</span></span><br><span class="line">      dw = <span class="hljs-number">1.</span> / (size[<span class="hljs-number">0</span>])</span><br><span class="line">      dh = <span class="hljs-number">1.</span> / (size[<span class="hljs-number">1</span>])</span><br><span class="line">      x = (box[<span class="hljs-number">0</span>] + box[<span class="hljs-number">1</span>]) / <span class="hljs-number">2.0</span> - <span class="hljs-number">1</span></span><br><span class="line">      y = (box[<span class="hljs-number">2</span>] + box[<span class="hljs-number">3</span>]) / <span class="hljs-number">2.0</span> - <span class="hljs-number">1</span></span><br><span class="line">      w = box[<span class="hljs-number">1</span>] - box[<span class="hljs-number">0</span>]</span><br><span class="line">      h = box[<span class="hljs-number">3</span>] - box[<span class="hljs-number">2</span>]</span><br><span class="line">      x = x * dw</span><br><span class="line">      w = w * dw</span><br><span class="line">      y = y * dh</span><br><span class="line">      h = h * dh</span><br><span class="line">      <span class="hljs-keyword">return</span> (x, y, w, h)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">convert_annotation</span><span class="hljs-params">(xml_file, txt_file)</span>:</span></span><br><span class="line">      in_file = open(xml_file)</span><br><span class="line"></span><br><span class="line">      tree = ET.parse(in_file)</span><br><span class="line">      root = tree.getroot()</span><br><span class="line">      size = root.find(<span class="hljs-string">'size'</span>)</span><br><span class="line">      w = int(size.find(<span class="hljs-string">'width'</span>).text)</span><br><span class="line">      h = int(size.find(<span class="hljs-string">'height'</span>).text)</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> root.iter(<span class="hljs-string">'object'</span>):</span><br><span class="line"></span><br><span class="line">            cls = obj.find(<span class="hljs-string">'name'</span>).text</span><br><span class="line">            <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> classes:</span><br><span class="line">                  <span class="hljs-keyword">continue</span></span><br><span class="line">            cls_id = classes.index(cls)</span><br><span class="line">            xmlbox = obj.find(<span class="hljs-string">'bndbox'</span>)</span><br><span class="line">            b = (float(xmlbox.find(<span class="hljs-string">'xmin'</span>).text), float(xmlbox.find(<span class="hljs-string">'xmax'</span>).text), float(xmlbox.find(<span class="hljs-string">'ymin'</span>).text),</span><br><span class="line">                 float(xmlbox.find(<span class="hljs-string">'ymax'</span>).text))</span><br><span class="line">            bb = convert((w, h), b)</span><br><span class="line">            txt_file.write(str(cls_id) + <span class="hljs-string">" "</span> + <span class="hljs-string">" "</span>.join([str(a) <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> bb]) + <span class="hljs-string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">list_xml = []</span><br><span class="line">list_xml = glob.glob(<span class="hljs-string">r"/file_path/*.xml"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> xml_file <span class="hljs-keyword">in</span> list_xml:</span><br><span class="line">      xml_name = xml_file.split(<span class="hljs-string">'.'</span>)[<span class="hljs-number">0</span>]</span><br><span class="line">      txt_file = open(<span class="hljs-string">'%s.txt'</span> % (xml_name), <span class="hljs-string">'w'</span>)</span><br><span class="line">      convert_annotation(xml_file, txt_file)</span><br><span class="line">      txt_file.close()</span><br></pre></td></tr></table></figure><h3 id="yolo2xml-py"><a href="#yolo2xml-py" class="headerlink" title="yolo2xml.py"></a>yolo2xml.py</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">1. 修改 class_name</span></span><br><span class="line"><span class="hljs-string">2. 修改 src_img_dir/src_txt_dir/src_xml_dir 路径</span></span><br><span class="line"><span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-keyword">import</span> os, sys</span><br><span class="line"><span class="hljs-keyword">import</span> glob</span><br><span class="line"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">class_name = [<span class="hljs-string">'switch_closed'</span>,<span class="hljs-string">'switch_open'</span>,<span class="hljs-string">'whirled_switch_closed'</span>,<span class="hljs-string">'whirled_switch_open'</span>,</span><br><span class="line">        <span class="hljs-string">'lifting_switch_closed'</span>,<span class="hljs-string">'lifting_switch_open'</span>,<span class="hljs-string">'closure_switch_closed'</span>,<span class="hljs-string">'closure_switch_open'</span>,</span><br><span class="line">        <span class="hljs-string">'color_switch01_red'</span>,<span class="hljs-string">'color_switch01_green'</span>,<span class="hljs-string">'color_switch02_red'</span>,<span class="hljs-string">'color_switch02_green'</span>,</span><br><span class="line">        <span class="hljs-string">'isolation_switch_closed'</span>,<span class="hljs-string">'isolation_switch_open'</span>,<span class="hljs-string">'grounding_knife_switch01_closed'</span>,<span class="hljs-string">'grounding_knife_switch01_open'</span>,</span><br><span class="line">        <span class="hljs-string">'grounding_knife_switch02_closed'</span>,<span class="hljs-string">'grounding_knife_switch02_open'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">convert_yolo_coordinates_to_voc</span><span class="hljs-params">(x_c_n, y_c_n, width_n, height_n, img_width, img_height)</span>:</span></span><br><span class="line">  <span class="hljs-comment">## remove normalization given the size of the image</span></span><br><span class="line">  x_c = float(x_c_n) * img_width</span><br><span class="line">  y_c = float(y_c_n) * img_height</span><br><span class="line">  width = float(width_n) * img_width</span><br><span class="line">  height = float(height_n) * img_height</span><br><span class="line">  <span class="hljs-comment">## compute half width and half height</span></span><br><span class="line">  half_width = width / <span class="hljs-number">2</span></span><br><span class="line">  half_height = height / <span class="hljs-number">2</span></span><br><span class="line">  <span class="hljs-comment">## compute left, top, right, bottom</span></span><br><span class="line">  <span class="hljs-comment">## in the official VOC challenge the top-left pixel in the image has coordinates (1;1)</span></span><br><span class="line">  left = int(x_c - half_width) + <span class="hljs-number">1</span></span><br><span class="line">  top = int(y_c - half_height) + <span class="hljs-number">1</span></span><br><span class="line">  right = int(x_c + half_width) + <span class="hljs-number">1</span></span><br><span class="line">  bottom = int(y_c + half_height) + <span class="hljs-number">1</span></span><br><span class="line">  <span class="hljs-keyword">return</span> left, top, right, bottom</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#  将标注的txt转换为 voc xml</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># VEDAI 图像存储位置</span></span><br><span class="line">src_img_dir = <span class="hljs-string">"./switch_mAP"</span></span><br><span class="line"><span class="hljs-comment"># VEDAI 图像的 ground truth 的 txt 文件存放位置</span></span><br><span class="line">src_txt_dir = <span class="hljs-string">"./switch_mAP"</span></span><br><span class="line">src_xml_dir = <span class="hljs-string">"./switch_mAP"</span></span><br><span class="line"></span><br><span class="line">img_Lists = glob.glob(src_img_dir + <span class="hljs-string">'/*.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 文件名(含扩展名)</span></span><br><span class="line">img_basenames = []  <span class="hljs-comment"># e.g. 100</span></span><br><span class="line"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> img_Lists:</span><br><span class="line">      img_basenames.append(os.path.basename(item))</span><br><span class="line"></span><br><span class="line">img_names = []  <span class="hljs-comment"># e.g. 100</span></span><br><span class="line"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> img_basenames:</span><br><span class="line">      <span class="hljs-comment"># 文件名与扩展名</span></span><br><span class="line">      temp1, temp2 = os.path.splitext(item)</span><br><span class="line">      img_names.append(temp1)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> img_names:</span><br><span class="line">      </span><br><span class="line">      im = <span class="hljs-string">""</span></span><br><span class="line">      suffix = <span class="hljs-string">""</span></span><br><span class="line">      <span class="hljs-comment"># 同一个文件夹下存在多种图片格式，在这里加上格式判断</span></span><br><span class="line">      <span class="hljs-keyword">if</span> os.path.exists(src_img_dir + <span class="hljs-string">'/'</span> + img + <span class="hljs-string">'.jpg'</span>):</span><br><span class="line">            im = Image.open((src_img_dir + <span class="hljs-string">'/'</span> + img + <span class="hljs-string">'.jpg'</span>))</span><br><span class="line">            suffix = <span class="hljs-string">'.jpg'</span></span><br><span class="line">      <span class="hljs-keyword">elif</span> os.path.exists(src_img_dir + <span class="hljs-string">'/'</span> + img + <span class="hljs-string">'.JPG'</span>):</span><br><span class="line">            im = Image.open((src_img_dir + <span class="hljs-string">'/'</span> + img + <span class="hljs-string">'.JPG'</span>))</span><br><span class="line">            suffix = <span class="hljs-string">'.JPG'</span></span><br><span class="line">      <span class="hljs-keyword">elif</span> os.path.exists(src_img_dir + <span class="hljs-string">'/'</span> + img + <span class="hljs-string">'.png'</span>):</span><br><span class="line">            im = Image.open((src_img_dir + <span class="hljs-string">'/'</span> + img + <span class="hljs-string">'.png'</span>))</span><br><span class="line">            suffix = <span class="hljs-string">'.png'</span></span><br><span class="line">      <span class="hljs-keyword">elif</span> os.path.exists(src_img_dir + <span class="hljs-string">'/'</span> + img + <span class="hljs-string">'.PNG'</span>):</span><br><span class="line">            im = Image.open((src_img_dir + <span class="hljs-string">'/'</span> + img + <span class="hljs-string">'.PNG'</span>))</span><br><span class="line">            suffix = <span class="hljs-string">'.PNG'</span></span><br><span class="line">      <span class="hljs-keyword">elif</span> os.path.exists(src_img_dir + <span class="hljs-string">'/'</span> + img + <span class="hljs-string">'.JPEG'</span>):</span><br><span class="line">            im = Image.open((src_img_dir + <span class="hljs-string">'/'</span> + img + <span class="hljs-string">'.JPEG'</span>))</span><br><span class="line">            suffix = <span class="hljs-string">'.JPEG'</span></span><br><span class="line">      <span class="hljs-keyword">elif</span> os.path.exists(src_img_dir + <span class="hljs-string">'/'</span> + img + <span class="hljs-string">'.jpeg'</span>):</span><br><span class="line">            im = Image.open((src_img_dir + <span class="hljs-string">'/'</span> + img + <span class="hljs-string">'.jpeg'</span>))</span><br><span class="line">            suffix = <span class="hljs-string">'.jpeg'</span></span><br><span class="line">                  </span><br><span class="line">      width, height = im.size</span><br><span class="line"></span><br><span class="line">      <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">      以下部分为 xml 解析</span></span><br><span class="line"><span class="hljs-string">      """</span></span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment"># open the crospronding txt file</span></span><br><span class="line">      <span class="hljs-comment">#  提取每一行并分割</span></span><br><span class="line">      gt = open(src_txt_dir + <span class="hljs-string">'/'</span> + img + <span class="hljs-string">'.txt'</span>).read().splitlines()</span><br><span class="line"></span><br><span class="line">      print(img + <span class="hljs-string">'\n'</span>)</span><br><span class="line">      <span class="hljs-comment"># write in xml file</span></span><br><span class="line">      <span class="hljs-comment"># os.mknod(src_xml_dir + '/' + img + '.xml')</span></span><br><span class="line">      xml_file = open((src_xml_dir + <span class="hljs-string">'/'</span> + img + <span class="hljs-string">'.xml'</span>), <span class="hljs-string">'a'</span>)</span><br><span class="line">      xml_file.write(<span class="hljs-string">'&lt;annotation&gt;\n'</span>)</span><br><span class="line">      xml_file.write(<span class="hljs-string">'    &lt;folder&gt;VOC2007&lt;/folder&gt;\n'</span>)</span><br><span class="line">      xml_file.write(<span class="hljs-string">'    &lt;filename&gt;'</span> + str(img) + suffix + <span class="hljs-string">'&lt;/filename&gt;\n'</span>)</span><br><span class="line">      xml_file.write(<span class="hljs-string">'    &lt;size&gt;\n'</span>)</span><br><span class="line">      xml_file.write(<span class="hljs-string">'        &lt;width&gt;'</span> + str(width) + <span class="hljs-string">'&lt;/width&gt;\n'</span>)</span><br><span class="line">      xml_file.write(<span class="hljs-string">'        &lt;height&gt;'</span> + str(height) + <span class="hljs-string">'&lt;/height&gt;\n'</span>)</span><br><span class="line">      xml_file.write(<span class="hljs-string">'        &lt;depth&gt;3&lt;/depth&gt;\n'</span>)</span><br><span class="line">      xml_file.write(<span class="hljs-string">'    &lt;/size&gt;\n'</span>)</span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment"># write the region of image on xml file</span></span><br><span class="line">      <span class="hljs-keyword">for</span> img_each_label <span class="hljs-keyword">in</span> gt:</span><br><span class="line">            spt = img_each_label.split(<span class="hljs-string">' '</span>)  <span class="hljs-comment"># 这里如果txt里面是以逗号‘，’隔开的，那么就改为spt = img_each_label.split(',')。</span></span><br><span class="line"></span><br><span class="line">            name = class_name[int(spt[<span class="hljs-number">0</span>])]</span><br><span class="line">            x_c,y_c,width_n,height_n = spt[<span class="hljs-number">1</span>:]</span><br><span class="line">            xmin,ymin,xmax,ymax = convert_yolo_coordinates_to_voc(x_c,y_c,width_n,height_n,width,height)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            xml_file.write(<span class="hljs-string">'    &lt;object&gt;\n'</span>)</span><br><span class="line">            xml_file.write(<span class="hljs-string">'        &lt;name&gt;'</span> + name + <span class="hljs-string">'&lt;/name&gt;\n'</span>)</span><br><span class="line">            xml_file.write(<span class="hljs-string">'        &lt;pose&gt;Unspecified&lt;/pose&gt;\n'</span>)</span><br><span class="line">            xml_file.write(<span class="hljs-string">'        &lt;truncated&gt;0&lt;/truncated&gt;\n'</span>)</span><br><span class="line">            xml_file.write(<span class="hljs-string">'        &lt;difficult&gt;0&lt;/difficult&gt;\n'</span>)</span><br><span class="line">            xml_file.write(<span class="hljs-string">'        &lt;bndbox&gt;\n'</span>)</span><br><span class="line">            xml_file.write(<span class="hljs-string">'            &lt;xmin&gt;'</span> + str(xmin) + <span class="hljs-string">'&lt;/xmin&gt;\n'</span>)</span><br><span class="line">            xml_file.write(<span class="hljs-string">'            &lt;ymin&gt;'</span> + str(ymin) + <span class="hljs-string">'&lt;/ymin&gt;\n'</span>)</span><br><span class="line">            xml_file.write(<span class="hljs-string">'            &lt;xmax&gt;'</span> + str(xmax) + <span class="hljs-string">'&lt;/xmax&gt;\n'</span>)</span><br><span class="line">            xml_file.write(<span class="hljs-string">'            &lt;ymax&gt;'</span> + str(ymax) + <span class="hljs-string">'&lt;/ymax&gt;\n'</span>)</span><br><span class="line">            xml_file.write(<span class="hljs-string">'        &lt;/bndbox&gt;\n'</span>)</span><br><span class="line">            xml_file.write(<span class="hljs-string">'    &lt;/object&gt;\n'</span>)</span><br><span class="line"></span><br><span class="line">      xml_file.write(<span class="hljs-string">'&lt;/annotation&gt;'</span>)</span><br></pre></td></tr></table></figure><h1 id="使用-darknet-训练模型"><a href="#使用-darknet-训练模型" class="headerlink" title="使用 darknet 训练模型"></a>使用 darknet 训练模型</h1><h2 id="安装和编译"><a href="#安装和编译" class="headerlink" title="安装和编译"></a>安装和编译</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 从 Github 下载</span><br><span class="line">git clone https://github.com/pjreddie/darknet</span><br></pre></td></tr></table></figure><p>进入<code>darknet</code>目录中，对编译文件<code>Makefile</code>进行如下修改</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GPU=1</span><br><span class="line">CUDNN=1</span><br><span class="line">OPENCV=0</span><br><span class="line">OPENMP=0</span><br><span class="line">DEBUG=0</span><br></pre></td></tr></table></figure><p>注:</p><ol><li>画图或显示图片等操作需要配置OPENCV并设置为1</li><li>需要多线程相关操作需要将OPENMP设置为1</li></ol><p>修改完成保存并执行<code>make</code>命令。</p><h2 id="目录结构介绍"><a href="#目录结构介绍" class="headerlink" title="目录结构介绍"></a>目录结构介绍</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── backup</span><br><span class="line">├── cfg</span><br><span class="line">    |—— voc.data</span><br><span class="line">    |—— yolov3-voc.cfg</span><br><span class="line">├── darknet</span><br><span class="line">├── data</span><br><span class="line">    |—— voc.names</span><br><span class="line">|—— train.txt</span><br><span class="line">    |—— val.txt</span><br><span class="line">    |—— test.txt</span><br><span class="line">├── scripts</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>编译完成之后，我们关注目录中的这几个文件和文件夹。</p><ol><li>backup 存放训练出来的权值文件</li><li>cfg 保存配置文件，其中两个文件，在后面介绍</li><li>darknet 是可执行文件</li><li>scripts 下是一些脚本</li><li>data/voc.names 存放类别标签 </li><li>train.txt 保存用于训练的图片全路径(自建，位置无特殊要求)</li><li>val.txt 保存用于校正的图片全路径(自建，位置无特殊要求)</li><li>test.txt 保存用于校正的图片全路径(自建，位置无特殊要求)</li></ol><p><em>注: train.txt, val.txt, test.txt 中图片数量比例建议为 8:1:1</em></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><h3 id="类别文件-voc-names"><a href="#类别文件-voc-names" class="headerlink" title="类别文件 voc.names"></a>类别文件 voc.names</h3><p>修改<code>data/voc.names</code>，将我们的类别标签写这个文件，比如说有以下 5 类</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dog</span><br><span class="line">cat</span><br><span class="line">magpie</span><br><span class="line">pigeon</span><br><span class="line">nest</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>类别标签要与训练集包含的图片类别一一对应，训练集中有以上 5 类则<code>voc.names</code>包含以上 5 类</li><li>类别标签需要连续，如果不连续就必须要修改类别标签改成连续的</li></ol><h3 id="配置-voc-data"><a href="#配置-voc-data" class="headerlink" title="配置 voc.data"></a>配置 voc.data</h3><p>修改<code>cfg/voc.data</code>文件</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">classes= class_number</span><br><span class="line">train  = /path/train.txt</span><br><span class="line">valid  = /path/val.txt</span><br><span class="line">names = data/voc.names</span><br><span class="line">backup = backup</span><br></pre></td></tr></table></figure><ol><li>classes 配置类别数量，与上一步<code>voc.names</code>中类别数量一致</li><li>train 配置为目录结构一章介绍的<code>train.txt</code>文件的位置</li><li>vaild 配置为目录结构一章介绍的<code>val.txt</code>文件的位置</li><li>names 配置为<code>voc.names</code>位置(默认不变即可)</li><li>backup 配置为权值文件的位置(默认不变即可)</li></ol><h3 id="配置-yolov3-voc-cfg"><a href="#配置-yolov3-voc-cfg" class="headerlink" title="配置 yolov3-voc.cfg"></a>配置 yolov3-voc.cfg</h3><p>在文件开头位置</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[net]</span><br><span class="line"># Testing</span><br><span class="line"># batch=1 # 测试时开启，训练时关闭</span><br><span class="line"># subdivisions=1 # 测试时开启，训练时关闭</span><br><span class="line"># Training</span><br><span class="line">batch=6 # 训练时开启，测试时关闭</span><br><span class="line">subdivisions=2 # 训练时开启，测试时关闭 </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">learning_rate=0.0001 # 学习率，可以调整得小一点</span><br><span class="line">burn_in=1000</span><br><span class="line">max_batches = 50200</span><br><span class="line">policy=steps</span><br><span class="line">steps=40000,45000</span><br><span class="line">scales=.1,.1</span><br></pre></td></tr></table></figure><ol><li>batch 和 subdivisions 在测试和训练的时候请按照上面注释开启或者关闭</li><li>batch 一批处理几张图片，没有超过显存的情况下越大越好</li><li>subdivisions 表示在 batch 中再划分的数量</li></ol><p>当前配置的意思是每轮迭代从所有训练集中抽取 6 张图片，这 6 张样本图片又被分成 2 次，每次 3 张送入到网络参与训练。</p><p>接着在文件中搜索<code>yolo</code>，会有三条结果。每个<code>yolo</code>上下都要修改<code>filters</code>和<code>classes</code>，总共需要修改<strong>3 组共 6 个字段</strong>。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[convolutional]</span><br><span class="line">size=1</span><br><span class="line">stride=1</span><br><span class="line">pad=1</span><br><span class="line">filters=30 # 3*(classes+5)</span><br><span class="line">activation=linear</span><br><span class="line"></span><br><span class="line">[yolo]</span><br><span class="line">mask = 6,7,8</span><br><span class="line">anchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326</span><br><span class="line">classes=5 # 类别(classes)数量</span><br><span class="line">num=9</span><br><span class="line">jitter=.3</span><br><span class="line">ignore_thresh = .5</span><br><span class="line">truth_thresh = 1</span><br><span class="line">random=1</span><br></pre></td></tr></table></figure><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./darknet detector train cfg/voc.data cfg/yolov3-voc.cfg scripts/darknet53.conv.74 -gpus 0</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./darknet detector train cfg/voc.data cfg/yolov3-voc.cfg scripts/darknet53.conv.74 -gpus 0 &gt;train.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>我们需要保留训练的日志，所以用方法二更好。</p><h2 id="查看-GPU-使用情况"><a href="#查看-GPU-使用情况" class="headerlink" title="查看 GPU 使用情况"></a>查看 GPU 使用情况</h2><p>我们可以使用<code>nvidia-smi</code>来查看 gpu 的使用情况，注意先查看 gpu 的使用情况。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Fri Mar 29 16:33:31 2019       </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 410.78       Driver Version: 410.78       CUDA Version: 10.0     |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  GeForce GTX 108...  Off  | 00000000:01:00.0  On |                  N/A |</span><br><span class="line">| 59%   87C    P2   221W / 250W |   4874MiB / 11175MiB |     98%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">|   1  GeForce GTX 108...  Off  | 00000000:02:00.0 Off |                  N/A |</span><br><span class="line">| 24%   42C    P8    16W / 250W |   5107MiB / 11178MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">                                                                               </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                       GPU Memory |</span><br><span class="line">|  GPU       PID   Type   Process name                             Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">|    0      1218      G   /usr/lib/xorg/Xorg                            69MiB |</span><br><span class="line">|    0     24338      C   ./darknet                                   4793MiB |</span><br><span class="line">|    1     12712      C   ./bin/psd_be                                5095MiB |</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>用<code>nvidia-smi</code>输出的是静态的信息，如果想要动态查看 gpu 的使用情况可以使用<code>watch -n 1 nvidia-smi</code>表示每一秒刷新一个 gpu 的使用情况。</p><h2 id="查看日志输出信息"><a href="#查看日志输出信息" class="headerlink" title="查看日志输出信息"></a>查看日志输出信息</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">50181: 0.084739, 0.367084 avg, 0.000001 rate, 0.244283 seconds, 301086 images</span><br><span class="line">Loaded: 0.000030 seconds</span><br><span class="line">Region 82 Avg IOU: 0.775331, Class: 0.611054, Obj: 0.963920, No Obj: 0.005009, .5R: 1.000000, .75R: 0.833333,  count: 6</span><br><span class="line">Region 94 Avg IOU: 0.753700, Class: 0.962260, Obj: 0.777823, No Obj: 0.000218, .5R: 1.000000, .75R: 0.500000,  count: 2</span><br></pre></td></tr></table></figure><ol><li>50181 表示迭代次数</li><li>0.084739 表示整体 Loss</li><li>0.367084 avg 表示平均 Loss</li><li>0.000001 rate 表示学习率，对应<code>.cfg</code>文件中的<code>learning_rate</code></li><li>0.244283 seconds 表示当前批次训练花费了多少时间</li><li>301086 images 表示目前已经训练了多少照片</li></ol><p>判断训练没有异常的标准</p><ol><li>IOU 表示预测目标与真实目标的交集与并集之比，越接近于 1 越好，出现大量 -nan 表示训练异常</li><li>Class: 0.611054 表示标记物体的正确率，越接近于 1 越好</li><li>Obj: 0.963920 越接近 1 越好</li><li>No Obj 0.005009 越接近 0 越好</li></ol><p>当训练整体趋势按照上面描述的一样向好的方向发展就表示训练正常，反之表示训练异常。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./darknet detector test cfg/voc.data cfg/yolov3-voc.cfg backup/yolov3-voc_50000.weights 1</span><br></pre></td></tr></table></figure><p>注意：测试时，修改<code>cfg/yolov3-voc.cfg</code>配置文件，请参照之前<code>配置 yolov3-voc.cfg</code>这一节。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>训练集中各个类别的数量要尽可能<strong>保持均衡</strong>，不要有的类特别多或者有的特别少</li><li><code>train.txt</code> 文件中配置了训练用的图片，这些图片必须要有对应的<code>txt</code>文件，且<code>txt</code>文件不可以为空</li><li><code>train.txt</code> 文件不可以有空行，存在空行会导致训练失败</li><li>开始新的训练注意删除<code>backup</code>中原先的<code>.weight</code>文件</li></ol><h1 id="如何评估模型的效果"><a href="#如何评估模型的效果" class="headerlink" title="如何评估模型的效果"></a>如何评估模型的效果</h1><h2 id="darknet-编译格式"><a href="#darknet-编译格式" class="headerlink" title="darknet 编译格式"></a>darknet 编译格式</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./darknet detector test &lt;data_cfg&gt; &lt;models_cfg&gt; &lt;weights&gt; &lt;test_file&gt; [-thresh] [-out]</span><br><span class="line">./darknet detector train &lt;data_cfg&gt; &lt;models_cfg&gt; &lt;weights&gt; [-thresh] [-gpu] [-gpus] [-clear]</span><br><span class="line">./darknet detector valid &lt;data_cfg&gt; &lt;models_cfg&gt; &lt;weights&gt; [-out] [-thresh]</span><br><span class="line">./darknet detector recall &lt;data_cfg&gt; &lt;models_cfg&gt; &lt;weights&gt; [-thresh]</span><br><span class="line"></span><br><span class="line">'&lt;&gt;'必选项，’[ ]‘可选项</span><br></pre></td></tr></table></figure><ul><li>data_cfg：数据配置文件，eg：cfg/voc.data</li><li>models_cfg：模型配置文件，eg：cfg/yolov3-voc.cfg</li><li>weights：权重配置文件，eg：weights/yolov3.weights</li><li>test_file：测试文件，eg：<em>/</em>/*/test.txt</li><li>-thresh：显示被检测物体中confidence大于等于 [-thresh] 的bounding-box，默认0.005</li><li>-out：输出文件名称，默认路径为results文件夹下，eg：-out “” //输出class_num个文件，文件名为class_name.txt；若不选择此选项，则默认输出文件名为comp4_det_test_”class_name”.txt</li><li>-i/-gpu：指定单个gpu，默认为0，eg：-gpu 2</li><li>-gpus：指定多个gpu，默认为0，eg：-gpus 0,1,2</li></ul><h2 id="根据训练日志生成-loss-iter-曲线"><a href="#根据训练日志生成-loss-iter-曲线" class="headerlink" title="根据训练日志生成 loss-iter 曲线"></a>根据训练日志生成 loss-iter 曲线</h2><p>使用 drawcurve.py 解析训练日志，据此生成 loss-iter 曲线。该脚本通过训练日志计算 loss,不过训练日志格式可能会有区别,可能需要自己修改脚本来适应.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> argparse</span><br><span class="line"><span class="hljs-keyword">import</span> sys</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">(argv)</span>:</span></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="hljs-string">"log_file"</span>,  help = <span class="hljs-string">"path to log file"</span>  )</span><br><span class="line">    parser.add_argument( <span class="hljs-string">"option"</span>, help = <span class="hljs-string">"0 -&gt; loss vs iter"</span>  )</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    f = open(args.log_file)</span><br><span class="line">    lines  = [line.rstrip(<span class="hljs-string">"\n"</span>) <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f.readlines()]</span><br><span class="line">    <span class="hljs-comment"># skip the first 3 lines</span></span><br><span class="line">    lines = lines[<span class="hljs-number">3</span>:]</span><br><span class="line">    numbers = &#123;<span class="hljs-string">'1'</span>,<span class="hljs-string">'2'</span>,<span class="hljs-string">'3'</span>,<span class="hljs-string">'4'</span>,<span class="hljs-string">'5'</span>,<span class="hljs-string">'6'</span>,<span class="hljs-string">'7'</span>,<span class="hljs-string">'8'</span>,<span class="hljs-string">'9'</span>, <span class="hljs-string">'0'</span>&#125;</span><br><span class="line">    iters = []</span><br><span class="line">    loss = []</span><br><span class="line">    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:</span><br><span class="line">        print(line)</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-comment">#跳过空行</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> len(line):</span><br><span class="line">            <span class="hljs-keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> line[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> numbers:</span><br><span class="line">            args = line.split(<span class="hljs-string">" "</span>)</span><br><span class="line">            <span class="hljs-comment"># print(args)</span></span><br><span class="line">            <span class="hljs-keyword">if</span> len(args) &gt; <span class="hljs-number">4</span> <span class="hljs-keyword">and</span> is_number(args[<span class="hljs-number">2</span>]):</span><br><span class="line">                iters.append(int(args[<span class="hljs-number">0</span>][:<span class="hljs-number">-1</span>]))</span><br><span class="line">                loss.append(float(args[<span class="hljs-number">2</span>]))</span><br><span class="line">    plt.plot(iters,loss)</span><br><span class="line">    plt.xlabel(<span class="hljs-string">'iters'</span>)</span><br><span class="line">    plt.ylabel(<span class="hljs-string">'loss'</span>)</span><br><span class="line">    plt.grid()</span><br><span class="line">    plt.show()</span><br><span class="line"><span class="hljs-comment"># 0.692735 seconds, 595200 images</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_number</span><span class="hljs-params">(s)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">try</span>:</span><br><span class="line">        float(s)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span></span><br><span class="line">    <span class="hljs-keyword">except</span> ValueError:</span><br><span class="line">        <span class="hljs-keyword">pass</span></span><br><span class="line"> </span><br><span class="line">    <span class="hljs-keyword">try</span>:</span><br><span class="line">        <span class="hljs-keyword">import</span> unicodedata</span><br><span class="line">        unicodedata.numeric(s)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span></span><br><span class="line">    <span class="hljs-keyword">except</span> (TypeError, ValueError):</span><br><span class="line">        <span class="hljs-keyword">pass</span></span><br><span class="line"> </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><p><img src="/Users/shui/Desktop/yolov3_darknet/images/loss.png" alt="loss 曲线"></p><h2 id="生成预测结果"><a href="#生成预测结果" class="headerlink" title="生成预测结果"></a>生成预测结果</h2><p>通过<code>./darknet detector valid &lt;data_cfg&gt; &lt;models_cfg&gt; &lt;weights&gt;</code> 可以批量生成模型的测试结果,测试结果保存在<code>results</code>目录下面,按照类别分成一个个文件.</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">!/bin/bash</span></span><br><span class="line">./darknet detector valid switch_18/switch.data switch_18/switch.cfg switch_18/switch.weights -i 1 -out ""</span><br></pre></td></tr></table></figure><ul><li>结果生成在 &lt;data_cfg&gt; 的指定的目录下以 &lt;out_file&gt; 开头的若干文件中，若&lt;data_cfg&gt;没有指定results，那么默认为&lt;darknet_root&gt;/results；</li><li>&lt;models_cfg&gt; 文件中 batch 和 subdivisions 两项必须为1；</li><li>若 -out 未指定字符串，则在 results 文件夹下生成 comp4_det_test_[类名].txt 文件并保存测试结果；</li><li>本次实验在 results 文件夹下生成  [类名].txt 文件；</li></ul><h2 id="统计召回率-recall"><a href="#统计召回率-recall" class="headerlink" title="统计召回率 recall"></a>统计召回率 recall</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">!/bin/bash</span></span><br><span class="line">./darknet detector recall switch_18/switch.data switch_18/switch.cfg switch_18/switch.weights</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">835    35    45RPs/Img: 1.81IOU: 57.69%Recall:77.78%</span><br><span class="line">836    35    45RPs/Img: 1.81IOU: 57.69%Recall:77.78%</span><br><span class="line">837    35    45RPs/Img: 1.81IOU: 57.69%Recall:77.78%</span><br><span class="line">838    35    45RPs/Img: 1.81IOU: 57.69%Recall:77.78%</span><br><span class="line">839    35    45RPs/Img: 1.82IOU: 57.69%Recall:77.78%</span><br><span class="line">840    35    45RPs/Img: 1.82IOU: 57.69%Recall:77.78%</span><br><span class="line">841    35    45RPs/Img: 1.82IOU: 57.69%Recall:77.78%</span><br><span class="line">842    35    45RPs/Img: 1.82IOU: 57.69%Recall:77.78%</span><br><span class="line">843    35    45RPs/Img: 1.82IOU: 57.69%Recall:77.78%</span><br><span class="line">844    35    45RPs/Img: 1.82IOU: 57.69%Recall:77.78%</span><br><span class="line">845    35    45RPs/Img: 1.82IOU: 57.69%Recall:77.78%</span><br><span class="line">846    35    45RPs/Img: 1.82IOU: 57.69%Recall:77.78%</span><br><span class="line">847    35    45RPs/Img: 1.82IOU: 57.69%Recall:77.78%</span><br><span class="line">848    35    45RPs/Img: 1.82IOU: 57.69%Recall:77.78%</span><br><span class="line">849    35    45RPs/Img: 1.82IOU: 57.69%Recall:77.78%</span><br><span class="line">850    35    45RPs/Img: 1.82IOU: 57.69%Recall:77.78%</span><br><span class="line">851    35    45RPs/Img: 1.82IOU: 57.69%Recall:77.78%</span><br></pre></td></tr></table></figure><p>数据格式为<code>Number Correct Total Rps/Img IOU Recall</code></p><ul><li>Number表示处理到第几张图片。</li><li>Correct 表示正确的识别除了多少bbox。这个值算出来的步骤是这样的，丢进网络一张图片，网络会预测出很多 bbox，每个bbox都有其置信概率，概率大于threshold的bbox与实际的bbox，也就是labels中txt的内容计算IOU，找出IOU最大的bbox，如果这个最大值大于预设的IOU的threshold，那么correct加一。</li><li>Total表示实际有多少个bbox。</li><li>Rps/img表示平均每个图片会预测出来多少个bbox。</li><li>IOU： 这个是预测出的bbox和实际标注的bbox的交集 除以 他们的并集。显然，这个数值越大，说明预测的结果越好。</li><li>Recall召回率， 意思是检测出物体的个数 除以 标注的所有物体个数。通过代码我们也能看出来就是Correct除以Total的值。</li></ul><p>计算的是全部图片的 recall 和 IOU,而不是单类的,不是很方便.</p><h2 id="计算-mAP"><a href="#计算-mAP" class="headerlink" title="计算 mAP"></a>计算 mAP</h2><h3 id="reval-voc-py"><a href="#reval-voc-py" class="headerlink" title="reval_voc.py"></a>reval_voc.py</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Adapt from -&gt;</span></span><br><span class="line"><span class="hljs-comment"># --------------------------------------------------------</span></span><br><span class="line"><span class="hljs-comment"># Fast R-CNN</span></span><br><span class="line"><span class="hljs-comment"># Copyright (c) 2015 Microsoft</span></span><br><span class="line"><span class="hljs-comment"># Licensed under The MIT License [see LICENSE for details]</span></span><br><span class="line"><span class="hljs-comment"># Written by Ross Girshick</span></span><br><span class="line"><span class="hljs-comment"># --------------------------------------------------------</span></span><br><span class="line"><span class="hljs-comment"># &lt;- Written by Yaping Sun</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"""Reval = re-eval. Re-evaluate saved detections."""</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> os, sys, argparse</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> cPickle</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> voc_eval <span class="hljs-keyword">import</span> voc_eval</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_args</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">    Parse input arguments</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="hljs-string">'Re-evaluate results'</span>)</span><br><span class="line">    parser.add_argument(<span class="hljs-string">'output_dir'</span>, nargs=<span class="hljs-number">1</span>, help=<span class="hljs-string">'results directory'</span>,</span><br><span class="line">                        type=str)</span><br><span class="line">    parser.add_argument(<span class="hljs-string">'--voc_dir'</span>, dest=<span class="hljs-string">'voc_dir'</span>, default=<span class="hljs-string">'data/VOCdevkit'</span>, type=str)</span><br><span class="line">    parser.add_argument(<span class="hljs-string">'--year'</span>, dest=<span class="hljs-string">'year'</span>, default=<span class="hljs-string">'2017'</span>, type=str)</span><br><span class="line">    parser.add_argument(<span class="hljs-string">'--image_set'</span>, dest=<span class="hljs-string">'image_set'</span>, default=<span class="hljs-string">'test'</span>, type=str)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="hljs-string">'--classes'</span>, dest=<span class="hljs-string">'class_file'</span>, default=<span class="hljs-string">'data/voc.names'</span>, type=str)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> len(sys.argv) == <span class="hljs-number">1</span>:</span><br><span class="line">        parser.print_help()</span><br><span class="line">        sys.exit(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="hljs-keyword">return</span> args</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_voc_results_file_template</span><span class="hljs-params">(image_set, out_dir = <span class="hljs-string">'results'</span>)</span>:</span></span><br><span class="line">    filename = <span class="hljs-string">'comp4_det_'</span> + image_set + <span class="hljs-string">'_&#123;:s&#125;.txt'</span></span><br><span class="line">    path = os.path.join(out_dir, filename)</span><br><span class="line">    <span class="hljs-keyword">return</span> path</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_python_eval</span><span class="hljs-params">(devkit_path, year, image_set, classes, output_dir = <span class="hljs-string">'results'</span>)</span>:</span></span><br><span class="line">    annopath = os.path.join(</span><br><span class="line">        devkit_path,</span><br><span class="line">        <span class="hljs-string">'VOC'</span> + year,</span><br><span class="line">        <span class="hljs-string">'Annotations'</span>,</span><br><span class="line">        <span class="hljs-string">'&#123;:s&#125;.xml'</span>)</span><br><span class="line">    imagesetfile = os.path.join(</span><br><span class="line">        devkit_path,</span><br><span class="line">        <span class="hljs-string">'VOC'</span> + year,</span><br><span class="line">        <span class="hljs-string">'ImageSets'</span>,</span><br><span class="line">        <span class="hljs-string">'Main'</span>,</span><br><span class="line">        image_set + <span class="hljs-string">'.txt'</span>)</span><br><span class="line">    cachedir = os.path.join(devkit_path, <span class="hljs-string">'annotations_cache'</span>)</span><br><span class="line">    aps = []</span><br><span class="line">    <span class="hljs-comment"># The PASCAL VOC metric changed in 2010</span></span><br><span class="line">    use_07_metric = <span class="hljs-keyword">True</span> <span class="hljs-keyword">if</span> int(year) &lt; <span class="hljs-number">2010</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">False</span></span><br><span class="line">    print(<span class="hljs-string">'VOC07 metric? '</span> + (<span class="hljs-string">'Yes'</span> <span class="hljs-keyword">if</span> use_07_metric <span class="hljs-keyword">else</span> <span class="hljs-string">'No'</span>))</span><br><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(output_dir):</span><br><span class="line">        os.mkdir(output_dir)</span><br><span class="line">    <span class="hljs-keyword">for</span> i, cls <span class="hljs-keyword">in</span> enumerate(classes):</span><br><span class="line">        <span class="hljs-keyword">if</span> cls == <span class="hljs-string">'__background__'</span>:</span><br><span class="line">            <span class="hljs-keyword">continue</span></span><br><span class="line">        filename = get_voc_results_file_template(image_set).format(cls)</span><br><span class="line">        rec, prec, ap = voc_eval(</span><br><span class="line">            filename, annopath, imagesetfile, cls, cachedir, ovthresh=<span class="hljs-number">0.5</span>,</span><br><span class="line">            use_07_metric=use_07_metric)</span><br><span class="line">        aps += [ap]</span><br><span class="line">        print(<span class="hljs-string">'AP for &#123;&#125; = &#123;:.4f&#125;'</span>.format(cls, ap))</span><br><span class="line">        <span class="hljs-keyword">with</span> open(os.path.join(output_dir, cls + <span class="hljs-string">'_pr.pkl'</span>), <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> f:</span><br><span class="line">            cPickle.dump(&#123;<span class="hljs-string">'rec'</span>: rec, <span class="hljs-string">'prec'</span>: prec, <span class="hljs-string">'ap'</span>: ap&#125;, f)</span><br><span class="line">    print(<span class="hljs-string">'Mean AP = &#123;:.4f&#125;'</span>.format(np.mean(aps)))</span><br><span class="line">    print(<span class="hljs-string">'~~~~~~~~'</span>)</span><br><span class="line">    print(<span class="hljs-string">'Results:'</span>)</span><br><span class="line">    <span class="hljs-keyword">for</span> ap <span class="hljs-keyword">in</span> aps:</span><br><span class="line">        print(<span class="hljs-string">'&#123;:.3f&#125;'</span>.format(ap))</span><br><span class="line">    print(<span class="hljs-string">'&#123;:.3f&#125;'</span>.format(np.mean(aps)))</span><br><span class="line">    print(<span class="hljs-string">'~~~~~~~~'</span>)</span><br><span class="line">    print(<span class="hljs-string">''</span>)</span><br><span class="line">    print(<span class="hljs-string">'--------------------------------------------------------------'</span>)</span><br><span class="line">    print(<span class="hljs-string">'Results computed with the **unofficial** Python eval code.'</span>)</span><br><span class="line">    print(<span class="hljs-string">'Results should be very close to the official MATLAB eval code.'</span>)</span><br><span class="line">    print(<span class="hljs-string">'-- Thanks, The Management'</span>)</span><br><span class="line">    print(<span class="hljs-string">'--------------------------------------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    args = parse_args()</span><br><span class="line"></span><br><span class="line">    output_dir = os.path.abspath(args.output_dir[<span class="hljs-number">0</span>])</span><br><span class="line">    <span class="hljs-keyword">with</span> open(args.class_file, <span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line"></span><br><span class="line">    classes = [t.strip(<span class="hljs-string">'\n'</span>) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> lines]</span><br><span class="line"></span><br><span class="line">    print(<span class="hljs-string">'Evaluating detections'</span>)</span><br><span class="line">    do_python_eval(args.voc_dir, args.year, args.image_set, classes, output_dir)</span><br></pre></td></tr></table></figure><h3 id="voc-eval-py"><a href="#voc-eval-py" class="headerlink" title="voc_eval.py"></a>voc_eval.py</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># --------------------------------------------------------</span></span><br><span class="line"><span class="hljs-comment"># Fast/er R-CNN</span></span><br><span class="line"><span class="hljs-comment"># Licensed under The MIT License [see LICENSE for details]</span></span><br><span class="line"><span class="hljs-comment"># Written by Bharath Hariharan</span></span><br><span class="line"><span class="hljs-comment"># --------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> xml.etree.ElementTree <span class="hljs-keyword">as</span> ET</span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"><span class="hljs-keyword">import</span> pickle</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_rec</span><span class="hljs-params">(filename)</span>:</span></span><br><span class="line">    <span class="hljs-string">""" Parse a PASCAL VOC xml file """</span></span><br><span class="line">    tree = ET.parse(filename)</span><br><span class="line">    objects = []</span><br><span class="line">    <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> tree.findall(<span class="hljs-string">'object'</span>):</span><br><span class="line">        obj_struct = &#123;&#125;</span><br><span class="line">        obj_struct[<span class="hljs-string">'name'</span>] = obj.find(<span class="hljs-string">'name'</span>).text</span><br><span class="line">        obj_struct[<span class="hljs-string">'pose'</span>] = obj.find(<span class="hljs-string">'pose'</span>).text</span><br><span class="line">        obj_struct[<span class="hljs-string">'truncated'</span>] = int(obj.find(<span class="hljs-string">'truncated'</span>).text)</span><br><span class="line">        obj_struct[<span class="hljs-string">'difficult'</span>] = int(obj.find(<span class="hljs-string">'difficult'</span>).text)</span><br><span class="line">        bbox = obj.find(<span class="hljs-string">'bndbox'</span>)</span><br><span class="line">        obj_struct[<span class="hljs-string">'bbox'</span>] = [int(bbox.find(<span class="hljs-string">'xmin'</span>).text),</span><br><span class="line">                              int(bbox.find(<span class="hljs-string">'ymin'</span>).text),</span><br><span class="line">                              int(bbox.find(<span class="hljs-string">'xmax'</span>).text),</span><br><span class="line">                              int(bbox.find(<span class="hljs-string">'ymax'</span>).text)]</span><br><span class="line">        objects.append(obj_struct)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> objects</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">voc_ap</span><span class="hljs-params">(rec, prec, use_07_metric=False)</span>:</span></span><br><span class="line">    <span class="hljs-string">""" ap = voc_ap(rec, prec, [use_07_metric])</span></span><br><span class="line"><span class="hljs-string">    Compute VOC AP given precision and recall.</span></span><br><span class="line"><span class="hljs-string">    If use_07_metric is true, uses the</span></span><br><span class="line"><span class="hljs-string">    VOC 07 11 point method (default:False).</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line">    <span class="hljs-keyword">if</span> use_07_metric:</span><br><span class="line">        <span class="hljs-comment"># 11 point metric</span></span><br><span class="line">        ap = <span class="hljs-number">0.</span></span><br><span class="line">        <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> np.arange(<span class="hljs-number">0.</span>, <span class="hljs-number">1.1</span>, <span class="hljs-number">0.1</span>):</span><br><span class="line">            <span class="hljs-keyword">if</span> np.sum(rec &gt;= t) == <span class="hljs-number">0</span>:</span><br><span class="line">                p = <span class="hljs-number">0</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                p = np.max(prec[rec &gt;= t])</span><br><span class="line">            ap = ap + p / <span class="hljs-number">11.</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        <span class="hljs-comment"># correct AP calculation</span></span><br><span class="line">        <span class="hljs-comment"># first append sentinel values at the end</span></span><br><span class="line">        mrec = np.concatenate(([<span class="hljs-number">0.</span>], rec, [<span class="hljs-number">1.</span>]))</span><br><span class="line">        mpre = np.concatenate(([<span class="hljs-number">0.</span>], prec, [<span class="hljs-number">0.</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># compute the precision envelope</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(mpre.size - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>):</span><br><span class="line">            mpre[i - <span class="hljs-number">1</span>] = np.maximum(mpre[i - <span class="hljs-number">1</span>], mpre[i])</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># to calculate area under PR curve, look for points</span></span><br><span class="line">        <span class="hljs-comment"># where X axis (recall) changes value</span></span><br><span class="line">        i = np.where(mrec[<span class="hljs-number">1</span>:] != mrec[:<span class="hljs-number">-1</span>])[<span class="hljs-number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># and sum (\Delta recall) * prec</span></span><br><span class="line">        ap = np.sum((mrec[i + <span class="hljs-number">1</span>] - mrec[i]) * mpre[i + <span class="hljs-number">1</span>])</span><br><span class="line">    <span class="hljs-keyword">return</span> ap</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">voc_eval</span><span class="hljs-params">(detpath,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">             annopath,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">             imagesetfile,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">             classname,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">             cachedir,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">             ovthresh=<span class="hljs-number">0.5</span>,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">             use_07_metric=False)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""rec, prec, ap = voc_eval(detpath,</span></span><br><span class="line"><span class="hljs-string">                                annopath,</span></span><br><span class="line"><span class="hljs-string">                                imagesetfile,</span></span><br><span class="line"><span class="hljs-string">                                classname,</span></span><br><span class="line"><span class="hljs-string">                                [ovthresh],</span></span><br><span class="line"><span class="hljs-string">                                [use_07_metric])</span></span><br><span class="line"><span class="hljs-string">    Top level function that does the PASCAL VOC evaluation.</span></span><br><span class="line"><span class="hljs-string">    detpath: Path to detections</span></span><br><span class="line"><span class="hljs-string">        detpath.format(classname) should produce the detection results file.</span></span><br><span class="line"><span class="hljs-string">    annopath: Path to annotations</span></span><br><span class="line"><span class="hljs-string">        annopath.format(imagename) should be the xml annotations file.</span></span><br><span class="line"><span class="hljs-string">    imagesetfile: Text file containing the list of images, one image per line.</span></span><br><span class="line"><span class="hljs-string">    classname: Category name (duh)</span></span><br><span class="line"><span class="hljs-string">    cachedir: Directory for caching the annotations</span></span><br><span class="line"><span class="hljs-string">    [ovthresh]: Overlap threshold (default = 0.5)</span></span><br><span class="line"><span class="hljs-string">    [use_07_metric]: Whether to use VOC07's 11 point AP computation</span></span><br><span class="line"><span class="hljs-string">        (default False)</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line">    <span class="hljs-comment"># assumes detections are in detpath.format(classname)</span></span><br><span class="line">    <span class="hljs-comment"># assumes annotations are in annopath.format(imagename)</span></span><br><span class="line">    <span class="hljs-comment"># assumes imagesetfile is a text file with each line an image name</span></span><br><span class="line">    <span class="hljs-comment"># cachedir caches the annotations in a pickle file</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># first load gt</span></span><br><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(cachedir):</span><br><span class="line">        os.mkdir(cachedir)</span><br><span class="line">    cachefile = os.path.join(cachedir, <span class="hljs-string">'annots.pkl'</span>)</span><br><span class="line">    <span class="hljs-comment"># read list of images</span></span><br><span class="line">    <span class="hljs-keyword">with</span> open(imagesetfile, <span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">    imagenames = [x.strip() <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> lines]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isfile(cachefile):</span><br><span class="line">        <span class="hljs-comment"># load annots</span></span><br><span class="line">        recs = &#123;&#125;</span><br><span class="line">        <span class="hljs-keyword">for</span> i, imagename <span class="hljs-keyword">in</span> enumerate(imagenames):</span><br><span class="line">            recs[imagename] = parse_rec(annopath.format(imagename))</span><br><span class="line">            <span class="hljs-keyword">if</span> i % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:</span><br><span class="line">                <span class="hljs-keyword">print</span> (<span class="hljs-string">'Reading annotation for &#123;:d&#125;/&#123;:d&#125;'</span>.format(</span><br><span class="line">                    i + <span class="hljs-number">1</span>, len(imagenames)))</span><br><span class="line">        <span class="hljs-comment"># save</span></span><br><span class="line">        <span class="hljs-keyword">print</span> (<span class="hljs-string">'Saving cached annotations to &#123;:s&#125;'</span>.format(cachefile))</span><br><span class="line">        <span class="hljs-keyword">with</span> open(cachefile, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> f:</span><br><span class="line">            pickle.dump(recs, f)</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        <span class="hljs-comment"># load</span></span><br><span class="line">        <span class="hljs-keyword">with</span> open(cachefile, <span class="hljs-string">'rb'</span>) <span class="hljs-keyword">as</span> f:</span><br><span class="line">            recs = pickle.load(f)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># extract gt objects for this class</span></span><br><span class="line">    class_recs = &#123;&#125;</span><br><span class="line">    npos = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">for</span> imagename <span class="hljs-keyword">in</span> imagenames:</span><br><span class="line">        R = [obj <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> recs[imagename] <span class="hljs-keyword">if</span> obj[<span class="hljs-string">'name'</span>] == classname]</span><br><span class="line">        difficult = np.array([x[<span class="hljs-string">'difficult'</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> R]).astype(np.bool)</span><br><span class="line">        bbox = np.array([x[<span class="hljs-string">'bbox'</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> R])</span><br><span class="line">        <span class="hljs-comment">#difficult = np.array([x['difficult'] for x in R]).astype(np.bool)</span></span><br><span class="line">        det = [<span class="hljs-keyword">False</span>] * len(R)</span><br><span class="line">        npos = npos + sum(~difficult)</span><br><span class="line">        class_recs[imagename] = &#123;<span class="hljs-string">'bbox'</span>: bbox,</span><br><span class="line">                                 <span class="hljs-comment">#'difficult': difficult,</span></span><br><span class="line">                                 <span class="hljs-string">'det'</span>: det&#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># read dets</span></span><br><span class="line">    detfile = detpath.format(classname)</span><br><span class="line">    <span class="hljs-keyword">with</span> open(detfile, <span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line"></span><br><span class="line">    splitlines = [x.strip().split(<span class="hljs-string">' '</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> lines]</span><br><span class="line">    image_ids = [x[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> splitlines]</span><br><span class="line">    confidence = np.array([float(x[<span class="hljs-number">1</span>]) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> splitlines])</span><br><span class="line">    BB = np.array([[float(z) <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> x[<span class="hljs-number">2</span>:]] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> splitlines])</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># sort by confidence</span></span><br><span class="line">    sorted_ind = np.argsort(-confidence)</span><br><span class="line">    sorted_scores = np.sort(-confidence)</span><br><span class="line">    BB = BB[sorted_ind, :]</span><br><span class="line">    image_ids = [image_ids[x] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> sorted_ind]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># go down dets and mark TPs and FPs</span></span><br><span class="line">    nd = len(image_ids)</span><br><span class="line">    tp = np.zeros(nd)</span><br><span class="line">    fp = np.zeros(nd)</span><br><span class="line">    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> range(nd):</span><br><span class="line">        R = class_recs[image_ids[d]]</span><br><span class="line">        bb = BB[d, :].astype(float)</span><br><span class="line">        ovmax = -np.inf</span><br><span class="line">        BBGT = R[<span class="hljs-string">'bbox'</span>].astype(float)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> BBGT.size &gt; <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-comment"># compute overlaps</span></span><br><span class="line">            <span class="hljs-comment"># intersection</span></span><br><span class="line">            ixmin = np.maximum(BBGT[:, <span class="hljs-number">0</span>], bb[<span class="hljs-number">0</span>])</span><br><span class="line">            iymin = np.maximum(BBGT[:, <span class="hljs-number">1</span>], bb[<span class="hljs-number">1</span>])</span><br><span class="line">            ixmax = np.minimum(BBGT[:, <span class="hljs-number">2</span>], bb[<span class="hljs-number">2</span>])</span><br><span class="line">            iymax = np.minimum(BBGT[:, <span class="hljs-number">3</span>], bb[<span class="hljs-number">3</span>])</span><br><span class="line">            iw = np.maximum(ixmax - ixmin + <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>)</span><br><span class="line">            ih = np.maximum(iymax - iymin + <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>)</span><br><span class="line">            inters = iw * ih</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment"># union</span></span><br><span class="line">            uni = ((bb[<span class="hljs-number">2</span>] - bb[<span class="hljs-number">0</span>] + <span class="hljs-number">1.</span>) * (bb[<span class="hljs-number">3</span>] - bb[<span class="hljs-number">1</span>] + <span class="hljs-number">1.</span>) +</span><br><span class="line">                   (BBGT[:, <span class="hljs-number">2</span>] - BBGT[:, <span class="hljs-number">0</span>] + <span class="hljs-number">1.</span>) *</span><br><span class="line">                   (BBGT[:, <span class="hljs-number">3</span>] - BBGT[:, <span class="hljs-number">1</span>] + <span class="hljs-number">1.</span>) - inters)</span><br><span class="line"></span><br><span class="line">            overlaps = inters / uni</span><br><span class="line">            ovmax = np.max(overlaps)</span><br><span class="line">            jmax = np.argmax(overlaps)</span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        if ovmax &gt; ovthresh:</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">            if not False:</span></span><br><span class="line"><span class="hljs-string">                if not R['det'][jmax]:</span></span><br><span class="line"><span class="hljs-string">                    tp[d] = 1.</span></span><br><span class="line"><span class="hljs-string">                    R['det'][jmax] = 1</span></span><br><span class="line"><span class="hljs-string">                else:</span></span><br><span class="line"><span class="hljs-string">                    fp[d] = 1.</span></span><br><span class="line"><span class="hljs-string">        else:</span></span><br><span class="line"><span class="hljs-string">            fp[d] = 1.</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        <span class="hljs-keyword">if</span> ovmax &gt; ovthresh:</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">False</span>:</span><br><span class="line">                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> R[<span class="hljs-string">'det'</span>][jmax]:</span><br><span class="line">                    tp[d] = <span class="hljs-number">1.</span></span><br><span class="line">                    R[<span class="hljs-string">'det'</span>][jmax] = <span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    fp[d] = <span class="hljs-number">1.</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            fp[d] = <span class="hljs-number">1.</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># compute precision recall</span></span><br><span class="line">    fp = np.cumsum(fp)</span><br><span class="line">    tp = np.cumsum(tp)</span><br><span class="line">    rec = tp / float(npos)</span><br><span class="line">    <span class="hljs-comment"># avoid divide by zero in case the first detection matches a difficult</span></span><br><span class="line">    <span class="hljs-comment"># ground truth</span></span><br><span class="line">    prec = tp / np.maximum(tp + fp, np.finfo(np.float64).eps)</span><br><span class="line">    ap = voc_ap(rec, prec, use_07_metric)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> rec, prec, ap</span><br></pre></td></tr></table></figure><h3 id="computer-Single-ALL-mAP-py"><a href="#computer-Single-ALL-mAP-py" class="headerlink" title="computer_Single_ALL_mAP.py"></a>computer_Single_ALL_mAP.py</h3><ul><li>results_path = “填写前面生成的 results 文件的路径”</li><li>/xxx/results/{}.txt - results_path 的路径</li><li>/xxx/{}.xml - xml 格式的标注文件</li><li>/xxx/list.txt - 只包含图片名字的列表文件</li></ul><p>执行 computer_Single_ALL_mAP.py 将会生成各个分类的 mAP.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> voc_eval <span class="hljs-keyword">import</span> voc_eval </span><br><span class="line"><span class="hljs-keyword">import</span> os </span><br><span class="line"></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line"></span><br><span class="line">results_path = <span class="hljs-string">"填写前面生成的 results 文件的路径"</span></span><br><span class="line">sub_files = os.listdir(results_path) </span><br><span class="line"></span><br><span class="line">mAP = [] </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(sub_files)): </span><br><span class="line">    class_name = sub_files[i].split(<span class="hljs-string">".txt"</span>)[<span class="hljs-number">0</span>]</span><br><span class="line">    rec, prec, ap = voc_eval(<span class="hljs-string">'/xxx/results/&#123;&#125;.txt'</span>, <span class="hljs-string">'/xxx/&#123;&#125;.xml'</span>, <span class="hljs-string">'/xxx/list.txt'</span>, class_name, <span class="hljs-string">'.'</span>)</span><br><span class="line">    <span class="hljs-comment"># print("&#123;&#125; :\t &#123;&#125; ".format(class_name, ap)) </span></span><br><span class="line">    print(<span class="hljs-string">"&#123;&#125; :\t &#123;&#125; "</span>.format(class_name, ap)) </span><br><span class="line">    mAP.append(ap) </span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment"># class_name = 'switch_open'</span></span><br><span class="line"><span class="hljs-comment"># rec, prec, ap = voc_eval('/aseit-data/program/darknet/results/&#123;&#125;.txt', '/aseit-data/data_set/swich/dataset_test/switch_mAP/&#123;&#125;.xml', '/aseit-data/data_set/swich/dataset_test/list.txt', class_name, '.')</span></span><br><span class="line"><span class="hljs-comment"># print("&#123;&#125; :\t &#123;&#125; ".format(class_name, ap)) </span></span><br><span class="line"><span class="hljs-comment"># mAP.append(ap) </span></span><br><span class="line"></span><br><span class="line">mAP = tuple(mAP) </span><br><span class="line">print(<span class="hljs-string">"***************************"</span>) </span><br><span class="line">print(<span class="hljs-string">"mAP :\t &#123;&#125;"</span>.format( float( sum(mAP)/len(mAP)) ))</span><br></pre></td></tr></table></figure><h2 id="detector-c"><a href="#detector-c" class="headerlink" title="detector.c"></a>detector.c</h2><p>在 test 和计算 recall 的时候需要修改 examples/detector.c 如下:</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"darknet.h"</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> coco_ids[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">27</span>,<span class="hljs-number">28</span>,<span class="hljs-number">31</span>,<span class="hljs-number">32</span>,<span class="hljs-number">33</span>,<span class="hljs-number">34</span>,<span class="hljs-number">35</span>,<span class="hljs-number">36</span>,<span class="hljs-number">37</span>,<span class="hljs-number">38</span>,<span class="hljs-number">39</span>,<span class="hljs-number">40</span>,</span><br><span class="line"><span class="hljs-number">41</span>,<span class="hljs-number">42</span>,<span class="hljs-number">43</span>,<span class="hljs-number">44</span>,<span class="hljs-number">46</span>,<span class="hljs-number">47</span>,<span class="hljs-number">48</span>,<span class="hljs-number">49</span>,<span class="hljs-number">50</span>,<span class="hljs-number">51</span>,<span class="hljs-number">52</span>,<span class="hljs-number">53</span>,<span class="hljs-number">54</span>,<span class="hljs-number">55</span>,<span class="hljs-number">56</span>,<span class="hljs-number">57</span>,<span class="hljs-number">58</span>,<span class="hljs-number">59</span>,<span class="hljs-number">60</span>,<span class="hljs-number">61</span>,<span class="hljs-number">62</span>,<span class="hljs-number">63</span>,<span class="hljs-number">64</span>,<span class="hljs-number">65</span>,<span class="hljs-number">67</span>,<span class="hljs-number">70</span>,<span class="hljs-number">72</span>,<span class="hljs-number">73</span>,<span class="hljs-number">74</span>,<span class="hljs-number">75</span>,<span class="hljs-number">76</span>,<span class="hljs-number">77</span>,<span class="hljs-number">78</span>,<span class="hljs-number">79</span>,<span class="hljs-number">80</span>,<span class="hljs-number">81</span>,<span class="hljs-number">82</span>,<span class="hljs-number">84</span>,<span class="hljs-number">85</span>,<span class="hljs-number">86</span>,<span class="hljs-number">87</span>,<span class="hljs-number">88</span>,<span class="hljs-number">89</span>,<span class="hljs-number">90</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">GetFilename</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *fullname)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> from,to,i;</span><br><span class="line">    <span class="hljs-keyword">char</span> *newstr,*temp;</span><br><span class="line">    <span class="hljs-keyword">if</span>(fullname!=<span class="hljs-literal">NULL</span>)&#123;</span><br><span class="line">        <span class="hljs-comment">//if not find dot</span></span><br><span class="line">        <span class="hljs-keyword">if</span>((temp=<span class="hljs-built_in">strchr</span>(fullname,<span class="hljs-string">'.'</span>))==<span class="hljs-literal">NULL</span>)&#123;</span><br><span class="line">        newstr = fullname;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            from = <span class="hljs-built_in">strlen</span>(fullname) - <span class="hljs-built_in">strlen</span>(temp);</span><br><span class="line">            to = (temp-fullname);</span><br><span class="line">            <span class="hljs-comment">//the first dot's index</span></span><br><span class="line">            <span class="hljs-keyword">for</span> (i=from; i&lt;=to; i--)&#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (fullname[i]==<span class="hljs-string">'.'</span>) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//find the last dot</span></span><br><span class="line">            &#125;</span><br><span class="line">            newstr = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(i+<span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-built_in">strncpy</span>(newstr,fullname,i);</span><br><span class="line">            *(newstr+i)=<span class="hljs-number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> name[<span class="hljs-number">50</span>] = &#123;<span class="hljs-string">""</span>&#125;;</span><br><span class="line">    <span class="hljs-keyword">char</span> *q = <span class="hljs-built_in">strrchr</span>(newstr,<span class="hljs-string">'/'</span>) + <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-built_in">strncpy</span>(name,q,<span class="hljs-number">40</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">train_detector</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *datacfg, <span class="hljs-keyword">char</span> *cfgfile, <span class="hljs-keyword">char</span> *weightfile, <span class="hljs-keyword">int</span> *gpus, <span class="hljs-keyword">int</span> ngpus, <span class="hljs-keyword">int</span> clear)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">list</span> *options = read_data_cfg(datacfg); <span class="hljs-comment">//解析data文件，用自定义链表options存储训练集基本信息，函数位于option_list.c</span></span><br><span class="line">    <span class="hljs-keyword">char</span> *train_images = option_find_str(options, <span class="hljs-string">"train"</span>, <span class="hljs-string">"data/train.list"</span>);  <span class="hljs-comment">//从options中找训练集</span></span><br><span class="line">    <span class="hljs-keyword">char</span> *backup_directory = option_find_str(options, <span class="hljs-string">"backup"</span>, <span class="hljs-string">"/backup/"</span>);    <span class="hljs-comment">//从options中找backup路径</span></span><br><span class="line"></span><br><span class="line">    srand(time(<span class="hljs-number">0</span>)); <span class="hljs-comment">//初始化随机种子数</span></span><br><span class="line">    <span class="hljs-keyword">char</span> *base = basecfg(cfgfile);  <span class="hljs-comment">//此函数位于utils.c,返回cfg文件不带后缀的名字</span></span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>, base);</span><br><span class="line">    <span class="hljs-keyword">float</span> avg_loss = <span class="hljs-number">-1</span>;</span><br><span class="line">    network **nets = <span class="hljs-built_in">calloc</span>(ngpus, <span class="hljs-keyword">sizeof</span>(network));</span><br><span class="line"></span><br><span class="line">    srand(time(<span class="hljs-number">0</span>));</span><br><span class="line">    <span class="hljs-keyword">int</span> seed = rand();</span><br><span class="line">    <span class="hljs-keyword">int</span> i;</span><br><span class="line">    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; ngpus; ++i)&#123;</span><br><span class="line">        srand(seed);</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> GPU</span></span><br><span class="line">        cuda_set_device(gpus[i]);</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></span><br><span class="line">        nets[i] = load_network(cfgfile, weightfile, clear);</span><br><span class="line">        nets[i]-&gt;learning_rate *= ngpus;</span><br><span class="line">    &#125;</span><br><span class="line">    srand(time(<span class="hljs-number">0</span>));</span><br><span class="line">    network *net = nets[<span class="hljs-number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> imgs = net-&gt;batch * net-&gt;subdivisions * ngpus;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Learning Rate: %g, Momentum: %g, Decay: %g\n"</span>, net-&gt;learning_rate, net-&gt;momentum, net-&gt;decay);</span><br><span class="line">    data train, buffer;</span><br><span class="line"></span><br><span class="line">    layer l = net-&gt;layers[net-&gt;n - <span class="hljs-number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> classes = l.classes;</span><br><span class="line">    <span class="hljs-keyword">float</span> jitter = l.jitter;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">list</span> *plist = get_paths(train_images);</span><br><span class="line">    <span class="hljs-comment">//int N = plist-&gt;size;</span></span><br><span class="line">    <span class="hljs-keyword">char</span> **paths = (<span class="hljs-keyword">char</span> **)list_to_array(plist);</span><br><span class="line"></span><br><span class="line">    load_args args = get_base_args(net);</span><br><span class="line">    args.coords = l.coords;</span><br><span class="line">    args.paths = paths;</span><br><span class="line">    args.n = imgs;</span><br><span class="line">    args.m = plist-&gt;size;</span><br><span class="line">    args.classes = classes;</span><br><span class="line">    args.jitter = jitter;</span><br><span class="line">    args.num_boxes = l.max_boxes;</span><br><span class="line">    args.d = &amp;buffer;</span><br><span class="line">    args.type = DETECTION_DATA;</span><br><span class="line">    <span class="hljs-comment">//args.type = INSTANCE_DATA;</span></span><br><span class="line">    args.threads = <span class="hljs-number">64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">pthread_t</span> load_thread = load_data(args);</span><br><span class="line">    <span class="hljs-keyword">double</span> time;</span><br><span class="line">    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-comment">//while(i*imgs &lt; N*120)&#123;</span></span><br><span class="line">    <span class="hljs-keyword">while</span>(get_current_batch(net) &lt; net-&gt;max_batches)&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(l.random &amp;&amp; count++%<span class="hljs-number">10</span> == <span class="hljs-number">0</span>)&#123;</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Resizing\n"</span>);</span><br><span class="line">            <span class="hljs-keyword">int</span> dim = (rand() % <span class="hljs-number">10</span> + <span class="hljs-number">10</span>) * <span class="hljs-number">32</span>;</span><br><span class="line">            <span class="hljs-keyword">if</span> (get_current_batch(net)+<span class="hljs-number">200</span> &gt; net-&gt;max_batches) dim = <span class="hljs-number">608</span>;</span><br><span class="line">            <span class="hljs-comment">//int dim = (rand() % 4 + 16) * 32;</span></span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, dim);</span><br><span class="line">            args.w = dim;</span><br><span class="line">            args.h = dim;</span><br><span class="line"></span><br><span class="line">            pthread_join(load_thread, <span class="hljs-number">0</span>);</span><br><span class="line">            train = buffer;</span><br><span class="line">            free_data(train);</span><br><span class="line">            load_thread = load_data(args);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line">            <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; ngpus; ++i)&#123;</span><br><span class="line">                resize_network(nets[i], dim, dim);</span><br><span class="line">            &#125;</span><br><span class="line">            net = nets[<span class="hljs-number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        time=what_time_is_it_now();</span><br><span class="line">        pthread_join(load_thread, <span class="hljs-number">0</span>);</span><br><span class="line">        train = buffer;</span><br><span class="line">        load_thread = load_data(args);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">           int k;</span></span><br><span class="line"><span class="hljs-comment">           for(k = 0; k &lt; l.max_boxes; ++k)&#123;</span></span><br><span class="line"><span class="hljs-comment">           box b = float_to_box(train.y.vals[10] + 1 + k*5);</span></span><br><span class="line"><span class="hljs-comment">           if(!b.x) break;</span></span><br><span class="line"><span class="hljs-comment">           printf("loaded: %f %f %f %f\n", b.x, b.y, b.w, b.h);</span></span><br><span class="line"><span class="hljs-comment">           &#125;</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">           int zz;</span></span><br><span class="line"><span class="hljs-comment">           for(zz = 0; zz &lt; train.X.cols; ++zz)&#123;</span></span><br><span class="line"><span class="hljs-comment">           image im = float_to_image(net-&gt;w, net-&gt;h, 3, train.X.vals[zz]);</span></span><br><span class="line"><span class="hljs-comment">           int k;</span></span><br><span class="line"><span class="hljs-comment">           for(k = 0; k &lt; l.max_boxes; ++k)&#123;</span></span><br><span class="line"><span class="hljs-comment">           box b = float_to_box(train.y.vals[zz] + k*5, 1);</span></span><br><span class="line"><span class="hljs-comment">           printf("%f %f %f %f\n", b.x, b.y, b.w, b.h);</span></span><br><span class="line"><span class="hljs-comment">           draw_bbox(im, b, 1, 1,0,0);</span></span><br><span class="line"><span class="hljs-comment">           &#125;</span></span><br><span class="line"><span class="hljs-comment">           show_image(im, "truth11");</span></span><br><span class="line"><span class="hljs-comment">           cvWaitKey(0);</span></span><br><span class="line"><span class="hljs-comment">           save_image(im, "truth11");</span></span><br><span class="line"><span class="hljs-comment">           &#125;</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Loaded: %lf seconds\n"</span>, what_time_is_it_now()-time);</span><br><span class="line"></span><br><span class="line">        time=what_time_is_it_now();</span><br><span class="line">        <span class="hljs-keyword">float</span> loss = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> GPU</span></span><br><span class="line">        <span class="hljs-keyword">if</span>(ngpus == <span class="hljs-number">1</span>)&#123;</span><br><span class="line">            loss = train_network(net, train);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            loss = train_networks(nets, ngpus, train, <span class="hljs-number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span></span><br><span class="line">        loss = train_network(net, train);</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></span><br><span class="line">        <span class="hljs-keyword">if</span> (avg_loss &lt; <span class="hljs-number">0</span>) avg_loss = loss;</span><br><span class="line">        avg_loss = avg_loss*<span class="hljs-number">.9</span> + loss*<span class="hljs-number">.1</span>;</span><br><span class="line"></span><br><span class="line">        i = get_current_batch(net);</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%ld: %f, %f avg, %f rate, %lf seconds, %d images\n"</span>, get_current_batch(net), loss, avg_loss, get_current_rate(net), what_time_is_it_now()-time, i*imgs);</span><br><span class="line">        <span class="hljs-keyword">if</span>(i%<span class="hljs-number">100</span>==<span class="hljs-number">0</span>)&#123;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> GPU</span></span><br><span class="line">            <span class="hljs-keyword">if</span>(ngpus != <span class="hljs-number">1</span>) sync_nets(nets, ngpus, <span class="hljs-number">0</span>);</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></span><br><span class="line">            <span class="hljs-keyword">char</span> buff[<span class="hljs-number">256</span>];</span><br><span class="line">            <span class="hljs-built_in">sprintf</span>(buff, <span class="hljs-string">"%s/%s.backup"</span>, backup_directory, base);</span><br><span class="line">            save_weights(net, buff);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span>(i%<span class="hljs-number">10000</span>==<span class="hljs-number">0</span> || (i &lt; <span class="hljs-number">1000</span> &amp;&amp; i%<span class="hljs-number">100</span> == <span class="hljs-number">0</span>))&#123;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> GPU</span></span><br><span class="line">            <span class="hljs-keyword">if</span>(ngpus != <span class="hljs-number">1</span>) sync_nets(nets, ngpus, <span class="hljs-number">0</span>);</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></span><br><span class="line">            <span class="hljs-keyword">char</span> buff[<span class="hljs-number">256</span>];</span><br><span class="line">            <span class="hljs-built_in">sprintf</span>(buff, <span class="hljs-string">"%s/%s_%d.weights"</span>, backup_directory, base, i);</span><br><span class="line">            save_weights(net, buff);</span><br><span class="line">        &#125;</span><br><span class="line">        free_data(train);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> GPU</span></span><br><span class="line">    <span class="hljs-keyword">if</span>(ngpus != <span class="hljs-number">1</span>) sync_nets(nets, ngpus, <span class="hljs-number">0</span>);</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></span><br><span class="line">    <span class="hljs-keyword">char</span> buff[<span class="hljs-number">256</span>];</span><br><span class="line">    <span class="hljs-built_in">sprintf</span>(buff, <span class="hljs-string">"%s/%s_final.weights"</span>, backup_directory, base);</span><br><span class="line">    save_weights(net, buff);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_coco_image_id</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *filename)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">char</span> *p = <span class="hljs-built_in">strrchr</span>(filename, <span class="hljs-string">'/'</span>);</span><br><span class="line">    <span class="hljs-keyword">char</span> *c = <span class="hljs-built_in">strrchr</span>(filename, <span class="hljs-string">'_'</span>);</span><br><span class="line">    <span class="hljs-keyword">if</span>(c) p = c;</span><br><span class="line">    <span class="hljs-keyword">return</span> atoi(p+<span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print_cocos</span><span class="hljs-params">(FILE *fp, <span class="hljs-keyword">char</span> *image_path, detection *dets, <span class="hljs-keyword">int</span> num_boxes, <span class="hljs-keyword">int</span> classes, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> h)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> i, j;</span><br><span class="line">    <span class="hljs-keyword">int</span> image_id = get_coco_image_id(image_path);</span><br><span class="line">    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; num_boxes; ++i)&#123;</span><br><span class="line">        <span class="hljs-keyword">float</span> xmin = dets[i].bbox.x - dets[i].bbox.w/<span class="hljs-number">2.</span>;</span><br><span class="line">        <span class="hljs-keyword">float</span> xmax = dets[i].bbox.x + dets[i].bbox.w/<span class="hljs-number">2.</span>;</span><br><span class="line">        <span class="hljs-keyword">float</span> ymin = dets[i].bbox.y - dets[i].bbox.h/<span class="hljs-number">2.</span>;</span><br><span class="line">        <span class="hljs-keyword">float</span> ymax = dets[i].bbox.y + dets[i].bbox.h/<span class="hljs-number">2.</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (xmin &lt; <span class="hljs-number">0</span>) xmin = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (ymin &lt; <span class="hljs-number">0</span>) ymin = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (xmax &gt; w) xmax = w;</span><br><span class="line">        <span class="hljs-keyword">if</span> (ymax &gt; h) ymax = h;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">float</span> bx = xmin;</span><br><span class="line">        <span class="hljs-keyword">float</span> by = ymin;</span><br><span class="line">        <span class="hljs-keyword">float</span> bw = xmax - xmin;</span><br><span class="line">        <span class="hljs-keyword">float</span> bh = ymax - ymin;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; classes; ++j)&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (dets[i].prob[j]) <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">"&#123;\"image_id\":%d, \"category_id\":%d, \"bbox\":[%f, %f, %f, %f], \"score\":%f&#125;,\n"</span>, image_id, coco_ids[j], bx, by, bw, bh, dets[i].prob[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_detector_detections</span><span class="hljs-params">(FILE **fps, <span class="hljs-keyword">char</span> *id, detection *dets, <span class="hljs-keyword">int</span> total, <span class="hljs-keyword">int</span> classes, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> h)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> i, j;</span><br><span class="line">    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; total; ++i)&#123;</span><br><span class="line">        <span class="hljs-keyword">float</span> xmin = dets[i].bbox.x - dets[i].bbox.w/<span class="hljs-number">2.</span> + <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">float</span> xmax = dets[i].bbox.x + dets[i].bbox.w/<span class="hljs-number">2.</span> + <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">float</span> ymin = dets[i].bbox.y - dets[i].bbox.h/<span class="hljs-number">2.</span> + <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">float</span> ymax = dets[i].bbox.y + dets[i].bbox.h/<span class="hljs-number">2.</span> + <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (xmin &lt; <span class="hljs-number">1</span>) xmin = <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (ymin &lt; <span class="hljs-number">1</span>) ymin = <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (xmax &gt; w) xmax = w;</span><br><span class="line">        <span class="hljs-keyword">if</span> (ymax &gt; h) ymax = h;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; classes; ++j)&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (dets[i].prob[j]) <span class="hljs-built_in">fprintf</span>(fps[j], <span class="hljs-string">"%s %f %f %f %f %f\n"</span>, id, dets[i].prob[j],</span><br><span class="line">                    xmin, ymin, xmax, ymax);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_imagenet_detections</span><span class="hljs-params">(FILE *fp, <span class="hljs-keyword">int</span> id, detection *dets, <span class="hljs-keyword">int</span> total, <span class="hljs-keyword">int</span> classes, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> h)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> i, j;</span><br><span class="line">    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; total; ++i)&#123;</span><br><span class="line">        <span class="hljs-keyword">float</span> xmin = dets[i].bbox.x - dets[i].bbox.w/<span class="hljs-number">2.</span>;</span><br><span class="line">        <span class="hljs-keyword">float</span> xmax = dets[i].bbox.x + dets[i].bbox.w/<span class="hljs-number">2.</span>;</span><br><span class="line">        <span class="hljs-keyword">float</span> ymin = dets[i].bbox.y - dets[i].bbox.h/<span class="hljs-number">2.</span>;</span><br><span class="line">        <span class="hljs-keyword">float</span> ymax = dets[i].bbox.y + dets[i].bbox.h/<span class="hljs-number">2.</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (xmin &lt; <span class="hljs-number">0</span>) xmin = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (ymin &lt; <span class="hljs-number">0</span>) ymin = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (xmax &gt; w) xmax = w;</span><br><span class="line">        <span class="hljs-keyword">if</span> (ymax &gt; h) ymax = h;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; classes; ++j)&#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> <span class="hljs-class"><span class="hljs-keyword">class</span> = <span class="hljs-title">j</span>;</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (dets[i].prob[class]) <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">"%d %d %f %f %f %f %f\n"</span>, id, j+<span class="hljs-number">1</span>, dets[i].prob[class],</span><br><span class="line">                    xmin, ymin, xmax, ymax);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">validate_detector_flip</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *datacfg, <span class="hljs-keyword">char</span> *cfgfile, <span class="hljs-keyword">char</span> *weightfile, <span class="hljs-keyword">char</span> *outfile)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> j;</span><br><span class="line">    <span class="hljs-built_in">list</span> *options = read_data_cfg(datacfg);</span><br><span class="line">    <span class="hljs-keyword">char</span> *valid_images = option_find_str(options, <span class="hljs-string">"valid"</span>, <span class="hljs-string">"data/valid.list"</span>);</span><br><span class="line">    <span class="hljs-keyword">char</span> *name_list = option_find_str(options, <span class="hljs-string">"names"</span>, <span class="hljs-string">"data/names.list"</span>);</span><br><span class="line">    <span class="hljs-keyword">char</span> *prefix = option_find_str(options, <span class="hljs-string">"results"</span>, <span class="hljs-string">"results"</span>);</span><br><span class="line">    <span class="hljs-keyword">char</span> **names = get_labels(name_list);</span><br><span class="line">    <span class="hljs-keyword">char</span> *mapf = option_find_str(options, <span class="hljs-string">"map"</span>, <span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-keyword">int</span> *<span class="hljs-built_in">map</span> = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (mapf) <span class="hljs-built_in">map</span> = read_map(mapf);</span><br><span class="line"></span><br><span class="line">    network *net = load_network(cfgfile, weightfile, <span class="hljs-number">0</span>);</span><br><span class="line">    set_batch_network(net, <span class="hljs-number">2</span>);</span><br><span class="line">    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"Learning Rate: %g, Momentum: %g, Decay: %g\n"</span>, net-&gt;learning_rate, net-&gt;momentum, net-&gt;decay);</span><br><span class="line">    srand(time(<span class="hljs-number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">list</span> *plist = get_paths(valid_images);</span><br><span class="line">    <span class="hljs-keyword">char</span> **paths = (<span class="hljs-keyword">char</span> **)list_to_array(plist);</span><br><span class="line"></span><br><span class="line">    layer l = net-&gt;layers[net-&gt;n<span class="hljs-number">-1</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> classes = l.classes;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">char</span> buff[<span class="hljs-number">1024</span>];</span><br><span class="line">    <span class="hljs-keyword">char</span> *type = option_find_str(options, <span class="hljs-string">"eval"</span>, <span class="hljs-string">"voc"</span>);</span><br><span class="line">    FILE *fp = <span class="hljs-number">0</span>;</span><br><span class="line">    FILE **fps = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> coco = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> imagenet = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>==<span class="hljs-built_in">strcmp</span>(type, <span class="hljs-string">"coco"</span>))&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(!outfile) outfile = <span class="hljs-string">"coco_results"</span>;</span><br><span class="line">        <span class="hljs-built_in">snprintf</span>(buff, <span class="hljs-number">1024</span>, <span class="hljs-string">"%s/%s.json"</span>, prefix, outfile);</span><br><span class="line">        fp = fopen(buff, <span class="hljs-string">"w"</span>);</span><br><span class="line">        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">"[\n"</span>);</span><br><span class="line">        coco = <span class="hljs-number">1</span>;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>==<span class="hljs-built_in">strcmp</span>(type, <span class="hljs-string">"imagenet"</span>))&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(!outfile) outfile = <span class="hljs-string">"imagenet-detection"</span>;</span><br><span class="line">        <span class="hljs-built_in">snprintf</span>(buff, <span class="hljs-number">1024</span>, <span class="hljs-string">"%s/%s.txt"</span>, prefix, outfile);</span><br><span class="line">        fp = fopen(buff, <span class="hljs-string">"w"</span>);</span><br><span class="line">        imagenet = <span class="hljs-number">1</span>;</span><br><span class="line">        classes = <span class="hljs-number">200</span>;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(!outfile) outfile = <span class="hljs-string">"comp4_det_test_"</span>;</span><br><span class="line">        fps = <span class="hljs-built_in">calloc</span>(classes, <span class="hljs-keyword">sizeof</span>(FILE *));</span><br><span class="line">        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; classes; ++j)&#123;</span><br><span class="line">            <span class="hljs-built_in">snprintf</span>(buff, <span class="hljs-number">1024</span>, <span class="hljs-string">"%s/%s%s.txt"</span>, prefix, outfile, names[j]);</span><br><span class="line">            fps[j] = fopen(buff, <span class="hljs-string">"w"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> m = plist-&gt;size;</span><br><span class="line">    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> t;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">float</span> thresh = <span class="hljs-number">.95</span>;</span><br><span class="line">    <span class="hljs-keyword">float</span> nms = <span class="hljs-number">.45</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> nthreads = <span class="hljs-number">4</span>;</span><br><span class="line">    image *val = <span class="hljs-built_in">calloc</span>(nthreads, <span class="hljs-keyword">sizeof</span>(image));</span><br><span class="line">    image *val_resized = <span class="hljs-built_in">calloc</span>(nthreads, <span class="hljs-keyword">sizeof</span>(image));</span><br><span class="line">    image *buf = <span class="hljs-built_in">calloc</span>(nthreads, <span class="hljs-keyword">sizeof</span>(image));</span><br><span class="line">    image *buf_resized = <span class="hljs-built_in">calloc</span>(nthreads, <span class="hljs-keyword">sizeof</span>(image));</span><br><span class="line">    <span class="hljs-keyword">pthread_t</span> *thr = <span class="hljs-built_in">calloc</span>(nthreads, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">pthread_t</span>));</span><br><span class="line"></span><br><span class="line">    image input = make_image(net-&gt;w, net-&gt;h, net-&gt;c*<span class="hljs-number">2</span>);</span><br><span class="line"></span><br><span class="line">    load_args args = &#123;<span class="hljs-number">0</span>&#125;;</span><br><span class="line">    args.w = net-&gt;w;</span><br><span class="line">    args.h = net-&gt;h;</span><br><span class="line">    <span class="hljs-comment">//args.type = IMAGE_DATA;</span></span><br><span class="line">    args.type = LETTERBOX_DATA;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span>(t = <span class="hljs-number">0</span>; t &lt; nthreads; ++t)&#123;</span><br><span class="line">        args.path = paths[i+t];</span><br><span class="line">        args.im = &amp;buf[t];</span><br><span class="line">        args.resized = &amp;buf_resized[t];</span><br><span class="line">        thr[t] = load_data_in_thread(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">double</span> start = what_time_is_it_now();</span><br><span class="line">    <span class="hljs-keyword">for</span>(i = nthreads; i &lt; m+nthreads; i += nthreads)&#123;</span><br><span class="line">        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"%d\n"</span>, i);</span><br><span class="line">        <span class="hljs-keyword">for</span>(t = <span class="hljs-number">0</span>; t &lt; nthreads &amp;&amp; i+t-nthreads &lt; m; ++t)&#123;</span><br><span class="line">            pthread_join(thr[t], <span class="hljs-number">0</span>);</span><br><span class="line">            val[t] = buf[t];</span><br><span class="line">            val_resized[t] = buf_resized[t];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span>(t = <span class="hljs-number">0</span>; t &lt; nthreads &amp;&amp; i+t &lt; m; ++t)&#123;</span><br><span class="line">            args.path = paths[i+t];</span><br><span class="line">            args.im = &amp;buf[t];</span><br><span class="line">            args.resized = &amp;buf_resized[t];</span><br><span class="line">            thr[t] = load_data_in_thread(args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span>(t = <span class="hljs-number">0</span>; t &lt; nthreads &amp;&amp; i+t-nthreads &lt; m; ++t)&#123;</span><br><span class="line">            <span class="hljs-keyword">char</span> *path = paths[i+t-nthreads];</span><br><span class="line">            <span class="hljs-keyword">char</span> *id = basecfg(path);</span><br><span class="line">            copy_cpu(net-&gt;w*net-&gt;h*net-&gt;c, val_resized[t].data, <span class="hljs-number">1</span>, input.data, <span class="hljs-number">1</span>);</span><br><span class="line">            flip_image(val_resized[t]);</span><br><span class="line">            copy_cpu(net-&gt;w*net-&gt;h*net-&gt;c, val_resized[t].data, <span class="hljs-number">1</span>, input.data + net-&gt;w*net-&gt;h*net-&gt;c, <span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">            network_predict(net, input.data);</span><br><span class="line">            <span class="hljs-keyword">int</span> w = val[t].w;</span><br><span class="line">            <span class="hljs-keyword">int</span> h = val[t].h;</span><br><span class="line">            <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;</span><br><span class="line">            detection *dets = get_network_boxes(net, w, h, thresh, <span class="hljs-number">.5</span>, <span class="hljs-built_in">map</span>, <span class="hljs-number">0</span>, &amp;num);</span><br><span class="line">            <span class="hljs-keyword">if</span> (nms) do_nms_sort(dets, num, classes, nms);</span><br><span class="line">            <span class="hljs-keyword">if</span> (coco)&#123;</span><br><span class="line">                print_cocos(fp, path, dets, num, classes, w, h);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (imagenet)&#123;</span><br><span class="line">                print_imagenet_detections(fp, i+t-nthreads+<span class="hljs-number">1</span>, dets, num, classes, w, h);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                print_detector_detections(fps, id, dets, num, classes, w, h);</span><br><span class="line">            &#125;</span><br><span class="line">            free_detections(dets, num);</span><br><span class="line">            <span class="hljs-built_in">free</span>(id);</span><br><span class="line">            free_image(val[t]);</span><br><span class="line">            free_image(val_resized[t]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; classes; ++j)&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(fps) fclose(fps[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(coco)&#123;</span><br><span class="line">        fseek(fp, <span class="hljs-number">-2</span>, SEEK_CUR); </span><br><span class="line">        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">"\n]\n"</span>);</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"Total Detection Time: %f Seconds\n"</span>, what_time_is_it_now() - start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">validate_detector</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *datacfg, <span class="hljs-keyword">char</span> *cfgfile, <span class="hljs-keyword">char</span> *weightfile, <span class="hljs-keyword">char</span> *outfile)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> j;</span><br><span class="line">    <span class="hljs-built_in">list</span> *options = read_data_cfg(datacfg);</span><br><span class="line">    <span class="hljs-keyword">char</span> *valid_images = option_find_str(options, <span class="hljs-string">"valid"</span>, <span class="hljs-string">"data/valid.list"</span>);</span><br><span class="line">    <span class="hljs-keyword">char</span> *name_list = option_find_str(options, <span class="hljs-string">"names"</span>, <span class="hljs-string">"data/voc.names"</span>);</span><br><span class="line">    <span class="hljs-keyword">char</span> *prefix = option_find_str(options, <span class="hljs-string">"results"</span>, <span class="hljs-string">"results"</span>);</span><br><span class="line">    <span class="hljs-keyword">char</span> **names = get_labels(name_list);</span><br><span class="line">    <span class="hljs-keyword">char</span> *mapf = option_find_str(options, <span class="hljs-string">"map"</span>, <span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-keyword">int</span> *<span class="hljs-built_in">map</span> = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (mapf) <span class="hljs-built_in">map</span> = read_map(mapf);</span><br><span class="line"></span><br><span class="line">    network *net = load_network(cfgfile, weightfile, <span class="hljs-number">0</span>);</span><br><span class="line">    set_batch_network(net, <span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"Learning Rate: %g, Momentum: %g, Decay: %g\n"</span>, net-&gt;learning_rate, net-&gt;momentum, net-&gt;decay);</span><br><span class="line">    srand(time(<span class="hljs-number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">list</span> *plist = get_paths(valid_images);</span><br><span class="line">    <span class="hljs-keyword">char</span> **paths = (<span class="hljs-keyword">char</span> **)list_to_array(plist);</span><br><span class="line"></span><br><span class="line">    layer l = net-&gt;layers[net-&gt;n<span class="hljs-number">-1</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> classes = l.classes;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">char</span> buff[<span class="hljs-number">1024</span>];</span><br><span class="line">    <span class="hljs-keyword">char</span> *type = option_find_str(options, <span class="hljs-string">"eval"</span>, <span class="hljs-string">"voc"</span>);</span><br><span class="line">    FILE *fp = <span class="hljs-number">0</span>;</span><br><span class="line">    FILE **fps = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> coco = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> imagenet = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>==<span class="hljs-built_in">strcmp</span>(type, <span class="hljs-string">"coco"</span>))&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(!outfile) outfile = <span class="hljs-string">"coco_results"</span>;</span><br><span class="line">        <span class="hljs-built_in">snprintf</span>(buff, <span class="hljs-number">1024</span>, <span class="hljs-string">"%s/%s.json"</span>, prefix, outfile);</span><br><span class="line">        fp = fopen(buff, <span class="hljs-string">"w"</span>);</span><br><span class="line">        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">"[\n"</span>);</span><br><span class="line">        coco = <span class="hljs-number">1</span>;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>==<span class="hljs-built_in">strcmp</span>(type, <span class="hljs-string">"imagenet"</span>))&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(!outfile) outfile = <span class="hljs-string">"imagenet-detection"</span>;</span><br><span class="line">        <span class="hljs-built_in">snprintf</span>(buff, <span class="hljs-number">1024</span>, <span class="hljs-string">"%s/%s.txt"</span>, prefix, outfile);</span><br><span class="line">        fp = fopen(buff, <span class="hljs-string">"w"</span>);</span><br><span class="line">        imagenet = <span class="hljs-number">1</span>;</span><br><span class="line">        classes = <span class="hljs-number">200</span>;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(!outfile) outfile = <span class="hljs-string">"comp4_det_test_"</span>;</span><br><span class="line">        fps = <span class="hljs-built_in">calloc</span>(classes, <span class="hljs-keyword">sizeof</span>(FILE *));</span><br><span class="line">        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; classes; ++j)&#123;</span><br><span class="line">            <span class="hljs-built_in">snprintf</span>(buff, <span class="hljs-number">1024</span>, <span class="hljs-string">"%s/%s%s.txt"</span>, prefix, outfile, names[j]);</span><br><span class="line">            fps[j] = fopen(buff, <span class="hljs-string">"w"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> m = plist-&gt;size;</span><br><span class="line">    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> t;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">float</span> thresh = <span class="hljs-number">.95</span>;</span><br><span class="line">    <span class="hljs-keyword">float</span> nms = <span class="hljs-number">.45</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> nthreads = <span class="hljs-number">4</span>;</span><br><span class="line">    image *val = <span class="hljs-built_in">calloc</span>(nthreads, <span class="hljs-keyword">sizeof</span>(image));</span><br><span class="line">    image *val_resized = <span class="hljs-built_in">calloc</span>(nthreads, <span class="hljs-keyword">sizeof</span>(image));</span><br><span class="line">    image *buf = <span class="hljs-built_in">calloc</span>(nthreads, <span class="hljs-keyword">sizeof</span>(image));</span><br><span class="line">    image *buf_resized = <span class="hljs-built_in">calloc</span>(nthreads, <span class="hljs-keyword">sizeof</span>(image));</span><br><span class="line">    <span class="hljs-keyword">pthread_t</span> *thr = <span class="hljs-built_in">calloc</span>(nthreads, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">pthread_t</span>));</span><br><span class="line"></span><br><span class="line">    load_args args = &#123;<span class="hljs-number">0</span>&#125;;</span><br><span class="line">    args.w = net-&gt;w;</span><br><span class="line">    args.h = net-&gt;h;</span><br><span class="line">    <span class="hljs-comment">//args.type = IMAGE_DATA;</span></span><br><span class="line">    args.type = LETTERBOX_DATA;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span>(t = <span class="hljs-number">0</span>; t &lt; nthreads; ++t)&#123;</span><br><span class="line">        args.path = paths[i+t];</span><br><span class="line">        args.im = &amp;buf[t];</span><br><span class="line">        args.resized = &amp;buf_resized[t];</span><br><span class="line">        thr[t] = load_data_in_thread(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">double</span> start = what_time_is_it_now();</span><br><span class="line">    <span class="hljs-keyword">for</span>(i = nthreads; i &lt; m+nthreads; i += nthreads)&#123;</span><br><span class="line">        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"%d\n"</span>, i);</span><br><span class="line">        <span class="hljs-keyword">for</span>(t = <span class="hljs-number">0</span>; t &lt; nthreads &amp;&amp; i+t-nthreads &lt; m; ++t)&#123;</span><br><span class="line">            pthread_join(thr[t], <span class="hljs-number">0</span>);</span><br><span class="line">            val[t] = buf[t];</span><br><span class="line">            val_resized[t] = buf_resized[t];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span>(t = <span class="hljs-number">0</span>; t &lt; nthreads &amp;&amp; i+t &lt; m; ++t)&#123;</span><br><span class="line">            args.path = paths[i+t];</span><br><span class="line">            args.im = &amp;buf[t];</span><br><span class="line">            args.resized = &amp;buf_resized[t];</span><br><span class="line">            thr[t] = load_data_in_thread(args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span>(t = <span class="hljs-number">0</span>; t &lt; nthreads &amp;&amp; i+t-nthreads &lt; m; ++t)&#123;</span><br><span class="line">            <span class="hljs-keyword">char</span> *path = paths[i+t-nthreads];</span><br><span class="line">            <span class="hljs-keyword">char</span> *id = basecfg(path);</span><br><span class="line">            <span class="hljs-keyword">float</span> *X = val_resized[t].data;</span><br><span class="line">            network_predict(net, X);</span><br><span class="line">            <span class="hljs-keyword">int</span> w = val[t].w;</span><br><span class="line">            <span class="hljs-keyword">int</span> h = val[t].h;</span><br><span class="line">            <span class="hljs-keyword">int</span> nboxes = <span class="hljs-number">0</span>;</span><br><span class="line">            detection *dets = get_network_boxes(net, w, h, thresh, <span class="hljs-number">.5</span>, <span class="hljs-built_in">map</span>, <span class="hljs-number">0</span>, &amp;nboxes);</span><br><span class="line">            <span class="hljs-keyword">if</span> (nms) do_nms_sort(dets, nboxes, classes, nms);</span><br><span class="line">            <span class="hljs-keyword">if</span> (coco)&#123;</span><br><span class="line">                print_cocos(fp, path, dets, nboxes, classes, w, h);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (imagenet)&#123;</span><br><span class="line">                print_imagenet_detections(fp, i+t-nthreads+<span class="hljs-number">1</span>, dets, nboxes, classes, w, h);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                print_detector_detections(fps, id, dets, nboxes, classes, w, h);</span><br><span class="line">            &#125;</span><br><span class="line">            free_detections(dets, nboxes);</span><br><span class="line">            <span class="hljs-built_in">free</span>(id);</span><br><span class="line">            free_image(val[t]);</span><br><span class="line"></span><br><span class="line">            free_image(val_resized[t]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; classes; ++j)&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(fps) fclose(fps[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(coco)&#123;</span><br><span class="line">        fseek(fp, <span class="hljs-number">-2</span>, SEEK_CUR); </span><br><span class="line">        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">"\n]\n"</span>);</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"Total Detection Time: %f Seconds\n"</span>, what_time_is_it_now() - start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">validate_detector_recall</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *datacfg, <span class="hljs-keyword">char</span> *cfgfile, <span class="hljs-keyword">char</span> *weightfile)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    network *net = load_network(cfgfile, weightfile, <span class="hljs-number">0</span>);</span><br><span class="line">    set_batch_network(net, <span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"Learning Rate: %g, Momentum: %g, Decay: %g\n"</span>, net-&gt;learning_rate, net-&gt;momentum, net-&gt;decay);</span><br><span class="line">    srand(time(<span class="hljs-number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">list</span> *options = read_data_cfg(datacfg);</span><br><span class="line">    <span class="hljs-keyword">char</span> *valid_images = option_find_str(options, <span class="hljs-string">"valid"</span>, <span class="hljs-string">"data/valid.list"</span>);</span><br><span class="line">    <span class="hljs-built_in">list</span> *plist = get_paths(valid_images);</span><br><span class="line">    <span class="hljs-keyword">char</span> **paths = (<span class="hljs-keyword">char</span> **)list_to_array(plist);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//layer l = net-&gt;layers[net-&gt;n-1];</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> j, k;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> m = plist-&gt;size;    <span class="hljs-comment">//测试的图片总数</span></span><br><span class="line">    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">float</span> thresh = <span class="hljs-number">.95</span>;</span><br><span class="line">    <span class="hljs-keyword">float</span> iou_thresh = <span class="hljs-number">.5</span>;</span><br><span class="line">    <span class="hljs-keyword">float</span> nms = <span class="hljs-number">.4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> total = <span class="hljs-number">0</span>;      <span class="hljs-comment">//实际有多少个bbox</span></span><br><span class="line">    <span class="hljs-keyword">int</span> correct = <span class="hljs-number">0</span>;    <span class="hljs-comment">//正确识别出了多少个bbox</span></span><br><span class="line">    <span class="hljs-keyword">int</span> proposals = <span class="hljs-number">0</span>;  <span class="hljs-comment">//测试集预测的bbox总数</span></span><br><span class="line">    <span class="hljs-keyword">float</span> avg_iou = <span class="hljs-number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">//printf("l.w*l.h*l.n = %d\n",l.w*l.h*l.n);</span></span><br><span class="line">    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="hljs-keyword">char</span> *path = paths[i];</span><br><span class="line">        image orig = load_image_color(path, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="line">        image sized = resize_image(orig, net-&gt;w, net-&gt;h);</span><br><span class="line">        <span class="hljs-keyword">char</span> *id = basecfg(path);</span><br><span class="line">        network_predict(net, sized.data);</span><br><span class="line">        <span class="hljs-keyword">int</span> nboxes = <span class="hljs-number">0</span>;</span><br><span class="line">        detection *dets = get_network_boxes(net, sized.w, sized.h, thresh, <span class="hljs-number">.5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, &amp;nboxes);</span><br><span class="line">        <span class="hljs-keyword">if</span> (nms) do_nms_obj(dets, nboxes, <span class="hljs-number">1</span>, nms);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">char</span> labelpath[<span class="hljs-number">4096</span>];</span><br><span class="line">        find_replace(path, <span class="hljs-string">"images"</span>, <span class="hljs-string">"labels"</span>, labelpath);</span><br><span class="line">        find_replace(labelpath, <span class="hljs-string">"JPEGImages"</span>, <span class="hljs-string">"labels"</span>, labelpath);</span><br><span class="line">        find_replace(labelpath, <span class="hljs-string">".jpg"</span>, <span class="hljs-string">".txt"</span>, labelpath);</span><br><span class="line">        find_replace(labelpath, <span class="hljs-string">".JPEG"</span>, <span class="hljs-string">".txt"</span>, labelpath);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">int</span> num_labels = <span class="hljs-number">0</span>;     <span class="hljs-comment">//测试集实际的标注框数量</span></span><br><span class="line">        box_label *truth = read_boxes(labelpath, &amp;num_labels);</span><br><span class="line">        <span class="hljs-keyword">for</span>(k = <span class="hljs-number">0</span>; k &lt; nboxes; ++k)&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(dets[k].objectness &gt; thresh)&#123;</span><br><span class="line">                ++proposals;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; num_labels; ++j) &#123;</span><br><span class="line">            ++total;</span><br><span class="line">            box t = &#123;truth[j].x, truth[j].y, truth[j].w, truth[j].h&#125;;</span><br><span class="line">            <span class="hljs-comment">//printf("truth x=%f, y=%f, w=%f,h=%f\n",truth[j].x,truth[j].y,truth[j].w,truth[j].h);</span></span><br><span class="line">            <span class="hljs-keyword">float</span> best_iou = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-comment">//对每一个标注的框</span></span><br><span class="line">            <span class="hljs-keyword">for</span>(k = <span class="hljs-number">0</span>; k &lt; nboxes; ++k)&#123;</span><br><span class="line">            <span class="hljs-comment">//for(k = 0; k &lt; l.w*l.h*l.n; ++k)&#123;</span></span><br><span class="line">                <span class="hljs-keyword">float</span> iou = box_iou(dets[k].bbox, t);</span><br><span class="line">                <span class="hljs-comment">//printf("predict=%f iou=%f x=%f, y=%f, w=%f,h=%f\n",dets[k].objectness,iou,dets[k].bbox.x,dets[k].bbox.y,dets[k].bbox.w,dets[k].bbox.h);</span></span><br><span class="line">                <span class="hljs-keyword">if</span>(dets[k].objectness &gt; thresh &amp;&amp; iou &gt; best_iou)&#123;</span><br><span class="line">                    best_iou = iou;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">//printf("best_iou=%f\n",best_iou);</span></span><br><span class="line">            avg_iou += best_iou;</span><br><span class="line">            <span class="hljs-keyword">if</span>(best_iou &gt; iou_thresh)&#123;</span><br><span class="line">                ++correct;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"%5d %5d %5d\tRPs/Img: %.2f\tIOU: %.2f%%\tRecall:%.2f%%\n"</span>, i, correct, total, (<span class="hljs-keyword">float</span>)proposals/(i+<span class="hljs-number">1</span>), avg_iou*<span class="hljs-number">100</span>/total, <span class="hljs-number">100.</span>*correct/total);</span><br><span class="line">        <span class="hljs-built_in">free</span>(id);</span><br><span class="line">        free_image(orig);</span><br><span class="line">        free_image(sized);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_detector</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *datacfg, <span class="hljs-keyword">char</span> *cfgfile, <span class="hljs-keyword">char</span> *weightfile, <span class="hljs-keyword">char</span> *filename, <span class="hljs-keyword">float</span> thresh, <span class="hljs-keyword">float</span> hier_thresh, <span class="hljs-keyword">char</span> *outfile, <span class="hljs-keyword">int</span> fullscreen)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">list</span> *options = read_data_cfg(datacfg); <span class="hljs-comment">//options存储分类的标签等基本训练信息</span></span><br><span class="line">    <span class="hljs-keyword">char</span> *name_list = option_find_str(options, <span class="hljs-string">"names"</span>, <span class="hljs-string">"data/names.list"</span>); <span class="hljs-comment">//抽取标签名称</span></span><br><span class="line">    <span class="hljs-keyword">char</span> **names = get_labels(name_list);</span><br><span class="line"></span><br><span class="line">    image **alphabet = load_alphabet(); <span class="hljs-comment">//加载位于data/labels下的字符图片，用于显示矩形框名称</span></span><br><span class="line">    network *net = load_network(cfgfile, weightfile, <span class="hljs-number">0</span>);    <span class="hljs-comment">//用netweork.h中自定义的network结构体存储模型文件,函数位于parser.c</span></span><br><span class="line">    set_batch_network(net, <span class="hljs-number">1</span>);</span><br><span class="line">    srand(<span class="hljs-number">2222222</span>);</span><br><span class="line">    <span class="hljs-keyword">double</span> start_time;</span><br><span class="line">    <span class="hljs-keyword">double</span> end_time;</span><br><span class="line">    <span class="hljs-keyword">double</span> img_time;</span><br><span class="line">    <span class="hljs-keyword">double</span> sum_time=<span class="hljs-number">0.0</span>;</span><br><span class="line">    <span class="hljs-keyword">char</span> buff[<span class="hljs-number">256</span>];</span><br><span class="line">    <span class="hljs-keyword">char</span> *input = buff;</span><br><span class="line">    <span class="hljs-keyword">float</span> nms=<span class="hljs-number">.45</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;</span><br><span class="line">        <span class="hljs-comment">//读取结构对应的权重文件</span></span><br><span class="line">        <span class="hljs-keyword">if</span>(filename)&#123;</span><br><span class="line">            <span class="hljs-built_in">strncpy</span>(input, filename, <span class="hljs-number">256</span>);</span><br><span class="line">            image im = load_image_color(input,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);</span><br><span class="line">            image sized = letterbox_image(im, net-&gt;w, net-&gt;h);  <span class="hljs-comment">//输入图片大小经过resize至输入大小</span></span><br><span class="line">            <span class="hljs-comment">//image sized = resize_image(im, net-&gt;w, net-&gt;h);</span></span><br><span class="line">            <span class="hljs-comment">//image sized2 = resize_max(im, net-&gt;w);</span></span><br><span class="line">            <span class="hljs-comment">//image sized = crop_image(sized2, -((net-&gt;w - sized2.w)/2), -((net-&gt;h - sized2.h)/2), net-&gt;w, net-&gt;h);</span></span><br><span class="line">            <span class="hljs-comment">//resize_network(net, sized.w, sized.h);</span></span><br><span class="line">            layer l = net-&gt;layers[net-&gt;n<span class="hljs-number">-1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">float</span> *X = sized.data;  <span class="hljs-comment">//X指向图片的data元素，即图片像素</span></span><br><span class="line">            start_time=what_time_is_it_now();</span><br><span class="line">            network_predict(net, X);    <span class="hljs-comment">//network_predict函数负责预测当前图片的数据X</span></span><br><span class="line">            end_time=what_time_is_it_now();</span><br><span class="line">            img_time= end_time - start_time;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s: Predicted in %f seconds.\n"</span>, input, img_time);</span><br><span class="line">            <span class="hljs-keyword">int</span> nboxes = <span class="hljs-number">0</span>;</span><br><span class="line">            detection *dets = get_network_boxes(net, im.w, im.h, thresh, hier_thresh, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, &amp;nboxes);</span><br><span class="line">            <span class="hljs-comment">//printf("%d\n", nboxes);</span></span><br><span class="line">            <span class="hljs-comment">//if (nms) do_nms_obj(boxes, probs, l.w*l.h*l.n, l.classes, nms);</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (nms) do_nms_sort(dets, nboxes, l.classes, nms);</span><br><span class="line">            draw_detections(im, dets, nboxes, thresh, names, alphabet, l.classes);</span><br><span class="line">            free_detections(dets, nboxes);</span><br><span class="line">            <span class="hljs-keyword">if</span>(outfile)</span><br><span class="line">             &#123;</span><br><span class="line">                save_image(im, outfile);</span><br><span class="line">             &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">                <span class="hljs-comment">//save_image(im, "predictions");</span></span><br><span class="line">                <span class="hljs-keyword">char</span> image[<span class="hljs-number">2048</span>];</span><br><span class="line">                <span class="hljs-built_in">sprintf</span>(image,<span class="hljs-string">"./data/predict/%s"</span>,GetFilename(filename));</span><br><span class="line">                save_image(im,image);</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"predict %s successfully!\n"</span>,GetFilename(filename));</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> OPENCV</span></span><br><span class="line">                cvNamedWindow(<span class="hljs-string">"predictions"</span>, CV_WINDOW_NORMAL);</span><br><span class="line">                <span class="hljs-keyword">if</span>(fullscreen)&#123;</span><br><span class="line">                cvSetWindowProperty(<span class="hljs-string">"predictions"</span>, CV_WND_PROP_FULLSCREEN, CV_WINDOW_FULLSCREEN);</span><br><span class="line">                &#125;</span><br><span class="line">                show_image(im, <span class="hljs-string">"predictions"</span>);</span><br><span class="line">                cvWaitKey(<span class="hljs-number">0</span>);</span><br><span class="line">                cvDestroyAllWindows();</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></span><br><span class="line">            &#125;</span><br><span class="line">            free_image(im);</span><br><span class="line">            free_image(sized);</span><br><span class="line">            <span class="hljs-keyword">if</span> (filename) <span class="hljs-keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Enter Image Path: "</span>);</span><br><span class="line">            fflush(<span class="hljs-built_in">stdout</span>);</span><br><span class="line">            input = fgets(input, <span class="hljs-number">256</span>, <span class="hljs-built_in">stdin</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span>(!input) <span class="hljs-keyword">return</span>;</span><br><span class="line">            strtok(input, <span class="hljs-string">"\n"</span>);</span><br><span class="line">    </span><br><span class="line">            <span class="hljs-built_in">list</span> *plist = get_paths(input);</span><br><span class="line">            <span class="hljs-keyword">char</span> **paths = (<span class="hljs-keyword">char</span> **)list_to_array(plist);</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Start Testing!\n"</span>);</span><br><span class="line">            <span class="hljs-keyword">int</span> m = plist-&gt;size;</span><br><span class="line">            <span class="hljs-keyword">if</span>(access(<span class="hljs-string">"/aseit-data/XCM_WorkSpace/darknet_test/darknet/test_out"</span>,<span class="hljs-number">0</span>)==<span class="hljs-number">-1</span>)<span class="hljs-comment">//修改成自己的路径</span></span><br><span class="line">            &#123;</span><br><span class="line">              <span class="hljs-keyword">if</span> (mkdir(<span class="hljs-string">"/aseit-data/XCM_WorkSpace/darknet_test/darknet/test_out"</span>,<span class="hljs-number">0777</span>))<span class="hljs-comment">//修改成自己的路径</span></span><br><span class="line">               &#123;</span><br><span class="line">                 <span class="hljs-built_in">printf</span>(<span class="hljs-string">"creat file bag failed!!!"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">                <span class="hljs-keyword">char</span> *path = paths[i];</span><br><span class="line">                image im = load_image_color(path,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);</span><br><span class="line">                image sized = letterbox_image(im, net-&gt;w, net-&gt;h);  <span class="hljs-comment">//输入图片大小经过resize至输入大小</span></span><br><span class="line">                <span class="hljs-comment">//image sized = resize_image(im, net-&gt;w, net-&gt;h);</span></span><br><span class="line">                <span class="hljs-comment">//image sized2 = resize_max(im, net-&gt;w);</span></span><br><span class="line">                <span class="hljs-comment">//image sized = crop_image(sized2, -((net-&gt;w - sized2.w)/2), -((net-&gt;h - sized2.h)/2), net-&gt;w, net-&gt;h);</span></span><br><span class="line">                <span class="hljs-comment">//resize_network(net, sized.w, sized.h);</span></span><br><span class="line">                layer l = net-&gt;layers[net-&gt;n<span class="hljs-number">-1</span>];</span><br><span class="line"></span><br><span class="line">                <span class="hljs-keyword">float</span> *X = sized.data;  <span class="hljs-comment">//X指向图片的data元素，即图片像素</span></span><br><span class="line">                start_time = what_time_is_it_now();</span><br><span class="line">                network_predict(net, X);    <span class="hljs-comment">//network_predict函数负责预测当前图片的数据X</span></span><br><span class="line">                end_time = what_time_is_it_now();</span><br><span class="line">                img_time = end_time - start_time;</span><br><span class="line">                sum_time = sum_time+img_time;</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Try Very Hard:"</span>);</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s: Predicted in %f seconds.\n"</span>, path, img_time);</span><br><span class="line">                <span class="hljs-keyword">int</span> nboxes = <span class="hljs-number">0</span>;</span><br><span class="line">                detection *dets = get_network_boxes(net, im.w, im.h, thresh, hier_thresh, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, &amp;nboxes);</span><br><span class="line">                <span class="hljs-comment">//printf("%d\n", nboxes);</span></span><br><span class="line">                <span class="hljs-comment">//if (nms) do_nms_obj(boxes, probs, l.w*l.h*l.n, l.classes, nms);</span></span><br><span class="line">                <span class="hljs-keyword">if</span> (nms) do_nms_sort(dets, nboxes, l.classes, nms);</span><br><span class="line">                draw_detections(im, dets, nboxes, thresh, names, alphabet, l.classes);</span><br><span class="line">                free_detections(dets, nboxes);</span><br><span class="line">                <span class="hljs-keyword">if</span>(outfile)&#123;</span><br><span class="line">                    save_image(im, outfile);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">                    <span class="hljs-keyword">char</span> b[<span class="hljs-number">2048</span>];</span><br><span class="line">                    <span class="hljs-built_in">sprintf</span>(b,<span class="hljs-string">"/aseit-data/XCM_WorkSpace/darknet_test/darknet/test_out/%s"</span>,GetFilename(path));<span class="hljs-comment">//修改成自己的路径</span></span><br><span class="line">                     </span><br><span class="line">                    save_image(im, b);</span><br><span class="line">                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"save %s successfully!\n"</span>,GetFilename(path));</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> OPENCV</span></span><br><span class="line">                    cvNamedWindow(<span class="hljs-string">"predictions"</span>, CV_WINDOW_NORMAL);</span><br><span class="line">                    <span class="hljs-keyword">if</span>(fullscreen)&#123;</span><br><span class="line">                        cvSetWindowProperty(<span class="hljs-string">"predictions"</span>, CV_WND_PROP_FULLSCREEN, CV_WINDOW_FULLSCREEN);</span><br><span class="line">                    &#125;</span><br><span class="line">                    show_image(im, <span class="hljs-string">"predictions"</span>);</span><br><span class="line">                    cvWaitKey(<span class="hljs-number">0</span>);</span><br><span class="line">                    cvDestroyAllWindows();</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        free_image(im);</span><br><span class="line">        free_image(sized);</span><br><span class="line">        <span class="hljs-keyword">if</span> (filename) <span class="hljs-keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"fps: %.2f   totall image %d\n"</span>,(<span class="hljs-keyword">float</span>)m/sum_time,m);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">void test_detector(char *datacfg, char *cfgfile, char *weightfile, char *filename, float thresh, float hier_thresh, char *outfile, int fullscreen)</span></span><br><span class="line"><span class="hljs-comment">&#123;</span></span><br><span class="line"><span class="hljs-comment">    list *options = read_data_cfg(datacfg);</span></span><br><span class="line"><span class="hljs-comment">    char *name_list = option_find_str(options, "names", "data/names.list");</span></span><br><span class="line"><span class="hljs-comment">    char **names = get_labels(name_list);</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">    image **alphabet = load_alphabet();</span></span><br><span class="line"><span class="hljs-comment">    network *net = load_network(cfgfile, weightfile, 0);</span></span><br><span class="line"><span class="hljs-comment">    set_batch_network(net, 1);</span></span><br><span class="line"><span class="hljs-comment">    srand(2222222);</span></span><br><span class="line"><span class="hljs-comment">    double time;</span></span><br><span class="line"><span class="hljs-comment">    char buff[256];</span></span><br><span class="line"><span class="hljs-comment">    char *input = buff;</span></span><br><span class="line"><span class="hljs-comment">    float nms=.45;</span></span><br><span class="line"><span class="hljs-comment">    while(1)&#123;</span></span><br><span class="line"><span class="hljs-comment">        if(filename)&#123;</span></span><br><span class="line"><span class="hljs-comment">            strncpy(input, filename, 256);</span></span><br><span class="line"><span class="hljs-comment">        &#125; else &#123;</span></span><br><span class="line"><span class="hljs-comment">            printf("Enter Image Path: ");</span></span><br><span class="line"><span class="hljs-comment">            fflush(stdout);</span></span><br><span class="line"><span class="hljs-comment">            input = fgets(input, 256, stdin);</span></span><br><span class="line"><span class="hljs-comment">            if(!input) return;</span></span><br><span class="line"><span class="hljs-comment">            strtok(input, "\n");</span></span><br><span class="line"><span class="hljs-comment">        &#125;</span></span><br><span class="line"><span class="hljs-comment">        image im = load_image_color(input,0,0);</span></span><br><span class="line"><span class="hljs-comment">        image sized = letterbox_image(im, net-&gt;w, net-&gt;h);</span></span><br><span class="line"><span class="hljs-comment">        //image sized = resize_image(im, net-&gt;w, net-&gt;h);</span></span><br><span class="line"><span class="hljs-comment">        //image sized2 = resize_max(im, net-&gt;w);</span></span><br><span class="line"><span class="hljs-comment">        //image sized = crop_image(sized2, -((net-&gt;w - sized2.w)/2), -((net-&gt;h - sized2.h)/2), net-&gt;w, net-&gt;h);</span></span><br><span class="line"><span class="hljs-comment">        //resize_network(net, sized.w, sized.h);</span></span><br><span class="line"><span class="hljs-comment">        layer l = net-&gt;layers[net-&gt;n-1];</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">        float *X = sized.data;</span></span><br><span class="line"><span class="hljs-comment">        time=what_time_is_it_now();</span></span><br><span class="line"><span class="hljs-comment">        network_predict(net, X);</span></span><br><span class="line"><span class="hljs-comment">        printf("%s: Predicted in %f seconds.\n", input, what_time_is_it_now()-time);</span></span><br><span class="line"><span class="hljs-comment">        int nboxes = 0;</span></span><br><span class="line"><span class="hljs-comment">        detection *dets = get_network_boxes(net, im.w, im.h, thresh, hier_thresh, 0, 1, &amp;nboxes);</span></span><br><span class="line"><span class="hljs-comment">        //printf("%d\n", nboxes);</span></span><br><span class="line"><span class="hljs-comment">        //if (nms) do_nms_obj(boxes, probs, l.w*l.h*l.n, l.classes, nms);</span></span><br><span class="line"><span class="hljs-comment">        if (nms) do_nms_sort(dets, nboxes, l.classes, nms);</span></span><br><span class="line"><span class="hljs-comment">        draw_detections(im, dets, nboxes, thresh, names, alphabet, l.classes);</span></span><br><span class="line"><span class="hljs-comment">        free_detections(dets, nboxes);</span></span><br><span class="line"><span class="hljs-comment">        if(outfile)&#123;</span></span><br><span class="line"><span class="hljs-comment">            save_image(im, outfile);</span></span><br><span class="line"><span class="hljs-comment">        &#125;</span></span><br><span class="line"><span class="hljs-comment">        else&#123;</span></span><br><span class="line"><span class="hljs-comment">            save_image(im, "predictions");</span></span><br><span class="line"><span class="hljs-comment">#ifdef OPENCV</span></span><br><span class="line"><span class="hljs-comment">            make_window("predictions", 512, 512, 0);</span></span><br><span class="line"><span class="hljs-comment">            show_image(im, "predictions", 0);</span></span><br><span class="line"><span class="hljs-comment">#endif</span></span><br><span class="line"><span class="hljs-comment">        &#125;</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">        free_image(im);</span></span><br><span class="line"><span class="hljs-comment">        free_image(sized);</span></span><br><span class="line"><span class="hljs-comment">        if (filename) break;</span></span><br><span class="line"><span class="hljs-comment">    &#125;</span></span><br><span class="line"><span class="hljs-comment">&#125;</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">void censor_detector(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename, int class, float thresh, int skip)</span></span><br><span class="line"><span class="hljs-comment">&#123;</span></span><br><span class="line"><span class="hljs-comment">#ifdef OPENCV</span></span><br><span class="line"><span class="hljs-comment">    char *base = basecfg(cfgfile);</span></span><br><span class="line"><span class="hljs-comment">    network *net = load_network(cfgfile, weightfile, 0);</span></span><br><span class="line"><span class="hljs-comment">    set_batch_network(net, 1);</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">    srand(2222222);</span></span><br><span class="line"><span class="hljs-comment">    CvCapture * cap;</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">    int w = 1280;</span></span><br><span class="line"><span class="hljs-comment">    int h = 720;</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">    if(filename)&#123;</span></span><br><span class="line"><span class="hljs-comment">        cap = cvCaptureFromFile(filename);</span></span><br><span class="line"><span class="hljs-comment">    &#125;else&#123;</span></span><br><span class="line"><span class="hljs-comment">        cap = cvCaptureFromCAM(cam_index);</span></span><br><span class="line"><span class="hljs-comment">    &#125;</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">    if(w)&#123;</span></span><br><span class="line"><span class="hljs-comment">        cvSetCaptureProperty(cap, CV_CAP_PROP_FRAME_WIDTH, w);</span></span><br><span class="line"><span class="hljs-comment">    &#125;</span></span><br><span class="line"><span class="hljs-comment">    if(h)&#123;</span></span><br><span class="line"><span class="hljs-comment">        cvSetCaptureProperty(cap, CV_CAP_PROP_FRAME_HEIGHT, h);</span></span><br><span class="line"><span class="hljs-comment">    &#125;</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">    if(!cap) error("Couldn't connect to webcam.\n");</span></span><br><span class="line"><span class="hljs-comment">    cvNamedWindow(base, CV_WINDOW_NORMAL); </span></span><br><span class="line"><span class="hljs-comment">    cvResizeWindow(base, 512, 512);</span></span><br><span class="line"><span class="hljs-comment">    float fps = 0;</span></span><br><span class="line"><span class="hljs-comment">    int i;</span></span><br><span class="line"><span class="hljs-comment">    float nms = .45;</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">    while(1)&#123;</span></span><br><span class="line"><span class="hljs-comment">        image in = get_image_from_stream(cap);</span></span><br><span class="line"><span class="hljs-comment">        //image in_s = resize_image(in, net-&gt;w, net-&gt;h);</span></span><br><span class="line"><span class="hljs-comment">        image in_s = letterbox_image(in, net-&gt;w, net-&gt;h);</span></span><br><span class="line"><span class="hljs-comment">        layer l = net-&gt;layers[net-&gt;n-1];</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">        float *X = in_s.data;</span></span><br><span class="line"><span class="hljs-comment">        network_predict(net, X);</span></span><br><span class="line"><span class="hljs-comment">        int nboxes = 0;</span></span><br><span class="line"><span class="hljs-comment">        detection *dets = get_network_boxes(net, in.w, in.h, thresh, 0, 0, 0, &amp;nboxes);</span></span><br><span class="line"><span class="hljs-comment">        //if (nms) do_nms_obj(boxes, probs, l.w*l.h*l.n, l.classes, nms);</span></span><br><span class="line"><span class="hljs-comment">        if (nms) do_nms_sort(dets, nboxes, l.classes, nms);</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">        for(i = 0; i &lt; nboxes; ++i)&#123;</span></span><br><span class="line"><span class="hljs-comment">            if(dets[i].prob[class] &gt; thresh)&#123;</span></span><br><span class="line"><span class="hljs-comment">                box b = dets[i].bbox;</span></span><br><span class="line"><span class="hljs-comment">                int left  = b.x-b.w/2.;</span></span><br><span class="line"><span class="hljs-comment">                int top   = b.y-b.h/2.;</span></span><br><span class="line"><span class="hljs-comment">                censor_image(in, left, top, b.w, b.h);</span></span><br><span class="line"><span class="hljs-comment">            &#125;</span></span><br><span class="line"><span class="hljs-comment">        &#125;</span></span><br><span class="line"><span class="hljs-comment">        show_image(in, base);</span></span><br><span class="line"><span class="hljs-comment">        cvWaitKey(10);</span></span><br><span class="line"><span class="hljs-comment">        free_detections(dets, nboxes);</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">        free_image(in_s);</span></span><br><span class="line"><span class="hljs-comment">        free_image(in);</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">        float curr = 0;</span></span><br><span class="line"><span class="hljs-comment">        fps = .9*fps + .1*curr;</span></span><br><span class="line"><span class="hljs-comment">        for(i = 0; i &lt; skip; ++i)&#123;</span></span><br><span class="line"><span class="hljs-comment">            image in = get_image_from_stream(cap);</span></span><br><span class="line"><span class="hljs-comment">            free_image(in);</span></span><br><span class="line"><span class="hljs-comment">        &#125;</span></span><br><span class="line"><span class="hljs-comment">    &#125;</span></span><br><span class="line"><span class="hljs-comment">    #endif</span></span><br><span class="line"><span class="hljs-comment">&#125;</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">void extract_detector(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename, int class, float thresh, int skip)</span></span><br><span class="line"><span class="hljs-comment">&#123;</span></span><br><span class="line"><span class="hljs-comment">#ifdef OPENCV</span></span><br><span class="line"><span class="hljs-comment">    char *base = basecfg(cfgfile);</span></span><br><span class="line"><span class="hljs-comment">    network *net = load_network(cfgfile, weightfile, 0);</span></span><br><span class="line"><span class="hljs-comment">    set_batch_network(net, 1);</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">    srand(2222222);</span></span><br><span class="line"><span class="hljs-comment">    CvCapture * cap;</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">    int w = 1280;</span></span><br><span class="line"><span class="hljs-comment">    int h = 720;</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">    if(filename)&#123;</span></span><br><span class="line"><span class="hljs-comment">        cap = cvCaptureFromFile(filename);</span></span><br><span class="line"><span class="hljs-comment">    &#125;else&#123;</span></span><br><span class="line"><span class="hljs-comment">        cap = cvCaptureFromCAM(cam_index);</span></span><br><span class="line"><span class="hljs-comment">    &#125;</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">    if(w)&#123;</span></span><br><span class="line"><span class="hljs-comment">        cvSetCaptureProperty(cap, CV_CAP_PROP_FRAME_WIDTH, w);</span></span><br><span class="line"><span class="hljs-comment">    &#125;</span></span><br><span class="line"><span class="hljs-comment">    if(h)&#123;</span></span><br><span class="line"><span class="hljs-comment">        cvSetCaptureProperty(cap, CV_CAP_PROP_FRAME_HEIGHT, h);</span></span><br><span class="line"><span class="hljs-comment">    &#125;</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">    if(!cap) error("Couldn't connect to webcam.\n");</span></span><br><span class="line"><span class="hljs-comment">    cvNamedWindow(base, CV_WINDOW_NORMAL); </span></span><br><span class="line"><span class="hljs-comment">    cvResizeWindow(base, 512, 512);</span></span><br><span class="line"><span class="hljs-comment">    float fps = 0;</span></span><br><span class="line"><span class="hljs-comment">    int i;</span></span><br><span class="line"><span class="hljs-comment">    int count = 0;</span></span><br><span class="line"><span class="hljs-comment">    float nms = .45;</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">    while(1)&#123;</span></span><br><span class="line"><span class="hljs-comment">        image in = get_image_from_stream(cap);</span></span><br><span class="line"><span class="hljs-comment">        //image in_s = resize_image(in, net-&gt;w, net-&gt;h);</span></span><br><span class="line"><span class="hljs-comment">        image in_s = letterbox_image(in, net-&gt;w, net-&gt;h);</span></span><br><span class="line"><span class="hljs-comment">        layer l = net-&gt;layers[net-&gt;n-1];</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">        show_image(in, base);</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">        int nboxes = 0;</span></span><br><span class="line"><span class="hljs-comment">        float *X = in_s.data;</span></span><br><span class="line"><span class="hljs-comment">        network_predict(net, X);</span></span><br><span class="line"><span class="hljs-comment">        detection *dets = get_network_boxes(net, in.w, in.h, thresh, 0, 0, 1, &amp;nboxes);</span></span><br><span class="line"><span class="hljs-comment">        //if (nms) do_nms_obj(boxes, probs, l.w*l.h*l.n, l.classes, nms);</span></span><br><span class="line"><span class="hljs-comment">        if (nms) do_nms_sort(dets, nboxes, l.classes, nms);</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">        for(i = 0; i &lt; nboxes; ++i)&#123;</span></span><br><span class="line"><span class="hljs-comment">            if(dets[i].prob[class] &gt; thresh)&#123;</span></span><br><span class="line"><span class="hljs-comment">                box b = dets[i].bbox;</span></span><br><span class="line"><span class="hljs-comment">                int size = b.w*in.w &gt; b.h*in.h ? b.w*in.w : b.h*in.h;</span></span><br><span class="line"><span class="hljs-comment">                int dx  = b.x*in.w-size/2.;</span></span><br><span class="line"><span class="hljs-comment">                int dy  = b.y*in.h-size/2.;</span></span><br><span class="line"><span class="hljs-comment">                image bim = crop_image(in, dx, dy, size, size);</span></span><br><span class="line"><span class="hljs-comment">                char buff[2048];</span></span><br><span class="line"><span class="hljs-comment">                sprintf(buff, "results/extract/%07d", count);</span></span><br><span class="line"><span class="hljs-comment">                ++count;</span></span><br><span class="line"><span class="hljs-comment">                save_image(bim, buff);</span></span><br><span class="line"><span class="hljs-comment">                free_image(bim);</span></span><br><span class="line"><span class="hljs-comment">            &#125;</span></span><br><span class="line"><span class="hljs-comment">        &#125;</span></span><br><span class="line"><span class="hljs-comment">        free_detections(dets, nboxes);</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">        free_image(in_s);</span></span><br><span class="line"><span class="hljs-comment">        free_image(in);</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">        float curr = 0;</span></span><br><span class="line"><span class="hljs-comment">        fps = .9*fps + .1*curr;</span></span><br><span class="line"><span class="hljs-comment">        for(i = 0; i &lt; skip; ++i)&#123;</span></span><br><span class="line"><span class="hljs-comment">            image in = get_image_from_stream(cap);</span></span><br><span class="line"><span class="hljs-comment">            free_image(in);</span></span><br><span class="line"><span class="hljs-comment">        &#125;</span></span><br><span class="line"><span class="hljs-comment">    &#125;</span></span><br><span class="line"><span class="hljs-comment">    #endif</span></span><br><span class="line"><span class="hljs-comment">&#125;</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">void network_detect(network *net, image im, float thresh, float hier_thresh, float nms, detection *dets)</span></span><br><span class="line"><span class="hljs-comment">&#123;</span></span><br><span class="line"><span class="hljs-comment">    network_predict_image(net, im);</span></span><br><span class="line"><span class="hljs-comment">    layer l = net-&gt;layers[net-&gt;n-1];</span></span><br><span class="line"><span class="hljs-comment">    int nboxes = num_boxes(net);</span></span><br><span class="line"><span class="hljs-comment">    fill_network_boxes(net, im.w, im.h, thresh, hier_thresh, 0, 0, dets);</span></span><br><span class="line"><span class="hljs-comment">    if (nms) do_nms_sort(dets, nboxes, l.classes, nms);</span></span><br><span class="line"><span class="hljs-comment">&#125;</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//  ./darknet [xxx]中如果命令如果第二个xxx参数是detector，则调用这个</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run_detector</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">char</span> *prefix = find_char_arg(argc, argv, <span class="hljs-string">"-prefix"</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">//寻找是否有参数prefix, 默认参数0，argv为二维数组，存储了参数字符串</span></span><br><span class="line">    <span class="hljs-keyword">float</span> thresh = find_float_arg(argc, argv, <span class="hljs-string">"-thresh"</span>, <span class="hljs-number">.5</span>);   <span class="hljs-comment">//寻找是否有参数thresh，thresh为输出的阈值,默认参数0.24</span></span><br><span class="line">    <span class="hljs-keyword">float</span> hier_thresh = find_float_arg(argc, argv, <span class="hljs-string">"-hier"</span>, <span class="hljs-number">.5</span>);    <span class="hljs-comment">//寻找是否有参数hier_thresh,默认0.5</span></span><br><span class="line">    <span class="hljs-keyword">int</span> cam_index = find_int_arg(argc, argv, <span class="hljs-string">"-c"</span>, <span class="hljs-number">0</span>);  <span class="hljs-comment">//寻找是否有参数c，默认0</span></span><br><span class="line">    <span class="hljs-keyword">int</span> frame_skip = find_int_arg(argc, argv, <span class="hljs-string">"-s"</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">//寻找是否有参数s，默认0</span></span><br><span class="line">    <span class="hljs-keyword">int</span> avg = find_int_arg(argc, argv, <span class="hljs-string">"-avg"</span>, <span class="hljs-number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">//如果输入参数小于4个，输出正确语法如何使用</span></span><br><span class="line">    <span class="hljs-comment">//printf 等价于 fprintf(stdout, ...)，这里stderr和stdout默认输出设备都是屏幕，但是stderr一般指标准出错输入设备 </span></span><br><span class="line">    <span class="hljs-keyword">if</span>(argc &lt; <span class="hljs-number">4</span>)&#123;</span><br><span class="line">        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"usage: %s %s [train/test/valid] [cfg] [weights (optional)]\n"</span>, argv[<span class="hljs-number">0</span>], argv[<span class="hljs-number">1</span>]);</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">char</span> *gpu_list = find_char_arg(argc, argv, <span class="hljs-string">"-gpus"</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">//寻找是否有参数gpus，默认0</span></span><br><span class="line">    <span class="hljs-keyword">char</span> *outfile = find_char_arg(argc, argv, <span class="hljs-string">"-out"</span>, <span class="hljs-number">0</span>);   <span class="hljs-comment">//检查是否指定GPU运算,默认0</span></span><br><span class="line">    <span class="hljs-keyword">int</span> *gpus = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> gpu = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> ngpus = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(gpu_list)&#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>, gpu_list);</span><br><span class="line">        <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(gpu_list);</span><br><span class="line">        ngpus = <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> i;</span><br><span class="line">        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; len; ++i)&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (gpu_list[i] == <span class="hljs-string">','</span>) ++ngpus;</span><br><span class="line">        &#125;</span><br><span class="line">        gpus = <span class="hljs-built_in">calloc</span>(ngpus, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));</span><br><span class="line">        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; ngpus; ++i)&#123;</span><br><span class="line">            gpus[i] = atoi(gpu_list);</span><br><span class="line">            gpu_list = <span class="hljs-built_in">strchr</span>(gpu_list, <span class="hljs-string">','</span>)+<span class="hljs-number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        gpu = gpu_index;</span><br><span class="line">        gpus = &amp;gpu;</span><br><span class="line">        ngpus = <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> clear = find_arg(argc, argv, <span class="hljs-string">"-clear"</span>); <span class="hljs-comment">//检查clear参数</span></span><br><span class="line">    <span class="hljs-keyword">int</span> fullscreen = find_arg(argc, argv, <span class="hljs-string">"-fullscreen"</span>);</span><br><span class="line">    <span class="hljs-keyword">int</span> width = find_int_arg(argc, argv, <span class="hljs-string">"-w"</span>, <span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-keyword">int</span> height = find_int_arg(argc, argv, <span class="hljs-string">"-h"</span>, <span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-keyword">int</span> fps = find_int_arg(argc, argv, <span class="hljs-string">"-fps"</span>, <span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-comment">//int class = find_int_arg(argc, argv, "-class", 0);</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">char</span> *datacfg = argv[<span class="hljs-number">3</span>];   <span class="hljs-comment">//存data文件路径</span></span><br><span class="line">    <span class="hljs-keyword">char</span> *cfg = argv[<span class="hljs-number">4</span>];    <span class="hljs-comment">//存cfg文件路径</span></span><br><span class="line">    <span class="hljs-keyword">char</span> *weights = (argc &gt; <span class="hljs-number">5</span>) ? argv[<span class="hljs-number">5</span>] : <span class="hljs-number">0</span>;   <span class="hljs-comment">//存weight文件路径</span></span><br><span class="line">    <span class="hljs-keyword">char</span> *filename = (argc &gt; <span class="hljs-number">6</span>) ? argv[<span class="hljs-number">6</span>]: <span class="hljs-number">0</span>;   <span class="hljs-comment">//存待检测文件路径</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">//根据第三个参数的内容，调用不同的函数，并传入之前解析的参数</span></span><br><span class="line">    <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>==<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">2</span>], <span class="hljs-string">"test"</span>)) test_detector(datacfg, cfg, weights, filename, thresh, hier_thresh, outfile, fullscreen);</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>==<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">2</span>], <span class="hljs-string">"train"</span>)) train_detector(datacfg, cfg, weights, gpus, ngpus, clear);</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>==<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">2</span>], <span class="hljs-string">"valid"</span>)) validate_detector(datacfg, cfg, weights, outfile);</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>==<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">2</span>], <span class="hljs-string">"valid2"</span>)) validate_detector_flip(datacfg, cfg, weights, outfile);</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>==<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">2</span>], <span class="hljs-string">"recall"</span>)) validate_detector_recall(datacfg, cfg, weights);</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>==<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">2</span>], <span class="hljs-string">"demo"</span>)) &#123;</span><br><span class="line">        <span class="hljs-built_in">list</span> *options = read_data_cfg(datacfg);</span><br><span class="line">        <span class="hljs-keyword">int</span> classes = option_find_int(options, <span class="hljs-string">"classes"</span>, <span class="hljs-number">20</span>);</span><br><span class="line">        <span class="hljs-keyword">char</span> *name_list = option_find_str(options, <span class="hljs-string">"names"</span>, <span class="hljs-string">"data/names.list"</span>);</span><br><span class="line">        <span class="hljs-keyword">char</span> **names = get_labels(name_list);</span><br><span class="line">        demo(cfg, weights, thresh, cam_index, filename, names, classes, frame_skip, prefix, avg, hier_thresh, width, height, fps, fullscreen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//else if(0==strcmp(argv[2], "extract")) extract_detector(datacfg, cfg, weights, cam_index, filename, class, thresh, frame_skip);</span></span><br><span class="line">    <span class="hljs-comment">//else if(0==strcmp(argv[2], "censor")) censor_detector(datacfg, cfg, weights, cam_index, filename, class, thresh, frame_skip);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/xieqi/p/9818056.html" target="_blank" rel="noopener">YOLO-V3实战（darknet）</a></p><p><a href="https://www.jianshu.com/p/7ae10c8f7d77" target="_blank" rel="noopener">Darknet 评估训练好的网络的性能</a></p><p><a href="https://www.cnblogs.com/xieqi/p/9818056.html" target="_blank" rel="noopener">yolov3实战(darknet)</a></p><p><a href="https://github.com/pascal1129/yolo_person_detect" target="_blank" rel="noopener">yolo_person_detect</a></p><p><a href="https://github.com/AlexeyAB/darknet#how-to-train-to-detect-your-custom-objects" target="_blank" rel="noopener">Yolo-v3 and Yolo-v2 for Windows and Linux</a></p><p>[pjreddie/darknet](</p>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deeplearning </tag>
            
            <tag> darknet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目录-C/C++学习笔记</title>
      <link href="/post/789284ab.html"/>
      <url>/post/789284ab.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/C_and_C_plus_plus.jpg" alt="C/C++"></p><p>C 语言学习笔记</p><ul><li><a href="https://shuiyujie.com/post/62b06016.html">C语言学习笔记-静态库、动态库的制作和使用</a></li><li><a href="https://shuiyujie.com/post/24de7431.html">C语言学习笔记-写一个最简单的makefile</a></li><li><a href="https://shuiyujie.com/post/fe52dfa7.html">C语言学习笔记-文件操作</a></li><li><a href="https://shuiyujie.com/post/e261fd69.html">C语言学习笔记-结构体</a></li><li><a href="https://shuiyujie.com/post/5c7372a9.html">C语言学习笔记-const关键字</a></li><li><a href="https://shuiyujie.com/post/a99472bd.html">C语言学习笔记-字符串</a></li><li><a href="https://shuiyujie.com/post/2f02c8ae.html">C语言学习笔记-指针01</a></li></ul><p>C++ 学习笔记</p><ul><li><a href="https://shuiyujie.com/post/824d7309.html">C++学习笔记-引用</a></li><li><a href="https://shuiyujie.com/post/e95932f5.html">C++学习笔记-内联函数、默认参数和函数重载</a></li><li><a href="https://shuiyujie.com/post/a51fdb12.html">C++学习笔记-构造函数、析构函数、拷贝构造函数</a></li><li><a href="https://shuiyujie.com/post/cd8fc6b5.html">C++学习笔记-静态方法、静态函数、this指针</a></li><li><a href="https://shuiyujie.com/post/5afabdd4.html">C++学习笔记-继承</a></li><li><a href="https://shuiyujie.com/post/e7609a12.html">C++学习笔记-多态</a></li></ul><p>零散知识点</p><ul><li><a href="https://shuiyujie.com/post/b482364a.html">C/C++ 中的命令行参数</a></li><li><a href="https://shuiyujie.com/post/d37b0970.html">C 语言-格式化输出函数 printf()</a></li></ul><p>STL 学习笔记</p><ul><li><a href="https://shuiyujie.com/post/543335f8.html">STL-STL基础概念</a></li><li><a href="https://shuiyujie.com/post/2d250e1c.html">STL-string 容器</a></li><li><a href="https://shuiyujie.com/post/39bf26c3.html">STL-vector 容器</a></li><li><a href="https://shuiyujie.com/post/564ccba3.html">STL-deque 容器</a></li><li><a href="https://shuiyujie.com/post/4244b416.html">STL-queue 容器</a></li><li><a href="https://shuiyujie.com/post/ac4a7cfa.html">STL-stack 容器</a></li><li><a href="https://shuiyujie.com/post/b0cfebdb.html">STL-list 容器</a></li><li><a href="https://shuiyujie.com/post/adaa2861.html">STL-set and multiset</a></li><li><a href="https://shuiyujie.com/post/8d66854b.html">STL-map and multimap</a></li><li><a href="https://shuiyujie.com/post/b974f564.html">STL-常用算法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL-常用算法</title>
      <link href="/post/b974f564.html"/>
      <url>/post/b974f564.html</url>
      
        <content type="html"><![CDATA[<p>常用遍历、查找、拷贝和替换、算数生成、集合算法。</p><a id="more"></a><h1 id="遍历算法"><a href="#遍历算法" class="headerlink" title="遍历算法"></a>遍历算法</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">遍历算法,遍历容器元素</span></span><br><span class="line"><span class="hljs-comment">@param beg 开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end 结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param _callback 函数回调或者函数对象</span></span><br><span class="line"><span class="hljs-comment">@return 函数对象</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">for_each(iterator beg, iterator end, _callback);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">transform 算法,将指定容器区间元素搬运到另一容器中</span></span><br><span class="line"><span class="hljs-comment">注意: transform 不会给目标容器分配内存，所以需要我们提前分配好内存</span></span><br><span class="line"><span class="hljs-comment">@param beg1 源容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end1 源容器结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param beg2 目标容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param _cakkback 回调函数或者函数对象</span></span><br><span class="line"><span class="hljs-comment">@return 返回目标容器迭代器</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">transform(iterator beg1, iterator end1, iterator beg2, _callbakc)</span><br></pre></td></tr></table></figure><h1 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">find 算法, 查找元素</span></span><br><span class="line"><span class="hljs-comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param value 查找的元素</span></span><br><span class="line"><span class="hljs-comment">@return 返回查找元素的位置</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">find(iterator beg, iterator end, value)</span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">adjacent_find 算法,查找相邻重复元素</span></span><br><span class="line"><span class="hljs-comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param _callback 回调函数或者谓词(返回 bool 类型的函数对象)</span></span><br><span class="line"><span class="hljs-comment">@return 返回相邻元素的第一个位置的迭代器</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">adjacent_find(iterator beg, iterator end, _callback);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">binary_search 算法二分查找法</span></span><br><span class="line"><span class="hljs-comment">注意: 在无序序列中不可用</span></span><br><span class="line"><span class="hljs-comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param value 查找的元素</span></span><br><span class="line"><span class="hljs-comment">@return bool 查找返回 true 否则 false</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">binary_search</span><span class="hljs-params">(iterator beg, iterator end, value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">find_if 算法 条件查找</span></span><br><span class="line"><span class="hljs-comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param callback 回调函数或者谓词(返回 bool 类型的函数对象)</span></span><br><span class="line"><span class="hljs-comment">@return bool 查找返回 true 否则 false</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">find_if(iterator beg, iterator end, _callback);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">count 算法 统计元素出现次数</span></span><br><span class="line"><span class="hljs-comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param value 回调函数或者谓词(返回 bool 类型的函数对象)</span></span><br><span class="line"><span class="hljs-comment">@return int 返回元素个数</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">count(iterator beg, iterator end, value);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">count 算法 统计元素出现次数</span></span><br><span class="line"><span class="hljs-comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param callback 回调函数或者谓词(返回 bool 类型的函数对象)</span></span><br><span class="line"><span class="hljs-comment">@return int 返回元素个数</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">count_if(iterator beg, iterator end, _callback);</span><br></pre></td></tr></table></figure><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">merge 算法 容器元素合并，并存储到另一容器中</span></span><br><span class="line"><span class="hljs-comment">@param beg1 容器 1 开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end1 容器 1 结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param beg2 容器 2 开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end2 容器 2 结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param dest 目标容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest)</span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">sort 算法 容器元素排序</span></span><br><span class="line"><span class="hljs-comment">注意:两个容器必须是有序的</span></span><br><span class="line"><span class="hljs-comment">@param beg 容器 1 开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end 容器 1 结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param _callback 回调函数或者谓词(返回 bool 类型的函数对象)</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">sort(iterator beg, iterator end, _callback)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">sort 算法 对指定范围内的元素随机调整次序</span></span><br><span class="line"><span class="hljs-comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">random_shuffle(iterator beg, iterator end)</span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">reverse 算法 反转指定范围的元素</span></span><br><span class="line"><span class="hljs-comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">reverse(iterator beg, iterator end)</span><br></pre></td></tr></table></figure><h1 id="拷贝和替换算法"><a href="#拷贝和替换算法" class="headerlink" title="拷贝和替换算法"></a>拷贝和替换算法</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">copy 算法 将容器内指定范围的元素拷贝到另一容器中</span></span><br><span class="line"><span class="hljs-comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param dest 目标容器结束迭代器</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">copy(iterator beg, iterator end, iterator dest)</span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">replace 算法 将容器内指定范围的旧元素修改为新元素</span></span><br><span class="line"><span class="hljs-comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param oldvalue 旧元素</span></span><br><span class="line"><span class="hljs-comment">@param oldvalue 新元素</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">replace(iterator beg, iterator end, oldvalue, newvalue)</span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">replace_if 算法 将容器内指定范围满足条件的元素替换为新元素</span></span><br><span class="line"><span class="hljs-comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param callback 函数回调或者谓词(返回 Bool 类型的函数对象)</span></span><br><span class="line"><span class="hljs-comment">@param oldvalue 新元素</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">replace_if(iterator beg, iterator end, _callback, newvalue)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">swap 算法 互换两个容器的元素</span></span><br><span class="line"><span class="hljs-comment">@param c1 容器 1</span></span><br><span class="line"><span class="hljs-comment">@param c2 容器 2</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">swap(container c1, container c2)</span><br></pre></td></tr></table></figure><h1 id="算数生成算法"><a href="#算数生成算法" class="headerlink" title="算数生成算法"></a>算数生成算法</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">accumulate 算法 计算容器元素累计总和</span></span><br><span class="line"><span class="hljs-comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param value 累加值</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">accumulate(iterator beg, iterator end, value)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">fill 算法 向容器中添加元素</span></span><br><span class="line"><span class="hljs-comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param value t 填充元素</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">fill(iterator beg, iterator end, value)</span><br></pre></td></tr></table></figure><h1 id="集合算法"><a href="#集合算法" class="headerlink" title="集合算法"></a>集合算法</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">set_intersection 算法 求两个 set 集合的交集</span></span><br><span class="line"><span class="hljs-comment">注意:两个集合必须是有序序列</span></span><br><span class="line"><span class="hljs-comment">@param beg1 容器 1 开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end1 容器 1 结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param beg2 容器 2 开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end2 容器 2 结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param dest 目标容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@return 目标容器的最后一个元素的迭代器地址</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest)</span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">set_union 算法 求两个 set 集合的并集</span></span><br><span class="line"><span class="hljs-comment">注意:两个集合必须是有序序列</span></span><br><span class="line"><span class="hljs-comment">@param beg1 容器 1 开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end1 容器 1 结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param beg2 容器 2 开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end2 容器 2 结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param dest 目标容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@return 目标容器的最后一个元素的迭代器地址</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">set_difference 算法 求两个 set集合的差集</span></span><br><span class="line"><span class="hljs-comment">注意:两个集合必须是有序序列</span></span><br><span class="line"><span class="hljs-comment">@param beg1 容器 1 开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end1 容器 1 结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param beg2 容器 2 开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@param end2 容器 2 结束迭代器</span></span><br><span class="line"><span class="hljs-comment">@param dest 目标容器开始迭代器</span></span><br><span class="line"><span class="hljs-comment">@return 目标容器的最后一个元素的迭代器地址</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL-map and multimap</title>
      <link href="/post/8d66854b.html"/>
      <url>/post/8d66854b.html</url>
      
        <content type="html"><![CDATA[<p>map 以键值对的形式存储数据，所有元素根据键值自动排序。pair 的第 一元素被称为键值，第二元素被称为实值。map 也是以红黑树为底层实现机制。</p><p>map 和 multimap 区别在于，map 不允许相同 key 值存在，multimap 则允许相同 key 值存在。</p><a id="more"></a><h1 id="对组"><a href="#对组" class="headerlink" title="对组"></a>对组</h1><p>类模板：template <class t1, class t2> struct pair.</class></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//第一种方法创建一个对组</span></span><br><span class="line">pair&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; pair1(<span class="hljs-built_in">string</span>(<span class="hljs-string">"name"</span>), <span class="hljs-number">20</span>);</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; pair1.first &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//访问 pair 第一个值</span></span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; pair1.second &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//访问 pair 第二个值</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 第二种</span></span><br><span class="line">pair&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; pair2 = make_pair(<span class="hljs-string">"name"</span>, <span class="hljs-number">30</span>);</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; pair2.first &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; pair2.second &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-comment">//pair=赋值</span></span><br><span class="line">pair&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; pair3 = pair2;</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; pair3.first &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; pair3.second &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br></pre></td></tr></table></figure><h1 id="map-构造函数"><a href="#map-构造函数" class="headerlink" title="map 构造函数"></a>map 构造函数</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">map</span>&lt;T1, T2&gt; mapTT;<span class="hljs-comment">//map 默认构造函数:</span></span><br><span class="line"><span class="hljs-built_in">map</span>(<span class="hljs-keyword">const</span> <span class="hljs-built_in">map</span> &amp;mp);<span class="hljs-comment">//拷贝构造函数</span></span><br></pre></td></tr></table></figure><h1 id="map-赋值操作"><a href="#map-赋值操作" class="headerlink" title="map 赋值操作"></a>map 赋值操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">map</span>&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> <span class="hljs-built_in">map</span> &amp;mp);<span class="hljs-comment">//重载等号操作符</span></span><br><span class="line">swap(mp);<span class="hljs-comment">//交换两个集合容器</span></span><br></pre></td></tr></table></figure><h1 id="map-大小操作"><a href="#map-大小操作" class="headerlink" title="map 大小操作"></a>map 大小操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">size();<span class="hljs-comment">//返回容器中元素的数目</span></span><br><span class="line">empty();<span class="hljs-comment">//判断容器是否为空</span></span><br></pre></td></tr></table></figure><h1 id="map-插入数据元素操作"><a href="#map-插入数据元素操作" class="headerlink" title="map 插入数据元素操作"></a>map 插入数据元素操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">map</span>.insert(...);<span class="hljs-comment">//往容器插入元素，返回pair&lt;iterator,bool&gt;</span></span><br><span class="line"><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">string</span>&gt; mapStu; </span><br><span class="line"><span class="hljs-comment">// 第一种通过 pair 的方式插入对象</span></span><br><span class="line">mapStu.insert(pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">string</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-string">"小张"</span>));</span><br><span class="line"><span class="hljs-comment">// 第二种通过 pair 的方式插入对象</span></span><br><span class="line">mapStu.inset(make_pair(<span class="hljs-number">-1</span>, <span class="hljs-string">"校长"</span>));</span><br><span class="line"><span class="hljs-comment">// 第三种通过 value_type 的方式插入对象</span></span><br><span class="line">mapStu.insert(<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">string</span>&gt;::value_type(<span class="hljs-number">1</span>,<span class="hljs-string">"小李"</span>));</span><br><span class="line"><span class="hljs-comment">// 第四种通过数组的方式插入值 </span></span><br><span class="line">mapStu[<span class="hljs-number">3</span>] = <span class="hljs-string">"小刘"</span>;</span><br><span class="line">mapStu[<span class="hljs-number">5</span>] = <span class="hljs-string">"小王"</span>;</span><br></pre></td></tr></table></figure><h1 id="map-删除操作"><a href="#map-删除操作" class="headerlink" title="map 删除操作"></a>map 删除操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clear();<span class="hljs-comment">//删除所有元素</span></span><br><span class="line">erase(pos);<span class="hljs-comment">//删除 pos 迭代器所指的元素，返回下一个元素的迭代器。</span></span><br><span class="line">erase(beg,end);<span class="hljs-comment">//删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</span></span><br><span class="line">erase(keyElem);<span class="hljs-comment">//删除容器中 key 为 keyElem 的对组。</span></span><br></pre></td></tr></table></figure><h1 id="map-查找操作"><a href="#map-查找操作" class="headerlink" title="map 查找操作"></a>map 查找操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find(key);<span class="hljs-comment">//查找键 key 是否存在,若存在， 返回该键的元素的迭代器；/若不存在，返回 map.end();</span></span><br><span class="line">count(keyElem);<span class="hljs-comment">//返回容器中 key 为 keyElem 的对组个数。对 map 来说，要么是 0，要么是 1。对 multimap 来说，值可能大于 1。</span></span><br><span class="line">lower_bound(keyElem);<span class="hljs-comment">//返回第一个 key&lt;=keyElem 元素的迭代器。</span></span><br><span class="line">upper_bound(keyElem);<span class="hljs-comment">//返回第一个 key&gt;keyElem 元素的迭代器。</span></span><br><span class="line">equal_range(keyElem);<span class="hljs-comment">//返回容器中 key 与 keyElem 相等的上下限的两个迭代器。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL-set and multiset</title>
      <link href="/post/adaa2861.html"/>
      <url>/post/adaa2861.html</url>
      
        <content type="html"><![CDATA[<p>set 的底层是红黑树。具有良好的查找效率。set 容器中不允许出现重复的元素，multiset 允许重复元素。</p><a id="more"></a><h1 id="set-构造函数"><a href="#set-构造函数" class="headerlink" title="set 构造函数"></a>set 构造函数</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">set</span>&lt;T&gt; st;<span class="hljs-comment">//set 默认构造函数：</span></span><br><span class="line">mulitset&lt;T&gt; mst; <span class="hljs-comment">//multiset 默认构造函数:</span></span><br><span class="line"><span class="hljs-built_in">set</span>(<span class="hljs-keyword">const</span> <span class="hljs-built_in">set</span> &amp;st);<span class="hljs-comment">//拷贝构造函数</span></span><br></pre></td></tr></table></figure><h1 id="set-赋值操作"><a href="#set-赋值操作" class="headerlink" title="set 赋值操作"></a>set 赋值操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">set</span>&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> <span class="hljs-built_in">set</span> &amp;st);<span class="hljs-comment">//重载等号操作符 </span></span><br><span class="line">swap(st);<span class="hljs-comment">//交换两个集合容器</span></span><br></pre></td></tr></table></figure><h1 id="set-大小操作"><a href="#set-大小操作" class="headerlink" title="set 大小操作"></a>set 大小操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">size();<span class="hljs-comment">//返回容器中元素的数目</span></span><br><span class="line">empty();<span class="hljs-comment">//判断容器是否为空</span></span><br></pre></td></tr></table></figure><h1 id="set-插入和删除操作"><a href="#set-插入和删除操作" class="headerlink" title="set 插入和删除操作"></a>set 插入和删除操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">insert(elem);<span class="hljs-comment">//在容器中插入元素。</span></span><br><span class="line">clear();<span class="hljs-comment">//清除所有元素</span></span><br><span class="line">erase(pos);<span class="hljs-comment">//删除 pos 迭代器所指的元素，返回下一个元素的迭代器。</span></span><br><span class="line">erase(beg, end);<span class="hljs-comment">//删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</span></span><br><span class="line">erase(elem);<span class="hljs-comment">//删除容器中值为 elem 的元素。</span></span><br></pre></td></tr></table></figure><h1 id="set-查找操作"><a href="#set-查找操作" class="headerlink" title="set 查找操作"></a>set 查找操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find(key);<span class="hljs-comment">//查找键 key 是否存在,若存在， 返回该键的元素的迭代器；若不存在， 返回 map.end();</span></span><br><span class="line">lower_bound(keyElem);<span class="hljs-comment">//返回第一个 key&gt;=keyElem 元素的迭代器。</span></span><br><span class="line">upper_bound(keyElem);<span class="hljs-comment">//返回第一个 key&gt;keyElem 元素的迭代器。</span></span><br><span class="line">equal_range(keyElem);<span class="hljs-comment">//返回容器中 key 与 keyElem相等的上下限的两个迭代器。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL-list 容器</title>
      <link href="/post/b0cfebdb.html"/>
      <url>/post/b0cfebdb.html</url>
      
        <content type="html"><![CDATA[<p>链表通过数据域保存元素，通过指针域表示相邻元素之间的关系。</p><p><img src="http://image.shuiyujie.com/2019-06-08-12-18-30.png" alt="list"></p><ul><li>采用动态存储分配，不会造成内存浪费和溢出</li><li>链表执行插入和删除操作的效率高</li><li>链表灵活，但是空间和时间额外耗费较大</li></ul><a id="more"></a><h1 id="list-构造函数"><a href="#list-构造函数" class="headerlink" title="list 构造函数"></a>list 构造函数</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">list</span>&lt;T&gt; lstT;<span class="hljs-comment">//list 采用采用模板类实现,对象的默认构造形式：</span></span><br><span class="line"><span class="hljs-built_in">list</span>(beg,end);<span class="hljs-comment">//构造函数将[beg, end)区间中的元素拷贝给本身。</span></span><br><span class="line"><span class="hljs-built_in">list</span>(n,elem);<span class="hljs-comment">//构造函数将 n 个 elem 拷贝给本身。</span></span><br><span class="line"><span class="hljs-built_in">list</span>(<span class="hljs-keyword">const</span> <span class="hljs-built_in">list</span> &amp;lst);<span class="hljs-comment">//拷贝构造函数。</span></span><br></pre></td></tr></table></figure><h1 id="list-数据元素插入和删除操作"><a href="#list-数据元素插入和删除操作" class="headerlink" title="list 数据元素插入和删除操作"></a>list 数据元素插入和删除操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">push_back(elem);<span class="hljs-comment">//在容器尾部加入一个元素</span></span><br><span class="line">pop_back();<span class="hljs-comment">//删除容器中最后一个元素</span></span><br><span class="line">push_front(elem);<span class="hljs-comment">//在容器开头插入一个元素</span></span><br><span class="line">pop_front();<span class="hljs-comment">//从容器开头移除第一个元素</span></span><br><span class="line">insert(pos,elem);<span class="hljs-comment">//在 pos 位置插 elem 元素的拷贝，返回新数据的位置。</span></span><br><span class="line">insert(pos,n,elem);<span class="hljs-comment">//在 pos 位置插入 n 个 elem 数据，无返回值。</span></span><br><span class="line">insert(pos,beg,end);<span class="hljs-comment">//在 pos 位置插入[beg,end)区间的数据，无返回值。</span></span><br><span class="line">clear();<span class="hljs-comment">//移除容器的所有数据</span></span><br><span class="line">erase(beg,end);<span class="hljs-comment">//删除[beg,end)区间的数据，返回下一个数据的位置。</span></span><br><span class="line">erase(pos);<span class="hljs-comment">//删除 pos 位置的数据，返回下一个数据的位置。</span></span><br><span class="line">remove(elem);<span class="hljs-comment">//删除容器中所有与 elem 值匹配的元素。</span></span><br></pre></td></tr></table></figure><h1 id="list-大小操作"><a href="#list-大小操作" class="headerlink" title="list 大小操作"></a>list 大小操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">size();<span class="hljs-comment">//返回容器中元素的个数</span></span><br><span class="line">empty();<span class="hljs-comment">//判断容器是否为空</span></span><br><span class="line">resize(num);<span class="hljs-comment">//重新指定容器的长度为 num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br><span class="line">resize(num, elem);<span class="hljs-comment">//重新指定容器的长度为 num， 若容器变长，则以 elem 值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br></pre></td></tr></table></figure><h1 id="list-赋值操作"><a href="#list-赋值操作" class="headerlink" title="list 赋值操作"></a>list 赋值操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assign(beg, end);<span class="hljs-comment">//将[beg, end)区间中的数据拷贝赋值给本身。</span></span><br><span class="line">assign(n, elem);<span class="hljs-comment">//将 n 个 elem 拷贝赋值给本身。</span></span><br><span class="line"><span class="hljs-built_in">list</span>&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> <span class="hljs-built_in">list</span> &amp;lst);<span class="hljs-comment">//重载等号操作符</span></span><br><span class="line">swap(lst);<span class="hljs-comment">//将 lst 与本身的元素互换。</span></span><br></pre></td></tr></table></figure><h1 id="list-数据的存取"><a href="#list-数据的存取" class="headerlink" title="list 数据的存取"></a>list 数据的存取</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">front();<span class="hljs-comment">//返回第一个元素。</span></span><br><span class="line">back();<span class="hljs-comment">//返回最后一个元素。</span></span><br></pre></td></tr></table></figure><h1 id="list-反转排列排序"><a href="#list-反转排列排序" class="headerlink" title="list 反转排列排序"></a>list 反转排列排序</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reverse();<span class="hljs-comment">//反转链表，比如 lst 包含 1,3,5 元素，运行此方法后， lst 就包含 5,3,1 元素。</span></span><br><span class="line">sort(); <span class="hljs-comment">//list 排序</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL-stack 容器</title>
      <link href="/post/ac4a7cfa.html"/>
      <url>/post/ac4a7cfa.html</url>
      
        <content type="html"><![CDATA[<p>栈 stack 是一种先进后出(first in last out,FILO)的数据结构，它只有一个出口，stack 只允许在栈顶新增元素，移除元素。</p><p><img src="http://image.shuiyujie.com/2019-06-08-11-56-29.png" alt="栈"></p><p>栈不能遍历,不支持随机存取，只能通过 top 从栈顶获取和删除元素。</p><a id="more"></a><h1 id="stack-构造函数"><a href="#stack-构造函数" class="headerlink" title="stack 构造函数"></a>stack 构造函数</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">stack</span>&lt;T&gt; stkT;<span class="hljs-comment">//stack 采用模板类实现, stack 对象的默认构造形式：</span></span><br><span class="line"><span class="hljs-built_in">stack</span>(<span class="hljs-keyword">const</span> <span class="hljs-built_in">stack</span> &amp;stk);<span class="hljs-comment">//拷贝构造函数</span></span><br></pre></td></tr></table></figure><h1 id="stack-赋值操作"><a href="#stack-赋值操作" class="headerlink" title="stack 赋值操作"></a>stack 赋值操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">stack</span>&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> <span class="hljs-built_in">stack</span> &amp;stk);<span class="hljs-comment">//重载等号操作符</span></span><br></pre></td></tr></table></figure><h1 id="stack-数据存取操作"><a href="#stack-数据存取操作" class="headerlink" title="stack 数据存取操作"></a>stack 数据存取操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push(elem);<span class="hljs-comment">//向栈顶添加元素</span></span><br><span class="line">pop();<span class="hljs-comment">//从栈顶移除第一个元素</span></span><br><span class="line">top();<span class="hljs-comment">//返回栈顶元素</span></span><br></pre></td></tr></table></figure><h1 id="stack-大小操作"><a href="#stack-大小操作" class="headerlink" title="stack 大小操作"></a>stack 大小操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">empty();<span class="hljs-comment">//判断堆栈是否为空</span></span><br><span class="line">size();<span class="hljs-comment">//返回堆栈的大小</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL-queue 容器</title>
      <link href="/post/4244b416.html"/>
      <url>/post/4244b416.html</url>
      
        <content type="html"><![CDATA[<p>queue 是一种先进先出(first in first out, FIFO)的数据类型,他有两个口，只允许从队尾插入，队头弹出。</p><p><img src="http://image.shuiyujie.com/2019-06-08-12-04-42.png" alt="queue"></p><ul><li>必须从一个口数据元素入队，另一个口数据元素出队。</li><li>不能随机存取，不支持遍历</li></ul><a id="more"></a><h1 id="queue-构造函数"><a href="#queue-构造函数" class="headerlink" title="queue 构造函数"></a>queue 构造函数</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">queue</span>&lt;T&gt; queT;<span class="hljs-comment">//queue 采用模板类实现，queue 对象的默认构造形式：</span></span><br><span class="line"><span class="hljs-built_in">queue</span>(<span class="hljs-keyword">const</span> <span class="hljs-built_in">queue</span> &amp;que);<span class="hljs-comment">//拷贝构造函数</span></span><br></pre></td></tr></table></figure><h1 id="queue-存取、插入和删除操作"><a href="#queue-存取、插入和删除操作" class="headerlink" title="queue 存取、插入和删除操作"></a>queue 存取、插入和删除操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push(elem);<span class="hljs-comment">//往队尾添加元素</span></span><br><span class="line">pop();<span class="hljs-comment">//从队头移除第一个元素</span></span><br><span class="line">back();<span class="hljs-comment">//返回最后一个元素</span></span><br><span class="line">front();<span class="hljs-comment">//返回第一个元素</span></span><br></pre></td></tr></table></figure><h1 id="queue-赋值操作"><a href="#queue-赋值操作" class="headerlink" title="queue 赋值操作"></a>queue 赋值操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">queue</span>&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> <span class="hljs-built_in">queue</span> &amp;que);<span class="hljs-comment">//重载等号操作符</span></span><br></pre></td></tr></table></figure><h1 id="queue-大小操作"><a href="#queue-大小操作" class="headerlink" title="queue 大小操作"></a>queue 大小操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">empty();<span class="hljs-comment">//判断队列是否为空</span></span><br><span class="line">size();<span class="hljs-comment">//返回队列的大小</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL-deque 容器</title>
      <link href="/post/564ccba3.html"/>
      <url>/post/564ccba3.html</url>
      
        <content type="html"><![CDATA[<p>deque 是 “double-ended queue”的缩写,和 vector 一样，deque 也支持随机存取。 与 vector 不同的是，vector 是单向开口的，deque 是双向开口的，在两端进行插入和删除操作的时间复杂度为 O(1)。此外，deque 没有容量的概念，因为它是动态的以分段的连续空间组合而成，随时可 以增加一段新的空间并链接起来，换句话说，像 vector 那样“因旧空间不足而重新分配一 块更大的空间，然后再复制元素，释放空间”这样的操作不会发生在 deque 身上，也因此 deque 没有必要提供所谓的空间保留功能。</p><p><img src="http://image.shuiyujie.com/2019-06-08-09-17-46.png" alt="deque操作示意图"></p><ul><li>双端插入和删除元素效率较高. </li><li>指定位置插入也会导致数据元素移动,降低效率. </li><li>可随机存取,效率高.</li></ul><a id="more"></a><h1 id="deque-构造函数"><a href="#deque-构造函数" class="headerlink" title="deque 构造函数"></a>deque 构造函数</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">deque</span>&lt;T&gt; deqT;<span class="hljs-comment">//默认构造形式</span></span><br><span class="line"><span class="hljs-built_in">deque</span>(beg, end);<span class="hljs-comment">//构造函数将[beg, end)区间中的元素拷贝给本身。</span></span><br><span class="line"><span class="hljs-built_in">deque</span>(n, elem);<span class="hljs-comment">//构造函数将 n 个 elem 拷贝给本身。</span></span><br><span class="line"><span class="hljs-built_in">deque</span>(<span class="hljs-keyword">const</span> <span class="hljs-built_in">deque</span> &amp;deq);<span class="hljs-comment">//拷贝构造函数。</span></span><br></pre></td></tr></table></figure><h1 id="deque-赋值操作"><a href="#deque-赋值操作" class="headerlink" title="deque 赋值操作"></a>deque 赋值操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assign(beg, end);<span class="hljs-comment">//将[beg, end)区间中的数据拷贝赋值给本身。</span></span><br><span class="line">assign(n, elem);<span class="hljs-comment">//将 n 个 elem 拷贝赋值给本身。</span></span><br><span class="line"><span class="hljs-built_in">deque</span>&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> <span class="hljs-built_in">deque</span> &amp;deq); <span class="hljs-comment">//重载等号操作符</span></span><br><span class="line">swap(deq);<span class="hljs-comment">// 将 deq 与本身的元素互换</span></span><br></pre></td></tr></table></figure><h1 id="deque-大小操作"><a href="#deque-大小操作" class="headerlink" title="deque 大小操作"></a>deque 大小操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">deque</span>.size();<span class="hljs-comment">//返回容器中元素的个数</span></span><br><span class="line"><span class="hljs-built_in">deque</span>.empty();<span class="hljs-comment">//判断容器是否为空</span></span><br><span class="line"><span class="hljs-built_in">deque</span>.resize(num);<span class="hljs-comment">//重新指定容器的长度为 num,若容器变长，则以默认值填充新位置。如果容器 变短，则末尾超出容器长度的元素被删除。</span></span><br><span class="line"><span class="hljs-built_in">deque</span>.resize(num, elem); <span class="hljs-comment">//重新指定容器的长度为 num,若容器变长，则以 elem 值填充新位置,如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br></pre></td></tr></table></figure><h1 id="deque-双端插入和删除操作"><a href="#deque-双端插入和删除操作" class="headerlink" title="deque 双端插入和删除操作"></a>deque 双端插入和删除操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push_back(elem);<span class="hljs-comment">//在容器尾部添加一个数据</span></span><br><span class="line">push_front(elem);<span class="hljs-comment">//在容器头部插入一个数据</span></span><br><span class="line">pop_back();<span class="hljs-comment">//删除容器最后一个数据</span></span><br><span class="line">pop_front();<span class="hljs-comment">//删除容器第一个数据</span></span><br></pre></td></tr></table></figure><h1 id="deque-数据存取"><a href="#deque-数据存取" class="headerlink" title="deque 数据存取"></a>deque 数据存取</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">at(idx);<span class="hljs-comment">//返回索引 idx 所指的数据，如果 idx 越界，抛出 out_of_range。</span></span><br><span class="line"><span class="hljs-keyword">operator</span>[];<span class="hljs-comment">//返回索引 idx 所指的数据，如果 idx 越界，不抛出异常，直接出错。</span></span><br><span class="line">front();<span class="hljs-comment">//返回第一个数据。</span></span><br><span class="line">back();<span class="hljs-comment">//返回最后一个数据</span></span><br></pre></td></tr></table></figure><h1 id="deque-插入操作"><a href="#deque-插入操作" class="headerlink" title="deque 插入操作"></a>deque 插入操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert(pos,elem);<span class="hljs-comment">//在 pos 位置插入一个 elem 元素的拷贝，返回新数据的位置。</span></span><br><span class="line">insert(pos,n,elem);<span class="hljs-comment">//在 pos 位置插入 n 个 elem 数据，无返回值。</span></span><br><span class="line">insert(pos,beg,end);<span class="hljs-comment">//在 pos 位置插入[beg,end)区间的数据，无返回值。</span></span><br></pre></td></tr></table></figure><p>deque 是分段连续的内存空间，通过中控器维持一种连续内存空间的状态， 其实现复杂性要大于 vector queue stack 等容器，其迭代器的实现也更加复杂。</p><p>在需要对 deque 容器元素进行排序的时候，建议先将 deque 容器中数据数据元素拷贝到 vector 容 器中，对 vector 进行排序，然后再将排序完成的数据拷贝回 deque 容器。</p><h1 id="deque-删除操作"><a href="#deque-删除操作" class="headerlink" title="deque 删除操作"></a>deque 删除操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clear();<span class="hljs-comment">//移除容器的所有数据</span></span><br><span class="line">erase(beg,end);<span class="hljs-comment">//删除[beg,end)区间的数据，返回下一个数据的位置。</span></span><br><span class="line">erase(pos);<span class="hljs-comment">//删除 pos 位置的数据，返回下一个数据的位置。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL-vector 容器</title>
      <link href="/post/39bf26c3.html"/>
      <url>/post/39bf26c3.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/2019-06-08-00-31-12.png" alt="vector"></p><ul><li>vector 是动态数组，连续内存空间，具有随机存取效率高的优点。</li><li>vector 是单口容器，在队尾插入和删除元素效率高，在指定位置插入会导致数据 元素移动，效率低。</li></ul><a id="more"></a><h1 id="vector-构造函数"><a href="#vector-构造函数" class="headerlink" title="vector 构造函数"></a>vector 构造函数</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">vector</span>&lt;T&gt; v; <span class="hljs-comment">//采用模板实现类实现，默认构造函数</span></span><br><span class="line"><span class="hljs-built_in">vector</span>(v.begin(), v.end());<span class="hljs-comment">//将 v[begin(), end())区间中的元素拷贝给本身。</span></span><br><span class="line"><span class="hljs-built_in">vector</span>(n, elem);<span class="hljs-comment">//构造函数将 n 个 elem 拷贝给本身。</span></span><br><span class="line"><span class="hljs-built_in">vector</span>(<span class="hljs-keyword">const</span> <span class="hljs-built_in">vector</span> &amp;vec);<span class="hljs-comment">//拷贝构造函数。</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//例子 使用第二个构造函数我们可以...</span></span><br><span class="line"><span class="hljs-keyword">int</span> arr[] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1(arr, arr + <span class="hljs-keyword">sizeof</span>(arr)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));</span><br></pre></td></tr></table></figure><h1 id="vector-常用赋值操作"><a href="#vector-常用赋值操作" class="headerlink" title="vector 常用赋值操作"></a>vector 常用赋值操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">assign(beg, end);<span class="hljs-comment">//将[beg, end)区间中的数据拷贝赋值给本身。</span></span><br><span class="line">assign(n, elem);<span class="hljs-comment">//将 n 个 elem 拷贝赋值给本身。</span></span><br><span class="line"><span class="hljs-built_in">vector</span>&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> <span class="hljs-built_in">vector</span> &amp;vec);<span class="hljs-comment">//重载等号操作符</span></span><br><span class="line">swap(vec);<span class="hljs-comment">// 将 vec 与本身的元素互换。</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//第一个赋值函数，可以这么写：</span></span><br><span class="line"><span class="hljs-keyword">int</span> arr[] = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> &#125;;</span><br><span class="line">assign(arr, arr + <span class="hljs-number">5</span>);<span class="hljs-comment">//使用数组初始化 vector</span></span><br></pre></td></tr></table></figure><h1 id="vector-大小操作"><a href="#vector-大小操作" class="headerlink" title="vector 大小操作"></a>vector 大小操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">size();<span class="hljs-comment">//返回容器中元素的个数</span></span><br><span class="line">empty();<span class="hljs-comment">//判断容器是否为空</span></span><br><span class="line">resize(<span class="hljs-keyword">int</span> num);<span class="hljs-comment">//重新指定容器的长度为 num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br><span class="line">resize(<span class="hljs-keyword">int</span> num, elem);<span class="hljs-comment">//重新指定容器的长度为 num，若容器变长，则以 elem 值填充新位置。如果容器变短，则末尾超出容器长&gt;度的元素被删除。</span></span><br><span class="line">capacity();<span class="hljs-comment">//容器的容量</span></span><br><span class="line">reserve(<span class="hljs-keyword">int</span> len);<span class="hljs-comment">//容器预留 len个元素长度，预留位置不初始化，元素不可访问。</span></span><br></pre></td></tr></table></figure><ul><li>resize 若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的 元素被删除。</li><li>reserve 是容器预留空间，但在空间内不真正创建元素对象，所以在没有添加新的对 象之前，不能引用容器内的元素.</li><li>resize 是改变容器的大小，且在创建对象，因此，调用这个函数之后，就可以引用容器内的对象了.</li></ul><h1 id="vector-数据存取操作"><a href="#vector-数据存取操作" class="headerlink" title="vector 数据存取操作"></a>vector 数据存取操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">at(<span class="hljs-keyword">int</span> idx); <span class="hljs-comment">//返回索引 idx 所指的数据，如果 idx 越界，抛出 out_of_range 异常。</span></span><br><span class="line"><span class="hljs-keyword">operator</span>[];<span class="hljs-comment">//返回索引 idx 所指的数据，越界时，运行直接报错</span></span><br><span class="line">front();<span class="hljs-comment">//返回容器中第一个数据元素</span></span><br><span class="line">back();<span class="hljs-comment">//返回容器中最后一个数据元素</span></span><br></pre></td></tr></table></figure><h1 id="vector-插入和删除操作"><a href="#vector-插入和删除操作" class="headerlink" title="vector 插入和删除操作"></a>vector 插入和删除操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">insert(const_iterator pos, <span class="hljs-keyword">int</span> count,ele);<span class="hljs-comment">//迭代器指向位置 pos 插入 count 个元素 ele.</span></span><br><span class="line">push_back(ele); <span class="hljs-comment">//尾部插入元素 ele</span></span><br><span class="line">pop_back();<span class="hljs-comment">//删除最后一个元素</span></span><br><span class="line">erase(const_iterator start, const_iterator end);<span class="hljs-comment">//删除迭代器从 start 到 end 之间的元素</span></span><br><span class="line">erase(const_iterator pos);<span class="hljs-comment">//删除迭代器指向的元素</span></span><br><span class="line">clear();<span class="hljs-comment">//删除容器中所有元素</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>vector 是个动态数组，当空间不足的时候插入新元素，vector 会重新申请一块更大的 内存空间，将旧空间数据拷贝到新空间，然后释放旧空间。vector 是单口容器，所以在尾 端插入和删除元素效率较高，在指定位置插入，势必会引起数据元素移动，效率较低。</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL-string 容器</title>
      <link href="/post/2d250e1c.html"/>
      <url>/post/2d250e1c.html</url>
      
        <content type="html"><![CDATA[<p>string 是对 char * 的封装，具有如下特性：</p><ul><li>char<em> 是一个指针，string 是一个类。string 实现了对 char</em> 的封装，是 char*  的容器</li><li>string 封装了许多字符串操作的方法，比如 find、copy、delete、replace、insert 等</li><li>不用考虑内存释放和越界，内存由 string 类负责维护</li></ul><a id="more"></a><h1 id="string-与-char-互相转换"><a href="#string-与-char-互相转换" class="headerlink" title="string 与 char* 互相转换"></a>string 与 char* 互相转换</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// string 转 char*</span></span><br><span class="line"><span class="hljs-built_in">string</span> str = <span class="hljs-string">"www.shuiyujie.com"</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* cstr = str.c_str();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// char* 装 string</span></span><br><span class="line"><span class="hljs-keyword">char</span> * s = <span class="hljs-string">"www.shuiyujie.com"</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">sstr</span><span class="hljs-params">(s)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="string-的构造函数"><a href="#string-的构造函数" class="headerlink" title="string 的构造函数"></a>string 的构造函数</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">string</span>();<span class="hljs-comment">//创建一个空的字符串,例如: string str;</span></span><br><span class="line"><span class="hljs-built_in">string</span>(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; str);<span class="hljs-comment">//使用一个string对象初始化另一个string对象</span></span><br><span class="line"><span class="hljs-built_in">string</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s);<span class="hljs-comment">//使用字符串 s 初始化 </span></span><br><span class="line"><span class="hljs-built_in">string</span>(<span class="hljs-keyword">int</span> n, charc);<span class="hljs-comment">//使用 n 个字符 c 初始化</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//例子:</span></span><br><span class="line"><span class="hljs-comment">//默认构造函数</span></span><br><span class="line"><span class="hljs-built_in">string</span> s1;</span><br><span class="line"><span class="hljs-comment">//拷贝构造函数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">s2</span><span class="hljs-params">(s1)</span></span>;</span><br><span class="line"><span class="hljs-built_in">string</span> s2 = s1;</span><br><span class="line"><span class="hljs-comment">//带参数构造函数</span></span><br><span class="line"><span class="hljs-keyword">char</span>* str = <span class="hljs-string">"www.shuiyujie.com"</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">s3</span><span class="hljs-params">(str)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">s4</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-string">'a'</span>)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="string-基本赋值操作"><a href="#string-基本赋值操作" class="headerlink" title="string 基本赋值操作"></a>string 基本赋值操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">string</span>&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s);<span class="hljs-comment">//char*类型字符串赋值给当前的字符串</span></span><br><span class="line"><span class="hljs-built_in">string</span>&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;s);<span class="hljs-comment">//把字符串 s 赋给当前的字符串</span></span><br><span class="line"><span class="hljs-built_in">string</span>&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">char</span> c);<span class="hljs-comment">//字符赋值给当前的字符串</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span>&amp; <span class="hljs-title">assign</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *s)</span></span>;<span class="hljs-comment">//把字符串 s 赋给当前的字符串</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span>&amp; <span class="hljs-title">assign</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *s, <span class="hljs-keyword">int</span> n)</span></span>;<span class="hljs-comment">//把字符串 s 的前 n 个字符赋给当前的字符串</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span>&amp; <span class="hljs-title">assign</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;s)</span></span>;<span class="hljs-comment">//把字符串 s 赋给当前字符串</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span>&amp; <span class="hljs-title">assign</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">char</span> c)</span></span>;<span class="hljs-comment">//用 n 个字符 c 赋给当前字符串</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span>&amp; <span class="hljs-title">assign</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;s, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> n)</span></span>;<span class="hljs-comment">//将 s 从 start 开始 n 个字符赋值给字符串</span></span><br></pre></td></tr></table></figure><h1 id="string-取字符串操作"><a href="#string-取字符串操作" class="headerlink" title="string 取字符串操作"></a>string 取字符串操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">char</span>&amp; <span class="hljs-keyword">operator</span>[](<span class="hljs-keyword">int</span> n);<span class="hljs-comment">//通过[]方式取字符</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">char</span>&amp; <span class="hljs-title">at</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;<span class="hljs-comment">//通过 at 方法获取字符</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//例子:</span></span><br><span class="line"><span class="hljs-built_in">string</span> s = <span class="hljs-string">"www.shuiyujie.com"</span>;</span><br><span class="line"><span class="hljs-keyword">char</span> c = s[];</span><br><span class="line">c = s.at(<span class="hljs-number">1</span>);</span><br></pre></td></tr></table></figure><p>Q: string 中存取字符[]和 at 的异同?</p><p>A: </p><ol><li>相同,[]和 at 都可以返回第 n 个字符</li><li>不同，at 访问越界会抛出异常，[]越界会直接程序会挂掉。</li></ol><h1 id="string-拼接操作"><a href="#string-拼接操作" class="headerlink" title="string 拼接操作"></a>string 拼接操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">string</span>&amp; <span class="hljs-keyword">operator</span>+=(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; str);<span class="hljs-comment">//重载+=操作符</span></span><br><span class="line"><span class="hljs-built_in">string</span>&amp; <span class="hljs-keyword">operator</span>+=(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* str);<span class="hljs-comment">//重载+=操作符</span></span><br><span class="line"><span class="hljs-built_in">string</span>&amp; <span class="hljs-keyword">operator</span>+=(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> c);<span class="hljs-comment">//重载+=操作符</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span>&amp; <span class="hljs-title">append</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *s)</span></span>;<span class="hljs-comment">//把字符串 s 连接到当前字符串结尾</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span>&amp; <span class="hljs-title">append</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *s, <span class="hljs-keyword">int</span> n)</span></span>;<span class="hljs-comment">//把字符串 s 的前 n 个字符连接到当前字符串结尾</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span>&amp; <span class="hljs-title">append</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;s)</span></span>;<span class="hljs-comment">//同 operator+=()</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span>&amp; <span class="hljs-title">append</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;s, <span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> n)</span></span>;<span class="hljs-comment">//把字符串 s 中从 pos 开始的 n 个字符连接到当前字符串结尾</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span>&amp; <span class="hljs-title">append</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">char</span> c)</span></span>;<span class="hljs-comment">//在当前字符串结尾添加 n 个字符 c</span></span><br></pre></td></tr></table></figure><h1 id="string-查找和替换"><a href="#string-查找和替换" class="headerlink" title="string 查找和替换"></a>string 查找和替换</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; str, <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>)</span> <span class="hljs-keyword">const</span></span>; <span class="hljs-comment">//查找 str 第一次出现位置,从 pos 开始查找</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s, <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>)</span> <span class="hljs-keyword">const</span></span>; <span class="hljs-comment">//查找 s 第一次出现位置,从 pos 开始查找</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s, <span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> n)</span> <span class="hljs-keyword">const</span></span>; <span class="hljs-comment">//从 pos 位置查找 s 的前 n 个字符第一次位置</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> c, <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>)</span> <span class="hljs-keyword">const</span></span>; <span class="hljs-comment">//查找字符 c 第一次出现位置</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rfind</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; str, <span class="hljs-keyword">int</span> pos = npos)</span> <span class="hljs-keyword">const</span></span>;<span class="hljs-comment">//查找 str 最后一次位置,从 pos 开始查找</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rfind</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s, <span class="hljs-keyword">int</span> pos = npos)</span> <span class="hljs-keyword">const</span></span>;<span class="hljs-comment">//查找 s 最后一次出现位置,从 pos 开始查找</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rfind</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s, <span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> n)</span> <span class="hljs-keyword">const</span></span>;<span class="hljs-comment">//从 pos 查找 s 的前 n 个字符最后一次位置</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rfind</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> c, <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>)</span> <span class="hljs-keyword">const</span></span>; <span class="hljs-comment">//查找字符 c 最后一次出现位置</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span>&amp; <span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; str)</span></span>; <span class="hljs-comment">//替换从 pos 开始 n 个字符为字符串 str</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span>&amp; <span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s)</span></span>; <span class="hljs-comment">//替换从 pos 开始的 n 个字符为字符串 s</span></span><br></pre></td></tr></table></figure><h1 id="string-比较操作"><a href="#string-比较操作" class="headerlink" title="string 比较操作"></a>string 比较操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">compare 函数在&gt;时返回 1， &lt;时返回 -1，==时返回 0。</span></span><br><span class="line"><span class="hljs-comment">比较区分大小写，比较时参考字典顺序，排越前面的越小。</span></span><br><span class="line"><span class="hljs-comment">大写的 A 比小写的 a 小。</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;s)</span> <span class="hljs-keyword">const</span></span>;<span class="hljs-comment">//与字符串 s 比较</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *s)</span> <span class="hljs-keyword">const</span></span>;<span class="hljs-comment">//与字符串 s 比较</span></span><br></pre></td></tr></table></figure><h1 id="string-子串"><a href="#string-子串" class="headerlink" title="string 子串"></a>string 子串</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">substr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> n = npos)</span> <span class="hljs-keyword">const</span></span>;<span class="hljs-comment">//返回由 pos 开始的 n 个字符组成的字符串</span></span><br></pre></td></tr></table></figure><h1 id="string-插入和删除操作"><a href="#string-插入和删除操作" class="headerlink" title="string 插入和删除操作"></a>string 插入和删除操作</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span>&amp; <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s)</span></span>; <span class="hljs-comment">//插入字符串 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span>&amp; <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; str)</span></span>; <span class="hljs-comment">//插入字符串</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span>&amp; <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">char</span> c)</span></span>;<span class="hljs-comment">//在指定位置插入 n 个字符 c</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span>&amp; <span class="hljs-title">erase</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> n = npos)</span></span>;<span class="hljs-comment">//删除从 Pos 开始的 n 个字符</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL-STL基础概念</title>
      <link href="/post/543335f8.html"/>
      <url>/post/543335f8.html</url>
      
        <content type="html"><![CDATA[<p>STL(Standard Template Library,标准模板库)，是惠普实验室开发的一系列软件的统 称。现在主要出现在 c++ 中，但是在引入 c++ 之前该技术已经存在很长时间了。</p><p>STL 从广义上分为: <strong>容器(container) 算法(algorithm) 迭代器(iterator)</strong>,容器和算法之 间通过迭代器进行无缝连接。STL 几乎所有的代码都采用了模板类或者模板函数，这相比传 统的由函数和类组成的库来说提供了更好的代码重用机会。</p><a id="more"></a><p>STL(Standard Template Library)标准模板库,在我们 c++ 标准程序库中隶属于 STL 的 占到了 80%以上。</p><p>在 c++标准中，STL 被组织成以下 13 个头文件：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;algorithm&gt;、&lt;deque&gt;、&lt;functional&gt;、&lt;iterator&gt;、&lt;vector&gt;、&lt;list&gt;、&lt;map&gt;、 &lt;memory&gt;、&lt;numeric&gt;、&lt;queue&gt;、&lt;set&gt;、&lt;stack&gt; 、&lt;utility&gt;</span><br></pre></td></tr></table></figure><ul><li>容器<ul><li>容器即数据结构，比如说 vector 是动态数组，stack 是栈。</li><li>容器可以嵌套容器</li><li>容器可以分为序列化容器和关联式容器。序列化容器即按照元素进入容器的先后顺序来排列；关联式容器即按照容器定义的其他规则来存放元素。</li></ul></li><li>迭代器：迭代器是为了遍历容器中的元素，可以理解是指针</li><li>算法：STL 为我们提供的算法，算法即用有限的步骤解决问题</li></ul><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//----------------------------------</span></span><br><span class="line"><span class="hljs-comment">// stl 包括三部分：容器、迭代器、算法</span></span><br><span class="line"><span class="hljs-comment">//----------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v; <span class="hljs-comment">// 容器，stl 的标准容器之一，动态数组</span></span><br><span class="line">    v.push_back(<span class="hljs-number">1</span>); <span class="hljs-comment">// Vector 容器提供的插入数据的方法</span></span><br><span class="line">    v.push_back(<span class="hljs-number">3</span>);</span><br><span class="line">    v.push_back(<span class="hljs-number">6</span>);</span><br><span class="line">    v.push_back(<span class="hljs-number">4</span>);</span><br><span class="line">    v.push_back(<span class="hljs-number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator pBegin = v.begin(); <span class="hljs-comment">// 迭代器，获取指向第一个元素的指针</span></span><br><span class="line">    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator pEnd = v.end(); <span class="hljs-comment">// 迭代器，获取指向最后一个元素的指针</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> n = count(pBegin, pEnd, <span class="hljs-number">3</span>); <span class="hljs-comment">// 算法，统计 3 出现的次数</span></span><br><span class="line">    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"n = "</span> &lt;&lt; n &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 使用迭代器遍历 vector</span></span><br><span class="line">    <span class="hljs-keyword">while</span>(pBegin != pEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">cout</span> &lt;&lt; *pBegin &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">        pBegin++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来一系列的文章将介绍 STL 中的常用容器和常用算法。</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理——边缘检测</title>
      <link href="/post/1d0f563b.html"/>
      <url>/post/1d0f563b.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/2019-06-03-00-12-54.png" alt="边缘检测"></p><p>边缘检测是为了识别物体的边缘，而边缘是由数字图像中亮度变化明显的点连接而成的，主要可以通过基于图像强度的一阶和二阶导数来寻找到这些点。</p><p>边缘检测可以分成三个步骤：</p><ol><li>滤波。由于导数对噪声敏感，所以在边缘检测之前可以先试着<a href="https://shuiyujie.com/post/d966aba8.html">降低图片的噪声</a>，常用的是高斯滤波。</li><li>增强。增强算法可以将图像灰度点邻域强度值有显著变化的点凸显出来，可以通过计算梯度幅值来确定。</li><li>检测。根据梯度幅值就可以检测出物体的边缘，由于经过图像增强，有些店并不是要找的边缘值，我们还可以通过阈值化的方式来筛选。</li></ol><a id="more"></a><h1 id="canny"><a href="#canny" class="headerlink" title="canny"></a>canny</h1><blockquote><p><a href="https://zh.wikipedia.org/wiki/Canny%E7%AE%97%E5%AD%90" target="_blank" rel="noopener">Canny边缘检测算子</a>是澳洲计算机科学家<a href="https://zh.wikipedia.org/w/index.php?title=%E7%B4%84%E7%BF%B0%C2%B7%E5%9D%8E%E5%B0%BC&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">约翰·坎尼</a>（John F. Canny）于1986年开发出来的一个多级<a href="https://zh.wikipedia.org/wiki/%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">边缘检测</a><a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">算法</a>。更为重要的是Canny创立了“边缘检测计算理论”（computational theory of edge detection）解释这项技术如何工作。</p><p>Canny的目标是找到一个最优的边缘检测算法，最优边缘检测的含义是：</p><ul><li><em>好的检测</em> - 算法能够尽可能多地标识出图像中的实际边缘。</li><li><em>好的定位</em> - 标识出的边缘要与实际图像中的实际边缘尽可能接近。</li><li><em>最小响应</em> - 图像中的边缘只能标识一次，并且可能存在的图像噪声不应标识为边缘。</li></ul><p>为了满足这些要求Canny使用了<a href="https://zh.wikipedia.org/wiki/%E5%8F%98%E5%88%86%E6%B3%95" target="_blank" rel="noopener">变分法</a>，这是一种寻找满足特定<a href="https://zh.wikipedia.org/wiki/%E5%8A%9F%E8%83%BD" target="_blank" rel="noopener">功能</a>的<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">函数</a>的方法。最优检测使用四个<a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E6%95%B0%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">指数函数</a>项的和表示，但是它非常近似于<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E6%96%AF%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">高斯函数</a>的一阶<a href="https://zh.wikipedia.org/wiki/%E5%AF%BC%E6%95%B0" target="_blank" rel="noopener">导数</a>。</p><p>—— 维基百科</p></blockquote><p>我们可以使用 OpenCV 中的 <a href="https://docs.opencv.org/3.1.0/da/d22/tutorial_py_canny.html" target="_blank" rel="noopener">Canny()</a> 来做边缘检测。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">void</span> cv::Canny(InputArray image,</span><br><span class="line">OutputArray edges,</span><br><span class="line"><span class="hljs-keyword">double</span> threshold1,</span><br><span class="line"><span class="hljs-keyword">double</span> threshold2,</span><br><span class="line"><span class="hljs-keyword">int</span> apertureSize = <span class="hljs-number">3</span>,</span><br><span class="line"><span class="hljs-keyword">bool</span> L2gradient = <span class="hljs-literal">false</span> </span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>src: 源图像，8位即可</li><li>edges: 输出的边缘图，要求与源图像保持一样的尺寸和类型</li><li>threshold1: 第一个滞后性阈值</li><li>threshold2: 第二个滞后性阈值</li><li>apertureSize: 表示应该用 Sobel 算子的空间大小，默认为 3</li><li>L2gradient: 计算图像梯度幅值的标识，默认为 false</li></ul><p><em>注：threshold1 和 threshold2 中较小的用于边缘连接，交大的用来控制强边缘的初始段，推荐的高低阈值比在 2:1 到 3:1 之间。</em></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"opencv2/highgui.hpp"</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"opencv2/imgcodecs.hpp"</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"opencv2/imgproc.hpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    cv::Mat src = cv::imread(<span class="hljs-string">"../images/persimmon.jpg"</span>, cv::IMREAD_COLOR);</span><br><span class="line"></span><br><span class="line">    cv::Mat dst, edge, gray;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 【1】创建与src同类型和大小的矩阵(dst)</span></span><br><span class="line">    dst.create(src.size(), src.type());</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 【2】将原图像转换为灰度图像</span></span><br><span class="line">    cv::cvtColor(src, gray, cv::COLOR_BGR2GRAY);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 【3】运行Canny算子</span></span><br><span class="line">    cv::Canny(gray, edge, <span class="hljs-number">150</span>, <span class="hljs-number">50</span>, <span class="hljs-number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 【4】显示效果图</span></span><br><span class="line">    cv::namedWindow(<span class="hljs-string">"【原图】边缘检测"</span>, cv::WINDOW_NORMAL);</span><br><span class="line">    cv::namedWindow(<span class="hljs-string">"【效果图】Canny边缘检测"</span>, cv::WINDOW_NORMAL);</span><br><span class="line"></span><br><span class="line">    imshow(<span class="hljs-string">"【原图】边缘检测"</span>, gray);</span><br><span class="line">    imshow(<span class="hljs-string">"【效果图】Canny边缘检测"</span>, edge);</span><br><span class="line"></span><br><span class="line">    cv::waitKey(<span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="sobel"><a href="#sobel" class="headerlink" title="sobel"></a>sobel</h1><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E7%B4%A2%E8%B2%9D%E7%88%BE%E7%AE%97%E5%AD%90" target="_blank" rel="noopener">索伯算子(Sobel operator)</a> 是<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86" target="_blank" rel="noopener">图像处理</a>中的<a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E5%AD%90" target="_blank" rel="noopener">算子</a>之一，有时又称为<strong>索伯-费德曼算子</strong>或<strong>索贝滤波器</strong>，在<a href="https://zh.wikipedia.org/wiki/%E5%BD%B1%E5%83%8F%E8%99%95%E7%90%86" target="_blank" rel="noopener">影像处理</a>及<a href="https://zh.wikipedia.org/w/index.php?title=%E9%9B%BB%E8%85%A6%E8%A6%96%E8%A6%BA%E9%A0%98%E5%9F%9F&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">电脑视觉领域</a>中常被用来做<a href="https://zh.wikipedia.org/wiki/%E9%82%8A%E7%B7%A3%E6%AA%A2%E6%B8%AC" target="_blank" rel="noopener">边缘检测</a>。索伯算子最早是由美国计算机科学家<a href="https://zh.wikipedia.org/w/index.php?title=%E8%89%BE%E7%88%BE%E6%96%87%C2%B7%E7%B4%A2%E4%BC%AF&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">艾尔文·索伯</a>（Irwin Sobel）及<a href="https://zh.wikipedia.org/w/index.php?title=%E8%93%8B%E7%91%9E%C2%B7%E8%B2%BB%E5%BE%B7%E6%9B%BC&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">盖瑞·费德曼</a>（Gary Feldman）于1968年在<a href="https://zh.wikipedia.org/wiki/%E5%8F%B2%E4%B8%B9%E4%BD%9B%E5%A4%A7%E5%AD%B8" target="_blank" rel="noopener">史丹佛大学</a>的人工智能实验室(SAIL)所提出，因此为了表扬他们的贡献，才用他们的名字命名。在技术上，它是一离散性<a href="https://zh.wikipedia.org/wiki/%E5%B7%AE%E5%88%86" target="_blank" rel="noopener">差分</a>算子，用来运算图像亮度函数的梯度之近似值。在图像的任何一点使用此算子，索伯算子的运算将会产生对应的梯度向量或是其范数。概念上，索伯算子就是一个小且是整数的滤波器对整张影像在水平及垂直方向上做卷积，因此它所需的运算资源相对较少，另一方面，对于影像中的频率变化较高的地方，它所得的梯度之近似值也比较粗糙。</p><p>—— 维基百科</p></blockquote><p><a href="https://docs.opencv.org/3.4.0/d2/d2c/tutorial_sobel_derivatives.html" target="_blank" rel="noopener">Sobel 函数</a>使用扩展的 Sobel 算子来计算一阶、二阶、三阶或者混合图像的差分，来看一下 OpenCV 中的 Sobel()。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">void</span> cv::Sobel(InputArray src,</span><br><span class="line">OutputArray dst,</span><br><span class="line"><span class="hljs-keyword">int</span> ddepth,</span><br><span class="line"><span class="hljs-keyword">int</span> dx,</span><br><span class="line"><span class="hljs-keyword">int</span> dy,</span><br><span class="line"><span class="hljs-keyword">int</span> ksize = <span class="hljs-number">3</span>,</span><br><span class="line"><span class="hljs-keyword">double</span> scale = <span class="hljs-number">1</span>,</span><br><span class="line"><span class="hljs-keyword">double</span> delta = <span class="hljs-number">0</span>,</span><br><span class="line"><span class="hljs-keyword">int</span> borderType = BORDER_DEFAULT </span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>src: 源图像，Mat 类型</li><li>dst: 输出图像，尺寸和类型需要与 src 相同</li><li>ddepth: 输出图像深度，支持如下 src.depth() 和 ddepth 的组合</li><li>dx:  x 方向上的差分阶数</li><li>dy: y 方向上的差分阶数</li><li>ksize: Sobel 卷积核的代销，默认值为 3，必须取 1、3、5 或 7</li><li>scale: 计算导数值时可选的缩放因子，默认值是 1，表示默认情况下是没有应用缩放的，更多可以查看文档</li><li>delta: 表示结果存入输出图像之前可选的 delta 值，默认为 0</li><li>borderType: 推断图像外包部像素的某种边界模式，一般用默认的即可</li></ul><p>注：</p><ol><li>当内核大小为 3 时，Sobel 内核可能产生比较明显的误差。为此 OpenCV 提供了结果更加精确的 <a href="https://docs.opencv.org/3.4.0/d4/d86/group__imgproc__filter.html#gaa13106761eedf14798f37aa2d60404c9" target="_blank" rel="noopener">Scharr()</a> ，它仅作用于大小为 3 的卷积核，运行速度与 Sobel() 一样快，当结果更精确。</li><li>计算图像 X 方向导数是可以取 <code>xorder = 1, uorder = 0, ksize = 3</code></li><li>计算图像 Y 方向导数是可以取 <code>xorder = 0, uorder = 1, ksize = 3</code></li></ol><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//---------------【边缘检测】----------------</span></span><br><span class="line"><span class="hljs-comment">// 描述：sobel 函数用法示例</span></span><br><span class="line"><span class="hljs-comment">//------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-comment">//【0】创建 grad_x 和 grad_y 矩阵</span></span><br><span class="line">Mat grad_x, grad_y;</span><br><span class="line">Mat abs_grad_x, abs_grad_y,dst;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//【1】载入原始图  </span></span><br><span class="line">Mat src = imread(<span class="hljs-string">"images/2.jpg"</span>);  <span class="hljs-comment">//工程目录下应该有一张名为1.jpg的素材图</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//【2】显示原始图 </span></span><br><span class="line">imshow(<span class="hljs-string">"【原始图】sobel边缘检测"</span>, src); </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//【3】求 X方向梯度</span></span><br><span class="line">Sobel( src, grad_x, CV_16S, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, BORDER_DEFAULT );</span><br><span class="line">convertScaleAbs( grad_x, abs_grad_x );</span><br><span class="line">imshow(<span class="hljs-string">"【效果图】 X方向Sobel"</span>, abs_grad_x); </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//【4】求Y方向梯度</span></span><br><span class="line">Sobel( src, grad_y, CV_16S, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, BORDER_DEFAULT );</span><br><span class="line">convertScaleAbs( grad_y, abs_grad_y );</span><br><span class="line">imshow(<span class="hljs-string">"【效果图】Y方向Sobel"</span>, abs_grad_y); </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//【5】合并梯度(近似)</span></span><br><span class="line">addWeighted( abs_grad_x, <span class="hljs-number">0.5</span>, abs_grad_y, <span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>, dst );</span><br><span class="line">imshow(<span class="hljs-string">"【效果图】整体方向Sobel"</span>, dst); </span><br><span class="line"></span><br><span class="line">waitKey(<span class="hljs-number">0</span>); </span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Laplacian"><a href="#Laplacian" class="headerlink" title="Laplacian"></a>Laplacian</h1><blockquote><p>在<a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E5%AD%B8" target="_blank" rel="noopener">数学</a>以及<a href="https://zh.wikipedia.org/wiki/%E7%89%A9%E7%90%86" target="_blank" rel="noopener">物理</a>中，<strong>拉普拉斯算子</strong>或是<strong>拉普拉斯算符</strong>（英语：<strong>Laplace operator, Laplacian</strong>）是由<a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%A9%BA%E9%97%B4" target="_blank" rel="noopener">欧几里得空间</a>中的一个函数的<a href="https://zh.wikipedia.org/wiki/%E6%A2%AF%E5%BA%A6" target="_blank" rel="noopener">梯度</a>的<a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%BA%A6" target="_blank" rel="noopener">散度</a>给出的<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E5%88%86%E7%AE%97%E5%AD%90" target="_blank" rel="noopener">微分算子</a>，通常写成 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/32769037c408874e1890f77554c65f39c523ebe2" alt="\Delta ">、<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f4be87ad083e5ead48d92b0c82f2d4e719cb34a6" alt="{\displaystyle \nabla ^{2}}"> 或<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9464c9bf2670581ed86a15bc9c2e8ac4b6ab1484" alt="{\displaystyle \nabla \cdot \nabla }">。</p><p>这名字是为了纪念<a href="https://zh.wikipedia.org/wiki/%E6%B3%95%E5%9B%BD" target="_blank" rel="noopener">法国</a>数学家<a href="https://zh.wikipedia.org/wiki/%E7%9A%AE%E8%80%B6-%E8%A5%BF%E8%92%99%C2%B7%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF" target="_blank" rel="noopener">皮埃尔-西蒙·拉普拉斯</a>（1749–1827）而命名的。他在研究<a href="https://zh.wikipedia.org/wiki/%E5%A4%A9%E4%BD%93%E5%8A%9B%E5%AD%A6" target="_blank" rel="noopener">天体力学</a>在数学中首次应用<a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E5%AD%90" target="_blank" rel="noopener">算子</a>，当它被施加到一个给定的<a href="https://zh.wikipedia.org/wiki/%E9%87%8D%E5%8A%9B%E4%BD%8D" target="_blank" rel="noopener">重力位</a>（Gravitational potential）的时候，其中所述算子给出的质量密度的常数倍。经拉普拉斯算子运算为零∆f=0的<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B8" target="_blank" rel="noopener">函数</a>称为<a href="https://zh.wikipedia.org/wiki/%E8%B0%83%E5%92%8C%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">调和函数</a>，现在称为<a href="https://zh.wikipedia.org/wiki/%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E6%96%B9%E7%A8%8B" target="_blank" rel="noopener">拉普拉斯方程</a>，和代表了在自由空间中的可能的重力场。</p><p>拉普拉斯算子有许多用途，此外也是<a href="https://zh.wikipedia.org/wiki/%E6%A4%AD%E5%9C%86%E7%AE%97%E5%AD%90" target="_blank" rel="noopener">椭圆算子</a>中的一个重要例子。</p><p>拉普拉斯算子出现描述许多物理现象的微分方程里。例如，常用于<a href="https://zh.wikipedia.org/wiki/%E6%B3%A2%E6%96%B9%E7%A8%8B" target="_blank" rel="noopener">波方程</a>的<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener">数学模型</a>、<a href="https://zh.wikipedia.org/wiki/%E7%86%B1%E5%82%B3%E5%B0%8E%E6%96%B9%E7%A8%8B" target="_blank" rel="noopener">热传导方程</a>、<a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E4%BD%93%E5%8A%9B%E5%AD%A6" target="_blank" rel="noopener">流体力学</a>以及<a href="https://zh.wikipedia.org/wiki/%E4%BA%A5%E5%A7%86%E9%9C%8D%E5%85%B9%E6%96%B9%E7%A8%8B" target="_blank" rel="noopener">亥姆霍兹方程</a>。在<a href="https://zh.wikipedia.org/wiki/%E9%9D%9C%E9%9B%BB%E5%AD%B8" target="_blank" rel="noopener">静电学</a>中，<a href="https://zh.wikipedia.org/wiki/%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E6%96%B9%E7%A8%8B" target="_blank" rel="noopener">拉普拉斯方程</a>和<a href="https://zh.wikipedia.org/wiki/%E6%B3%8A%E6%9D%BE%E6%96%B9%E7%A8%8B" target="_blank" rel="noopener">泊松方程</a>的应用随处可见。在<a href="https://zh.wikipedia.org/wiki/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%B8" target="_blank" rel="noopener">量子力学</a>中，其代表<a href="https://zh.wikipedia.org/wiki/%E8%96%9B%E4%B8%81%E6%A0%BC%E6%96%B9%E7%A8%8B%E5%BC%8F" target="_blank" rel="noopener">薛定谔方程</a>中的<a href="https://zh.wikipedia.org/wiki/%E5%8B%95%E8%83%BD" target="_blank" rel="noopener">动能</a>项。</p><p>拉普拉斯算子是最简单的<a href="https://zh.wikipedia.org/wiki/%E6%A4%AD%E5%9C%86%E7%AE%97%E5%AD%90" target="_blank" rel="noopener">椭圆算子</a>，并且拉普拉斯算子是<a href="https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A5%87%E7%90%86%E8%AB%96" target="_blank" rel="noopener">霍奇理论</a>的核心，并且是<a href="https://zh.wikipedia.org/wiki/%E5%BE%B7%E6%8B%89%E5%A7%86%E4%B8%8A%E5%90%8C%E8%B0%83" target="_blank" rel="noopener">德拉姆上同调</a>的结果。在<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86" target="_blank" rel="noopener">图像处理</a>和<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89" target="_blank" rel="noopener">计算机视觉</a>中，拉普拉斯算子已经被用于诸如<a href="https://zh.wikipedia.org/w/index.php?title=%E6%96%91%E7%82%B9%E6%A3%80%E6%B5%8B&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">斑点检测</a>和<a href="https://zh.wikipedia.org/wiki/%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">边缘检测</a>等的各种任务。</p></blockquote><p>Laplacian 使用了图像梯度，它内部的代码调用了 Sobel 算子。让一幅图像减去它的 Laplacian 算子可以增强对比度。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">void</span> cv::Laplacian(InputArray src,</span><br><span class="line">OutputArray dst,</span><br><span class="line"><span class="hljs-keyword">int</span> ddepth,</span><br><span class="line"><span class="hljs-keyword">int</span> ksize = <span class="hljs-number">1</span>,</span><br><span class="line"><span class="hljs-keyword">double</span> scale = <span class="hljs-number">1</span>,</span><br><span class="line"><span class="hljs-keyword">double</span> delta = <span class="hljs-number">0</span>,</span><br><span class="line"><span class="hljs-keyword">int</span> borderType = BORDER_DEFAULT </span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>src: 源图像，Mat 类型，需要为<strong>单通道 8 位图像</strong></li><li>dst: 输出图像，尺寸和类型需要与 src 相同</li><li>ddepth: 输出图像深度</li><li>ksize: 用于计算二阶大数的滤波器的孔径尺寸，大小必须正奇数，默认值为 1</li><li>scale: 计算拉普拉斯值的时候可选的比例因子，默认值为 1</li><li>delta: 在结果存入输出图像全可选的 delta 值，默认值为 0</li><li>borderType: 推断图像外包部像素的某种边界模式，一般用默认的即可</li></ul><p>注：Laplacian() 函数使用  sobel 运算，加上 sobel 算子运算出图像 dx 和 dy，来得到载入图像的拉普拉斯变换的结果。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//---------------【边缘检测】----------------</span></span><br><span class="line"><span class="hljs-comment">// 描述：laplacian 函数用法示例</span></span><br><span class="line"><span class="hljs-comment">//------------------------------------------</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    cv::Mat src, src_gray, dst, abs_dst;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 载入原图像</span></span><br><span class="line">    src = cv::imread(<span class="hljs-string">"images/3.jpg"</span>, cv::IMREAD_COLOR);;</span><br><span class="line">    cv::imshow(<span class="hljs-string">"【原图】"</span>, src);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 使用高斯滤波降噪</span></span><br><span class="line">    cv::GaussianBlur(src, src, cv::Size(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, cv::BORDER_DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 转换为灰度图</span></span><br><span class="line">    cv::cvtColor(src, src_gray, cv::COLOR_BGR2GRAY);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 使用 Laplacian 函数</span></span><br><span class="line">    cv::Laplacian(src_gray, dst, CV_16S, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, cv::BORDER_DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//【6】计算绝对值，并将结果转换成8位</span></span><br><span class="line">convertScaleAbs( dst, abs_dst );</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//【7】显示效果图</span></span><br><span class="line">cv::imshow( <span class="hljs-string">"【效果图】图像Laplace变换"</span>, abs_dst );</span><br><span class="line"></span><br><span class="line">cv::waitKey(<span class="hljs-number">0</span>); </span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理——图像降噪</title>
      <link href="/post/d966aba8.html"/>
      <url>/post/d966aba8.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/2019-06-02-14-26-47.png" alt="图像降噪"></p><p>数字图像在数字化和成像过程中会受到成像设备或外界环境的影响，受到干扰产生的图像叫做噪声图像。</p><p>按照噪声的引入方式分类，可以将噪声分成<strong>加性噪声</strong>和<strong>乘法性噪声</strong>。加性噪声的幅度与信号的幅度无关，是叠加在图像上的，比较容易去除。成性噪声的幅度与信号的幅度成正比，比较难去除。不过乘性噪声可以通过取对数的方式转化为加性噪声，实际上大部分去噪算法都会假设噪声为<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E6%80%A7%E9%AB%98%E6%96%AF%E7%99%BD%E5%99%AA%E5%A3%B0" target="_blank" rel="noopener">加性高斯白噪声</a>。</p><p>按照噪声的性质分类，可以将噪声分成<a href="https://en.wikipedia.org/wiki/Impulse_noise_(audio" target="_blank" rel="noopener">脉冲噪声(Impluse Noise)</a>)，<a href="https://en.wikipedia.org/wiki/Salt-and-pepper_noise" target="_blank" rel="noopener">椒盐噪声(Pepper-Salt noise)</a>和⾼斯⽩噪声(Gaussian white noise)，莱斯噪声(Racian noise)等。</p><p>传统降噪算法根据降噪的原理不同可分为基于邻域像素特征的⽅法，基于频域变换的⽅法，和基于特定模型的⽅法。本文主要讲述基于邻域像素特征的方法，并用 OpenCV 实现相应算法。</p><a id="more"></a><p>基于邻域像素特征的⽅法，是通过分析在⼀定⼤⼩的窗口内，中⼼像素与其他相邻像素之间在灰度空间的直接联系，来获取新的中⼼像素值的⽅法，因此往往都会存在⼀个典型的输⼊参数，即滤波半径 r。此滤波半径可能被⽤于在该局部窗⼜内计算像素的相似性，也可能是⼀些⾼斯或拉普拉斯算⼦的计算窗口。在邻域滤波⽅法⾥⾯，最具有代表性的滤波⽅法有以下⼏种。</p><h1 id="算数均值滤波"><a href="#算数均值滤波" class="headerlink" title="算数均值滤波"></a>算数均值滤波</h1><p><img src="http://image.shuiyujie.com/2019-06-03-01-26-22.png" alt="均值滤波示意图"></p><p><em>上图演示 6x6 的图片，采用边框补零的方式，与 3x3 的卷积核做步长为 1 的卷积操作。</em></p><p>原理：均值滤波用像素邻域的平均灰度来代替像素值，适用于脉冲噪声，因为脉冲噪声一般与周围像素的灰度级不相关，而且亮度高出其他像素很多。</p><p>缺点：均值滤波随着半径取值增大而变得越来越模糊，因为均值操作之后，噪声被分散到了周围像素点，但是噪声区域也不可避免地增大了。</p><p>解决：采用设定阈值的方式可以一定程度上避免这一问题。比较噪声和领域像素的灰度，只有当灰度差达到设定的阈值才判定为噪声。</p><p>实现：可以使用 OpenCV 中的 <a href="https://docs.opencv.org/master/d4/d86/group__imgproc__filter.html#ga8c45db9afe636703801b0b2e440fce37" target="_blank" rel="noopener">blur()</a> 实现算数均值滤波的效果。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">void</span> cv::blur(InputArray src,</span><br><span class="line">OutputArray dst,</span><br><span class="line">Size ksize,</span><br><span class="line">Point anchor = Point(<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>),</span><br><span class="line"><span class="hljs-keyword">int</span> borderType = BORDER_DEFAULT </span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>src: 带有噪声的原图像，深度必须为 CV_8U, CV_16U, CV_16S, CV_32F or CV_64F 中的一种</li><li>dst: 去噪之后的图像，要求图像大小与噪声图像一样，可以使用 Mat::Clone 的方法实现</li><li>ksize: 卷积核的大小，比如说 Size(3, 3) 表示大小为 3x3 的矩阵</li><li>point: Point 类型的 anchor，采用默认值表示取卷积核的中心为锚点</li><li>borderType: 推断图像外包部像素的某种边界模式，一般用默认的即可</li></ul><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv::blur(src, meanFilter, cv::Size(<span class="hljs-number">6</span>, <span class="hljs-number">6</span>));</span><br></pre></td></tr></table></figure><h1 id="高斯滤波"><a href="#高斯滤波" class="headerlink" title="高斯滤波"></a>高斯滤波</h1><p>原理：用一个卷积核扫描图像中的每一个像素，确定领域内像素的加权平均灰度值去代替模板中心像素点的值。图像高斯模糊的过程就是图像与正态分布做卷积，正态分布也叫高斯分布，所以也叫高斯模糊技术。</p><p>优点：相比于均值滤波，高斯滤波矩阵的权值随着与中心像素点距离的增加呈现高斯衰减的特性，因此对距离算子越远的像素点作用越小，从⽽能在⼀定程度上保持图像的边缘特征。通过调节⾼斯平滑参数，可以在图像特征过分模糊和⽋平滑之间取得折中。</p><p>实现：可以使用 OpenCV 中的 <a href="https://docs.opencv.org/master/d4/d86/group__imgproc__filter.html#gaabe8c836e97159a9193fb0b11ac52cf1" target="_blank" rel="noopener">GaussianBlur()</a> 实现算数均值滤波的效果。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">void</span> cv::GaussianBlur (InputArray src,</span><br><span class="line">OutputArray dst,</span><br><span class="line">Size ksize,</span><br><span class="line"><span class="hljs-keyword">double</span> sigmaX,</span><br><span class="line"><span class="hljs-keyword">double</span> sigmaY = <span class="hljs-number">0</span>,</span><br><span class="line"><span class="hljs-keyword">int</span> borderType = BORDER_DEFAULT </span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>src: 带有噪声的原图像，深度必须为 CV_8U, CV_16U, CV_16S, CV_32F or CV_64F 中的一种</li><li>dst: 去噪之后的图像，要求图像大小与噪声图像一样，可以使用 Mat::Clone 的方法实现</li><li>ksize: 高斯滤波矩阵的代销，ksize.width and ksize.height 可以不同，但必须为正数、奇数或零，它们是用过 signma 计算得到的。</li><li>sigmaX: 高斯核函数在 X 方向的标准偏差</li><li>sigmaY: 高斯核函数在 Y 方向的标准偏差。若 sigmaY 为 0 就将其设为 sigmaX；若 sigmaX 和 sigmaY 都为 0，则通过 ksize.width and ksize.height 计算得出。</li><li>borderType: 推断图像外包部像素的某种边界模式，一般用默认的即可</li></ul><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv::GaussianBlur(src, gaussianBlur, cv::Size(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br></pre></td></tr></table></figure><h1 id="统计中值滤波"><a href="#统计中值滤波" class="headerlink" title="统计中值滤波"></a>统计中值滤波</h1><p>原理：对窗口内的像素值进⾏排序，然后使⽤灰度值的中间值代替窗口中⼼位置像素的灰度，适⽤于椒盐噪声和脉冲噪声。</p><p>优点：中值滤波属于非线性滤波，当噪声是散粒噪声而不是高斯噪声时，即图像偶尔会出现很大的值时，用高斯滤波对图像进行模糊噪声像素不会被去除，而中值滤波⽐相同尺⼨的线性平滑滤波器引起的模糊更少，能较好的保持边缘。</p><p>缺点：中值滤波会使图像中的⼩⽬标丢失。当噪声像素个数⼤于窗口像素总数的⼀半时，由于灰度排序的中间值仍为噪声像素灰度值，会导致滤波效果很差，且中值滤波花费的时间是均值滤波的 5 倍以上。</p><p>实现：可以使用 OpenCV 中的 <a href="https://docs.opencv.org/master/d4/d86/group__imgproc__filter.html#ga564869aa33e58769b4469101aac458f9" target="_blank" rel="noopener">medianBlur()</a> 实现中值滤波。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">void</span> cv::medianBlur(InputArray src,</span><br><span class="line">OutputArray dst,</span><br><span class="line"><span class="hljs-keyword">int</span> ksize</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>src: 带有噪声的原图像，深度必须为 CV_8U, CV_16U, CV_16S, CV_32F or CV_64F 中的一种</li><li>dst: 去噪之后的图像，要求图像大小与噪声图像一样，可以使用 Mat::Clone 的方法实现</li><li>ksize: aperture linear size，必须为大于 1 的奇数，比如：3、5、7、9……</li></ul><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv::medianBlur(src, medianBlur, <span class="hljs-number">3</span>);</span><br></pre></td></tr></table></figure><h1 id="双边滤波"><a href="#双边滤波" class="headerlink" title="双边滤波"></a>双边滤波</h1><p>原理：滤波器是由两个函数构成。⼀个函数是由⼏何空间距离决定滤波器系数，另⼀个由像素差值决定滤波器系数。双边滤波器中，输出像素的值依赖于邻域像素的值的加权组合，它同时考虑了空间域与值域的差别。</p><p>优点：可以做到边缘保存，在边缘附近，距离较远的像素不会对边缘上的像素造成太大影响。</p><p>缺点：由于保存了过多的高频信息，对于图像里的高频噪声，双边滤波器不能干净地过滤掉，只能对于低频信号进行较好的滤波。</p><p>实现：可以使用 OpenCV 中的 <a href="https://docs.opencv.org/master/d4/d86/group__imgproc__filter.html#ga9d7064d478c95d60003cf839430737ed" target="_blank" rel="noopener">bilateralFilter()</a>  实现双边滤波的效果。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">void</span> cv::bilateralFilter(InputArray src,</span><br><span class="line">OutputArray dst,</span><br><span class="line"><span class="hljs-keyword">int</span> d,</span><br><span class="line"><span class="hljs-keyword">double</span> sigmaColor,</span><br><span class="line"><span class="hljs-keyword">double</span> sigmaSpace,</span><br><span class="line"><span class="hljs-keyword">int</span> borderType = BORDER_DEFAULT </span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>src: 带有噪声的原图像，深度必须为 CV_8U, CV_16U, CV_16S, CV_32F or CV_64F 中的一种</li><li>dst: 去噪之后的图像，要求图像大小与噪声图像一样，可以使用 Mat::Clone 的方法实现</li><li>d: 表示在过滤过程中每个像素邻域的直径，如果这个值被设为非正数，那么 OpenCV 会从第 5 个参数 sigmaSpace 来计算出它</li><li>sigmaColor: 颜色空间滤波器 sigma 值，这个参数的值越大，就表名该像素邻域范围内有越宽广的颜色会被很合到一起，产生较大的半相等颜色区域</li><li>sigmaSpace: 做表空间中滤波器的 sigma 值，坐标空间的标注方差。它的数值越大，意味着越远的像素会相互影响，从而使更大的区域中足够相似的颜色获得相同的颜色。当 d&gt;0 时，d 指定了邻域大小且与 sigmaSpace 无关。否则，d 正比于 sigmaSpace。</li><li>borderType: 推断图像外包部像素的某种边界模式，一般用默认的即可</li></ul><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv::bilateralFilter(src,bilateralfilter,<span class="hljs-number">25</span>,<span class="hljs-number">25</span>*<span class="hljs-number">2</span>,<span class="hljs-number">25</span>/<span class="hljs-number">2</span>);</span><br></pre></td></tr></table></figure><h1 id="代码与效果演示"><a href="#代码与效果演示" class="headerlink" title="代码与效果演示"></a>代码与效果演示</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 使用 4 种空域滤波方法,对 noise 图进行降噪</span></span><br><span class="line"><span class="hljs-comment"> * </span></span><br><span class="line"><span class="hljs-comment"> * 1. 算数均值滤波</span></span><br><span class="line"><span class="hljs-comment"> * 2. 高斯滤波</span></span><br><span class="line"><span class="hljs-comment"> * 3. 统计中值滤波</span></span><br><span class="line"><span class="hljs-comment"> * 4. 双边滤波</span></span><br><span class="line"><span class="hljs-comment"> * </span></span><br><span class="line"><span class="hljs-comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"opencv2/imgproc.hpp"</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"opencv2/highgui.hpp"</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"opencv2/imgcodecs.hpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    cv::Mat src = cv::imread(<span class="hljs-string">"../images/noise.jpg"</span>, cv::IMREAD_COLOR);</span><br><span class="line">    cv::Mat meanFilter;</span><br><span class="line">    cv::Mat medianBlur;</span><br><span class="line">    cv::Mat gaussianBlur;</span><br><span class="line">    cv::Mat bilateralfilter;</span><br><span class="line"></span><br><span class="line">    cv::blur(src, meanFilter, cv::Size(<span class="hljs-number">6</span>, <span class="hljs-number">6</span>));</span><br><span class="line">    cv::GaussianBlur(src, gaussianBlur, cv::Size(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="line">    cv::medianBlur(src, medianBlur, <span class="hljs-number">3</span>);</span><br><span class="line">    cv::bilateralFilter(src,bilateralfilter,<span class="hljs-number">25</span>,<span class="hljs-number">25</span>*<span class="hljs-number">2</span>,<span class="hljs-number">25</span>/<span class="hljs-number">2</span>);</span><br><span class="line"></span><br><span class="line">    cv::imshow(<span class="hljs-string">"1. src"</span>, src);</span><br><span class="line">    cv::imshow(<span class="hljs-string">"2. meanFilter"</span>, meanFilter);</span><br><span class="line">    cv::imshow(<span class="hljs-string">"3. gaussianBlur"</span>, gaussianBlur);</span><br><span class="line">    cv::imshow(<span class="hljs-string">"4. medianBlur"</span>, medianBlur);</span><br><span class="line">    cv::imshow(<span class="hljs-string">"5. bilateralfilter"</span>, bilateralfilter);</span><br><span class="line"></span><br><span class="line">    cv::waitKey(<span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.shuiyujie.com/filter.png" alt="图像降噪效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV-Mat表达式</title>
      <link href="/post/1208a55a.html"/>
      <url>/post/1208a55a.html</url>
      
        <content type="html"><![CDATA[<p>利用 C++中的运算符重载，OpenCV 2 中引入了 Mat 运算表达式。这一新特 点使得使用 C++进行编程时，就如同写 Matlab 脚本，代码变得简洁易懂，也便于维护。</p><p>下面给出 Mat 表达式所支持的运算。下面的列表中使用 A 和 B 表示 Mat 类 型的对象，使用 s 表示 Scalar 对象，alpha 表示 double 值。</p><ul><li>加法，减法，取负：<code>A+B</code>，<code>A-B</code>，<code>A+s</code>，<code>A-s</code>，<code>s+A</code>，<code>s-A</code>，<code>-A</code> </li><li>缩放取值范围：<code>A*alpha</code></li><li>矩阵对应元素的乘法和除法： <code>A.mul(B)</code>，<code>A/B</code>，<code>alpha/A</code> </li><li>矩阵乘法：<code>A*B</code> （注意此处是矩阵乘法，而不是矩阵对应元素相乘）</li><li>矩阵转置：<code>A.t()</code></li><li>矩阵求逆和求伪逆：<code>A.inv()</code></li><li>矩阵比较运算：<code>A cmpop B</code>，<code>A cmpop alpha</code>，<code>alpha cmpop A</code>。此处 cmpop 可以是&gt;，&gt;=，==，!=，&lt;=，&lt;。如果条件成立，则结果矩阵（8U 类型矩阵）的对应元素被置为 255；否则置 0。 </li><li>矩阵位逻辑运算：<code>A logicop B</code>，<code>A logicop s</code>，<code>s logicop A</code>，<code>~A</code>，此处 logicop 可以是&amp;，|和^。</li><li>矩阵对应元素的最大值和最小值：<code>min(A, B)</code>，<code>min(A, alpha)</code>，<code>max(A, B)</code>， <code>max(A, alpha)</code>。</li><li>矩阵中元素的绝对值：<code>abs(A)</code></li><li>叉积和点积：<code>A.cross(B)</code>，<code>A.dot(B)</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV-选取图像的感兴趣区域</title>
      <link href="/post/d4c8e253.html"/>
      <url>/post/d4c8e253.html</url>
      
        <content type="html"><![CDATA[<p>Mat 类提供了多种方便的方法来选择图像的局部区域。使用这些方法时需要注意,这些方法并不进行内存的复制操作。如果将局部区域赋值给新的 Mat 对象,新对象与原始对象共用相同的数据区域,不新申请内存,因此这些方法的执行速度都比较快。</p><a id="more"></a><h2 id="单行或者单列选择"><a href="#单行或者单列选择" class="headerlink" title="单行或者单列选择"></a>单行或者单列选择</h2><p>提取矩阵的一行或者一列可以使用函数 row()或 col()。函数的声明如下:</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mat Mat::row(<span class="hljs-keyword">int</span> i) <span class="hljs-keyword">const</span></span><br><span class="line">Mat Mat::col(<span class="hljs-keyword">int</span> j) <span class="hljs-keyword">const</span></span><br></pre></td></tr></table></figure><p>参数 i 和 j 分别是行标和列标。例如取出 A 矩阵的第 i 行可以使用如下代码:</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mat line = A.row(i);</span><br></pre></td></tr></table></figure><p>例如取出 A 矩阵的第 i 行,将这一行的所有元素都乘以 2,然后赋值给第 j 行,可以这样写:</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.row(j) = A.row(i)*<span class="hljs-number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="用-Range-选择多行或多列"><a href="#用-Range-选择多行或多列" class="headerlink" title="用 Range 选择多行或多列"></a>用 Range 选择多行或多列</h2><p>Range 是 OpenCV 中新增的类,该类有两个关键变量 star 和 end。Range 对象可以用来表示矩阵的多个连续的行或者多个连续的列。其表示的范围为从 start到 end,包含 start,但不包含 end。Range 类的定义如下:</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Range</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="hljs-keyword">int</span> start, end;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Range 类还提供了一个静态方法 all(),这个方法的作用如同 Matlab 中的“:”,表示所有的行或者所有的列。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//创建一个单位阵</span></span><br><span class="line">Mat A = Mat::eye(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, CV_32S);</span><br><span class="line"><span class="hljs-comment">//提取第 1 到 3 列(不包括 3)</span></span><br><span class="line">Mat B = A(Range::all(), Range(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>));</span><br><span class="line"><span class="hljs-comment">//提取 B 的第 5 至 9 行(不包括 9)</span></span><br><span class="line"><span class="hljs-comment">//其实等价于 C = A(Range(5, 9), Range(1, 3))</span></span><br><span class="line">Mat C = B(Range(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>), Range::all());</span><br></pre></td></tr></table></figure><h2 id="感兴趣区域"><a href="#感兴趣区域" class="headerlink" title="感兴趣区域"></a>感兴趣区域</h2><p>从图像中提取感兴趣区域(Region of interest)有两种方法,一种是使用构造函数,如下例所示:</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//创建宽度为 320,高度为 240 的 3 通道图像</span></span><br><span class="line"><span class="hljs-function">Mat <span class="hljs-title">img</span><span class="hljs-params">(Size(<span class="hljs-number">320</span>,<span class="hljs-number">240</span>),CV_8UC3)</span></span>;</span><br><span class="line"><span class="hljs-comment">//roi 是表示 img 中 Rect(10,10,100,100)区域的对象</span></span><br><span class="line"><span class="hljs-function">Mat <span class="hljs-title">roi</span><span class="hljs-params">(img, Rect(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>))</span></span>;</span><br></pre></td></tr></table></figure><p>除了使用构造函数,还可以使用括号运算符,如下:</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mat roi2 = img(Rect(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>));</span><br></pre></td></tr></table></figure><p>当然也可以使用 Range 对象来定义感兴趣区域,如下:</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//使用括号运算符</span></span><br><span class="line">Mat roi3 = img(Range(<span class="hljs-number">10</span>,<span class="hljs-number">100</span>),Range(<span class="hljs-number">10</span>,<span class="hljs-number">100</span>));</span><br><span class="line"><span class="hljs-comment">//使用构造函数</span></span><br><span class="line"><span class="hljs-function">Mat <span class="hljs-title">roi4</span><span class="hljs-params">(img, Range(<span class="hljs-number">10</span>,<span class="hljs-number">100</span>),Range(<span class="hljs-number">10</span>,<span class="hljs-number">100</span>))</span></span>;</span><br></pre></td></tr></table></figure><h2 id="取对角线元素"><a href="#取对角线元素" class="headerlink" title="取对角线元素"></a>取对角线元素</h2><p>矩阵的对角线元素可以使用 Mat 类的 diag()函数获取,该函数的定义如下:</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mat Mat::diag(<span class="hljs-keyword">int</span> d) <span class="hljs-keyword">const</span></span><br></pre></td></tr></table></figure><p>参数 d=0 时,表示取主对角线;当参数 d&gt;0 是,表示取主对角线下方的次对角线,如 d=1 时,表示取主对角线下方,且紧贴主多角线的元素;当参数 d&lt;0 时,表示取主对角线上方的次对角线。</p><p>如同 row()和 col()函数, diag()函数也不进行内存复制操作,其复杂度也是 O(1)。</p>]]></content>
      
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV-基本数据结构</title>
      <link href="/post/463fc5c6.html"/>
      <url>/post/463fc5c6.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/2019-05-25-13-01-13.png" alt="OpenCV 基本数据结构"></p><p>本文介绍 OpenCV 的基本数据结构，做到心中有数就不会在阅读示例代码的时候发憷。</p><a id="more"></a><h1 id="Mat-类"><a href="#Mat-类" class="headerlink" title="Mat 类"></a>Mat 类</h1><p>Mat 是 OpenCV 中最重要的一种数据结构，OpenCV 将其定义为一个类，用于存储图像矩阵。</p><table><thead><tr><th>属性</th><th>释义</th></tr></thead><tbody><tr><td>dims</td><td>矩阵的维度，如 3x4x5 的矩阵为 3 维</td></tr><tr><td>data</td><td>uchar 类型指针, 指向矩阵数据内存</td></tr><tr><td>rows, cols</td><td>矩阵的行数、列数</td></tr><tr><td>type</td><td>矩阵元素类型 + 通道数</td></tr><tr><td>depth</td><td>像素位数(bist)</td></tr><tr><td>channels</td><td>通道数量</td></tr><tr><td>elemSize</td><td>矩阵中每一个元素的数据大小</td></tr><tr><td>elemSize1</td><td>单通道的矩阵元素占用的数据大小</td></tr></tbody></table><p>type 表示矩阵元素类型和通道数。矩阵元素类型一般都是 8 位无符号整数，即 CV_8U，彩色图像一般为 3 通道，灰度图像则为单通道。所以灰度图像的 type 可以表示为 CV_8UC1，3 通道的 RGB 图像的 type 可以表示为 CV_8UC3。</p><p>以 CV_8UC3 为例，depth = CV_8U，channels = 3。</p><p>elemSize = channels <em> depth / 8 ，type是CV_8UC3，elemSize = 3 </em> 8 / 8 = 3bytes。</p><p>elemSize1 = depth / 8，type是CV_8UC3，elemSize1 = 8 / 8 = 1bytes。</p><p>通过遍历图像可以体会 Mat 类的使用，可以参考 <a href="https://shuiyujie.com/post/dfe68fea.html">OpenCV-图像的遍历</a>。</p><h1 id="Ponit-类-点的表示"><a href="#Ponit-类-点的表示" class="headerlink" title="Ponit 类 - 点的表示"></a>Ponit 类 - 点的表示</h1><p>Point 类表示二维坐标系下的点，即 (x, y) 形式的 2D 点。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 方法一</span></span><br><span class="line">Point point1 = Point(<span class="hljs-number">10</span>, <span class="hljs-number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 方法二</span></span><br><span class="line">Point point2;</span><br><span class="line">point2.x = <span class="hljs-number">8</span>;</span><br><span class="line">point2.y = <span class="hljs-number">10</span>;</span><br></pre></td></tr></table></figure><p>其中 <code>Point_&lt;int&gt;</code>, Point2i, Point 等价，<code>Point_&lt;float&gt;</code>, Point2f 等价。</p><h1 id="Scalar-类-颜色的表示"><a href="#Scalar-类-颜色的表示" class="headerlink" title="Scalar 类 - 颜色的表示"></a>Scalar 类 - 颜色的表示</h1><p>Scalar() 表示具有 4 个元素的数组，用于传递像素值，如 RGB 颜色值。RGB 颜色值只有三个参数，Scalar() 用不到第四个参数可以缺省。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">Mat <span class="hljs-title">M</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, CV_8UC3, Scalar(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>))</span></span>;</span><br></pre></td></tr></table></figure><p>其中 <code>Scalar(0,0,255)</code> 表示 BGR 的值分别为 (0, 0, 255) 是红色。</p><h1 id="Size-类-尺寸的表示"><a href="#Size-类-尺寸的表示" class="headerlink" title="Size 类 - 尺寸的表示"></a>Size 类 - 尺寸的表示</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> Size_&lt;<span class="hljs-keyword">int</span>&gt; Size2i;</span><br><span class="line"><span class="hljs-keyword">typedef</span> Size_&lt;int64&gt; Size2l;</span><br><span class="line"><span class="hljs-keyword">typedef</span> Size_&lt;<span class="hljs-keyword">float</span>&gt; Size2f;</span><br><span class="line"><span class="hljs-keyword">typedef</span> Size_&lt;<span class="hljs-keyword">double</span>&gt; Size2d;</span><br><span class="line"><span class="hljs-keyword">typedef</span> Size2i Size;</span><br></pre></td></tr></table></figure><p>源代码中的定义上述代码所示。Size_ 是模板类，<code>Size_&lt;int&gt;</code> 表示其模板类型为 int。之后给 <code>Size_&lt;int&gt;</code> 别名为 Size2i，再给 Size2i 别名为 Size。由此可见，<strong><code>Size_&lt;int&gt;</code>, Size2i, Size 等价。</strong></p><p><code>Size size = Size(8, 10);</code> 表示宽和长分别为 8 和 10。</p><h1 id="Rect-类-矩形的表示"><a href="#Rect-类-矩形的表示" class="headerlink" title="Rect 类 - 矩形的表示"></a>Rect 类 - 矩形的表示</h1><ul><li>Rect 类的成员变量有 x, y, width, heigh</li><li>Size() 返回值为 Size</li><li>area() 返回矩形面积</li><li>contains(Point) 判断点是否在矩形内</li><li>inside(Rect) 判断矩形是否在该矩形内</li><li>tl() 返回左上角点坐标</li><li>br() 返回右下角点坐标</li></ul><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 矩形交集</span></span><br><span class="line">Rect rect = rect1 &amp; rect2;</span><br><span class="line"><span class="hljs-comment">// 矩形并集</span></span><br><span class="line">Rect rect = rect1 | rect2;</span><br><span class="line"><span class="hljs-comment">// 平移操作</span></span><br><span class="line">Rect rectShift = rect + point;</span><br><span class="line"><span class="hljs-comment">// 缩放操作</span></span><br><span class="line">Rect rectScale = rect + size;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV-图像的遍历</title>
      <link href="/post/dfe68fea.html"/>
      <url>/post/dfe68fea.html</url>
      
        <content type="html"><![CDATA[<p>计算机使用 0/1 编码存储图像，数字图像在计算机中同样也使用 0/1 编码来存储。在计算机看来图像是一堆亮度不同的点组成的矩阵。一般灰度图用 2 维矩阵来表示，彩色图片是多通道的，则用 3 维矩阵来表示。</p><p><img src="http://image.shuiyujie.com/2019-05-25-09-31-19.png" alt="灰度图像"></p><p>我们一般接触的图像都是 8 位整数（CV_8U），所以灰度图像包含 0～255 灰度，其中 0 代表最⿊，1表⽰最⽩。</p><p><img src="http://image.shuiyujie.com/2019-05-25-09-32-13.png" alt="彩色图像"></p><p>彩色图像比如 RGB 图像，每个像素用三个字节来表示，而 OpenCV 中存储 RGB 图像以 BGR 的顺序存储图像，所以存储方式如上所示。</p><p>本文将介绍遍历灰度图像和彩色图像的方法，其本质即为遍历图像矩阵，可以对比二维数组的遍历来学习。</p><a id="more"></a><h1 id="使用-at-遍历图像"><a href="#使用-at-遍历图像" class="headerlink" title="使用 at() 遍历图像"></a>使用 at() 遍历图像</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 使用构造器创建 Mat，注意类型</span></span><br><span class="line">    cv::<span class="hljs-function">Mat <span class="hljs-title">grayImage</span><span class="hljs-params">(<span class="hljs-number">400</span>, <span class="hljs-number">500</span>, CV_8UC1)</span></span>;</span><br><span class="line">    cv::<span class="hljs-function">Mat <span class="hljs-title">colorImage</span><span class="hljs-params">(<span class="hljs-number">400</span>, <span class="hljs-number">500</span>, CV_8UC3)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; grayImage.rows; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; grayImage.cols; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-comment">// 灰度图像是单通道的</span></span><br><span class="line">            grayImage.at&lt;uchar&gt;(i, j) = (i + j) % <span class="hljs-number">255</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; colorImage.rows; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; colorImage.cols; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-comment">// 三通道用向量来表示</span></span><br><span class="line">            cv::Vec3b pixel;</span><br><span class="line">            pixel[<span class="hljs-number">0</span>] = i % <span class="hljs-number">255</span>;</span><br><span class="line">            pixel[<span class="hljs-number">1</span>] = j % <span class="hljs-number">255</span>;</span><br><span class="line">            pixel[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;</span><br><span class="line">            colorImage.at&lt;cv::Vec3b&gt;(i, j) = pixel;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cv::imshow(<span class="hljs-string">"1. GrayImage"</span>, grayImage);</span><br><span class="line">    cv::imshow(<span class="hljs-string">"2. ColorImage"</span>, colorImage);</span><br><span class="line"></span><br><span class="line">    cv::waitKey(<span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.shuiyujie.com/2019-05-25-10-47-43.png" alt="效果图"></p><p>at() 的优点在于可读性强，缺点在于效率不高。图像遍历操作时常用且开销很大的操作，所以不推荐使用 at() 做图像的遍历操作。</p><h1 id="使用指针遍历"><a href="#使用指针遍历" class="headerlink" title="使用指针遍历"></a>使用指针遍历</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    cv::<span class="hljs-function">Mat <span class="hljs-title">grayImage</span><span class="hljs-params">(<span class="hljs-number">400</span>, <span class="hljs-number">500</span>, CV_8UC1)</span></span>;</span><br><span class="line">    cv::<span class="hljs-function">Mat <span class="hljs-title">colorImage</span><span class="hljs-params">(<span class="hljs-number">400</span>, <span class="hljs-number">500</span>, CV_8UC3)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; grayImage.rows; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        uchar *p = grayImage.ptr&lt;uchar&gt;(i);</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>; j &lt; grayImage.cols; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            p[j] = (i + j) % <span class="hljs-number">255</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; colorImage.rows; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        cv::Vec3b *p = colorImage.ptr&lt;cv::Vec3b&gt;(i);</span><br><span class="line">    </span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>; j &lt; colorImage.cols; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            p[j][<span class="hljs-number">0</span>] = i % <span class="hljs-number">255</span>;</span><br><span class="line">            p[j][<span class="hljs-number">1</span>] = j % <span class="hljs-number">255</span>;</span><br><span class="line">            p[j][<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cv::imshow(<span class="hljs-string">"1. GrayImage"</span>, grayImage);</span><br><span class="line">    cv::imshow(<span class="hljs-string">"2. ColorImage"</span>, colorImage);</span><br><span class="line"></span><br><span class="line">    cv::waitKey(<span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.shuiyujie.com/2019-05-25-10-47-43.png" alt="效果图"></p><p>程序是用 <code>image.ptr()</code> 返回矩阵每一行的头指针，紧接着遍历这一行的元素。</p><p>指针的优点在于访问速度快，缺点在于指针较为复杂，不熟悉指针的朋友容易犯错且不易查找错误。</p><h1 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    cv::<span class="hljs-function">Mat <span class="hljs-title">grayImage</span><span class="hljs-params">(<span class="hljs-number">400</span>, <span class="hljs-number">500</span>, CV_8UC1)</span></span>;</span><br><span class="line">    cv::<span class="hljs-function">Mat <span class="hljs-title">colorImage</span><span class="hljs-params">(<span class="hljs-number">400</span>, <span class="hljs-number">500</span>, CV_8UC3)</span></span>;</span><br><span class="line"></span><br><span class="line">    cv::MatIterator_&lt;uchar&gt; grayit, grayend;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> (grayit = grayImage.begin&lt;uchar&gt;(), grayend = grayImage.end&lt;uchar&gt;();</span><br><span class="line">         grayit != grayend; grayit++)</span><br><span class="line">    &#123;</span><br><span class="line">        *grayit = rand() % <span class="hljs-number">255</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cv::MatIterator_&lt;cv::Vec3b&gt; colorit, colorend;</span><br><span class="line">    <span class="hljs-keyword">for</span> (colorit = colorImage.begin&lt;cv::Vec3b&gt;(), colorend = colorImage.end&lt;cv::Vec3b&gt;();</span><br><span class="line">         colorit != colorend; colorit++)</span><br><span class="line">    &#123;</span><br><span class="line">        (*colorit)[<span class="hljs-number">0</span>] = rand() % <span class="hljs-number">255</span>;</span><br><span class="line">        (*colorit)[<span class="hljs-number">1</span>] = rand() % <span class="hljs-number">255</span>;</span><br><span class="line">        (*colorit)[<span class="hljs-number">2</span>] = rand() % <span class="hljs-number">255</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cv::imshow(<span class="hljs-string">"1. GrayImage"</span>, grayImage);</span><br><span class="line">    cv::imshow(<span class="hljs-string">"2. ColorImage"</span>, colorImage);</span><br><span class="line"></span><br><span class="line">    cv::waitKey(<span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.shuiyujie.com/2019-05-25-11-13-05.png" alt="迭代器遍历"></p><p>在 C++ 的 STL 库，或者 Java, Python  等语言中都提供了对迭代器的支持，OpenCV 也支持使用迭代器的方式进行遍历，代码如上所示。</p><hr><p>本文介绍了遍历 Mat 的三种方式: 使用 at() 遍历，使用指针遍历，以及使用迭代器遍历。推荐使用指针的方式遍历图像，其效率最高，在编写图像处理的算法时，效率是我们不可忽视的要素。</p>]]></content>
      
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 语言-格式化输出函数 printf()</title>
      <link href="/post/d37b0970.html"/>
      <url>/post/d37b0970.html</url>
      
        <content type="html"><![CDATA[<p><strong>printf  “格式字符串” 候选字符</strong></p><table><thead><tr><th>格式字符串</th><th>作用</th></tr></thead><tbody><tr><td>%d</td><td>将整数转成十进制</td></tr><tr><td>%f</td><td>将整数转成浮点数</td></tr><tr><td>%u</td><td>十进制无符号整数</td></tr><tr><td>%o</td><td>将整数转成八进制</td></tr><tr><td>%c</td><td>将整数转成对应的 ASCII 字符</td></tr><tr><td>%s</td><td>将整数转成字符串</td></tr><tr><td>%x</td><td>整数转成小写十六进制</td></tr><tr><td>%X</td><td>整数转成大写十六进制</td></tr><tr><td>%p</td><td>输出</td></tr><tr><td>%%</td><td>输出百分比符号，不进行转换</td></tr></tbody></table><p><strong>printf 中特殊规定的字符</strong></p><table><thead><tr><th>规定字符</th><th>作用</th></tr></thead><tbody><tr><td>\n</td><td>换行操作</td></tr><tr><td>\f</td><td>清屏并换页</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>Tab 符</td></tr><tr><td>\xth</td><td>用 16 进制表示的 ASCII 码</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++ 中的命令行参数</title>
      <link href="/post/b482364a.html"/>
      <url>/post/b482364a.html</url>
      
        <content type="html"><![CDATA[<p>C/C++ 中的 main 函数经常带有 argc, argv ,比如 <code>int main(int argc, char** argv)</code> 或者 <code>int main(int argc, char* argv[])</code>，其中 argc 表示我们从命令行键入的参数，argv[] 即为参数列表。</p><p>Java 中的 <code>public static void main(String argc[])</code> 和 Python 中的 <code>sys.argv</code> 中也都带有命令行参数。</p><p>通过命令行参数我们可以就能由 main 函数入口传递参数到程序内部。</p><a id="more"></a><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> ** argv)</span> </span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; argc; i++)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Argument %d is %s.\n"</span>, i, argv[i]);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入我们编译之后运行 <code>./hello a b c d</code> 将会输出</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Argument 0 is ./hello.</span><br><span class="line">Argument 1 is a.</span><br><span class="line">Argument 2 is b.</span><br><span class="line">Argument 3 is c.</span><br><span class="line">Argument 4 is d.</span><br></pre></td></tr></table></figure><p>由此得出两个结论</p><ol><li>参数列表中包含 <code>./hello</code></li><li>参数个数要算上 <code>./hello</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记-多态</title>
      <link href="/post/e7609a12.html"/>
      <url>/post/e7609a12.html</url>
      
        <content type="html"><![CDATA[<p>多态指不同的对象发送同一个消息，不同对象对应同一消息产生不同行为。多态存在于具有继承关系的类中，当父类函数被申明为虚函数，子类重写了父类虚函数时，就具备了多态发生的条件。</p><a id="more"></a><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* C++学习笔记：面向对象，多态*/</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bark</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"动物叫..."</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>:</span> <span class="hljs-keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bark</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"wang wang wang ..."</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span>:</span> <span class="hljs-keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bark</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"miao miao miao ..."</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">animalBark</span><span class="hljs-params">(Animal *animal)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    animal-&gt;bark();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    Animal *animal = <span class="hljs-keyword">new</span> Animal();</span><br><span class="line">    Dog *dog = <span class="hljs-keyword">new</span> Dog();</span><br><span class="line">    Cat *cat = <span class="hljs-keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line">    animalBark(animal);</span><br><span class="line">    animalBark(dog);</span><br><span class="line">    animalBark(cat);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">动物叫...</span><br><span class="line">动物叫...</span><br><span class="line">动物叫...</span><br></pre></td></tr></table></figure><p>父类函数添加 <code>virtual</code> ，将其声明为虚函数。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bark</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"动物叫..."</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">动物叫...</span><br><span class="line">wang wang wang ...</span><br><span class="line">miao miao miao ...</span><br></pre></td></tr></table></figure><p>基类中的虚函数是一个使用关键字 <strong>virtual</strong> 声明的函数。派生类中已经对函数进行定义的情况下，定义一个基类的虚函数，就是要告诉编译器我们不想对这个函数进行静态链接。</p><p>我们所希望的是根据调用函数的对象的类型对程序中在任何给定指针中被调用的函数的选择。这种操作被称为动态链接，或者后期绑定。</p><p>多态的三个条件</p><ol><li>类间存在继承</li><li>要有虚函数重写</li><li>父类指针或引用指向子类对象</li></ol><h1 id="重载、重写、重定义"><a href="#重载、重写、重定义" class="headerlink" title="重载、重写、重定义"></a>重载、重写、重定义</h1><p>重载：同一个类中函数名相同，参数列表相同。以下代码表示 bark() 函数的重载。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> name;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bark</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"动物叫..."</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bark</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> name)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">"正在叫..."</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>重写：指子类覆盖父类的虚函数，要求函数名和参数均相同，如下所示：</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bark</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"动物叫..."</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>:</span> <span class="hljs-keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bark</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"wang wang wang ..."</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记-继承</title>
      <link href="/post/5afabdd4.html"/>
      <url>/post/5afabdd4.html</url>
      
        <content type="html"><![CDATA[<p>面向对象有三个特性：封装继承和多态。实现一个类就是实现了一个对象的封装。继承是为了表示对象和对象之间的关系，生物学中有<a href="https://zh.wikipedia.org/wiki/%E7%94%9F%E7%89%A9%E5%88%86%E9%A1%9E%E6%B3%95" target="_blank" rel="noopener">界门纲目科属种</a>的说法，比如说喜鹊、麻雀、燕子它们有各自的特性，可以将它们看成一个个类，它们都属于鸟类，因为它们有鸟类共同的特征，会飞啊、有羽毛的啊。</p><p>继承就是抽象出对象的共性成为一个父类，子类用继承的方式获得父类的共性，并且子类有权拥有自己的个性，也能对父类的共性做个性化的修改。</p><p>本文并不详细介绍继承的概念，而是记录继承中一些关键点和注意事项。</p><a id="more"></a><h1 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h1><table><thead><tr><th>访问控制符</th><th>作用</th></tr></thead><tbody><tr><td>public</td><td>公有继承，公开的大家都能访问</td></tr><tr><td>protected</td><td>保护继承，子类允许父类</td></tr><tr><td>private</td><td>私有继承，只能通过 get() 这样的函数访问</td></tr></tbody></table><p>访问控制的存在能够保证让对象在继承中任然保持封装特性，亲兄弟也得明算账，能让你访问的就让你访问，不允许的我用 private 提前说明，你也别来碰。</p><p><a href="https://github.com/YujieShui/up-up-c/blob/master/OOP/extend02.cpp" target="_blank" rel="noopener">代码示例</a></p><h1 id="类的兼容性原则"><a href="#类的兼容性原则" class="headerlink" title="类的兼容性原则"></a>类的兼容性原则</h1><p>类的兼容性原则意思就是在使用父类的地方可以使用其子类来替代。因为子类通过公有继承已经获得了父类除了构造函数、析构函数之外的属性和方法。</p><ol><li>子类对象可以当做父类对象来使用</li><li>子类对象可以赋值给父类对象</li><li>父类对象可以用子类对象来初始化</li><li>父类指针可以指向子类对象</li></ol><h1 id="子类创建和销毁的过程"><a href="#子类创建和销毁的过程" class="headerlink" title="子类创建和销毁的过程"></a>子类创建和销毁的过程</h1><p>子类继承了父类，有了父类的属性和方法，所以再创建和销毁的过程中必不可少地要调用父类的构造方法和析构函数。</p><p>子类创建到销毁的过程</p><ol><li>调用父类的构造函数</li><li>执行子类的构造函数</li><li>当父类的构造函数有参数时，需要在子类的初始化列表中显示调用</li><li>析构函数调用的先后顺序与构造函数相反</li></ol><p><a href="https://github.com/YujieShui/up-up-c/blob/master/OOP/extend03.cpp" target="_blank" rel="noopener">代码示例</a></p><h1 id="多继承和虚继承"><a href="#多继承和虚继承" class="headerlink" title="多继承和虚继承"></a>多继承和虚继承</h1><p>C++ 允许一个类继承自多个类，同时拥有多个类的特性，这被称为多继承。多继承采用 <code>class C: public Child1, public B</code> 的形式实现，在继承的类之间添加逗号即可。</p><p>虚继承指的是类实现了多继承，其中继承的多个类中有两个或者以上都继承自同一个父类。</p><p>虚地址会造成一个二义性问题，我们知道类继承自另外一个类就会获得另外一个类的属性，在多继承中被继承的两个类来自于同一父类，就会产生下图所示的情况。</p><p><img src="http://image.shuiyujie.com/2019-05-18-16-19-14.png" alt="多继承"></p><p>class C 有重复获取了两次 class B 中的变量 b，而 class B 有一个变量 b，class C 就面对使用哪个 b 的二义性问题。</p><p>解决方案就是让 class B1 和 class B2 在继承时都使用 <code>vitural</code> 修饰。</p><p><img src="http://image.shuiyujie.com/2019-05-18-16-22-21.png" alt="virtual"></p><p><code>virtual</code> 对子类声明为虚继承，使这个子类成为虚基类，使公共父类在子类中只产生一个子对象，</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记-静态方法、静态函数、this指针</title>
      <link href="/post/cd8fc6b5.html"/>
      <url>/post/cd8fc6b5.html</url>
      
        <content type="html"><![CDATA[<p>静态变量、静态方法和 this 指针都是为了更好表现类的概念。</p><p>类中的静态变量能够实现同类对象中的信息共享，共享状态能够实现许多实用的功能，比如说计数。</p><p>静态变量不能用普通函数直接访问，就需要用到静态函数来管理静态变量。</p><p>this 指针用 <code>this-&gt;name = name</code> 的形式解决类中函数传入的参数与类中成员变量冲突的问题。</p><p>总之，通过代码来说明问题更容易理解。</p><a id="more"></a><p>静态变量、静态方法和 this 指针使用代码示例：</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* 面向对象，静态变量、静态方法, this 指针 */</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-comment">// 学生编号</span></span><br><span class="line">    <span class="hljs-keyword">int</span> number;</span><br><span class="line">    <span class="hljs-comment">// 学生分数</span></span><br><span class="line">    <span class="hljs-keyword">int</span> score;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-comment">// 静态变量，学生总数</span></span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> studentCount;</span><br><span class="line">    <span class="hljs-comment">// 静态变量，所有学生总分</span></span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> sumScore;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    Student(<span class="hljs-keyword">int</span> number, <span class="hljs-keyword">int</span> score)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>-&gt;number = number;</span><br><span class="line">        <span class="hljs-keyword">this</span>-&gt;score = score;</span><br><span class="line"></span><br><span class="line">        studentCount++;</span><br><span class="line">        sumScore += score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 静态方法</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getAvg</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> sumScore / studentCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Student(<span class="hljs-comment">/* args */</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 静态变量赋值，所有对象共享</span></span><br><span class="line"><span class="hljs-keyword">int</span> Student::sumScore = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> Student::studentCount = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-function">Student <span class="hljs-title">stu1</span><span class="hljs-params">(<span class="hljs-number">111</span>, <span class="hljs-number">50</span>)</span></span>;</span><br><span class="line">    <span class="hljs-function">Student <span class="hljs-title">stu2</span><span class="hljs-params">(<span class="hljs-number">112</span>, <span class="hljs-number">70</span>)</span></span>;</span><br><span class="line">    <span class="hljs-function">Student <span class="hljs-title">stu3</span><span class="hljs-params">(<span class="hljs-number">114</span>, <span class="hljs-number">90</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 静态方法调用</span></span><br><span class="line">    <span class="hljs-keyword">double</span> avg = Student::getAvg();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"average score = "</span> &lt;&lt; avg &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态成员变量：</p><ol><li>static 成员变量实现了同类对象间信息共享。</li><li>static 成员类外存储,求类大小,并不包含在内。</li><li>static 成员是命名空间属于类的全局变量,存储在 data 区</li><li>static 成员只能类外初始化。</li><li>可以通过类名访问(无对象生成时亦可),也可以通过对象访问</li></ol><p>静态成员函数：</p><ol><li>静态成员函数的意义,不在于信息共享,数据沟通,而在于管理静态数据成员, 完成对静态数据成员的封装。</li><li>静态成员函数只能访问静态数据成员。原因:非静态成员函数,在调用时 this 指针被当作参数传进。而静态成员函数属于类,而不属于对象,没有 this 指针</li></ol><p>this 指针:</p><ol><li>类成员变量的形参和类的属性名字相同，可以使用 this 指针，如 <code>this-&gt;name = name</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记-构造函数、析构函数、拷贝构造函数</title>
      <link href="/post/a51fdb12.html"/>
      <url>/post/a51fdb12.html</url>
      
        <content type="html"><![CDATA[<p>C++ 引入了面向对象的概念，面向对象的思想能够抽象出现实世界的实体，以此解决更加复杂的问题。</p><p>类是面向对象的核心，类即是我们对事物抽象之后的产物。C++ 中的类用 <code>class</code> 关键字修饰，后面紧跟着类名 <code>class ClassName</code>。</p><p>现实世界的实体应该怎么抽象？一部分抽象为是事物的基本属性，一部分抽象为事物的行为。以抽象一只狗为例，狗的基本属性比如说有品种、年龄、毛色、重量等，而它的行为比如说有奔跑、行走、吃东西、叫等。</p><p>类中就用变量来表示事物的基本属性，行为则用函数来表示，这就是面向对象思想的核心。在此基础上又有继承、多态等概念，也是为了进一步表现对象与对象之间的关系。</p><p>本文讲的是 C++ 中类的构造函数、析构函数以及拷贝构造函数。构造函数区别于普通的函数，是专门用来初始化一个对象的；析构函数则是在函数被销毁时自动调用做善后工作的；拷贝构造函数是另一种初始化类的方法，它直接用类来初始化一个新类。</p><a id="more"></a><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-keyword">char</span> name[<span class="hljs-number">50</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    Dog(<span class="hljs-keyword">char</span> *dogName, <span class="hljs-keyword">int</span> dogAge)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">strcpy</span>(name, dogName);</span><br><span class="line">        age = dogAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initDog</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *dogName, <span class="hljs-keyword">int</span> dogAge)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">strcpy</span>(name, dogName);</span><br><span class="line">        age = dogAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bark</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">": wang wang~~"</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>初始化一个类，需要把参数传给一个类，比如说用 <code>void initDog(char *dogName, int dogAge)</code> 这个方法。C++ 给我提供了一种特殊的函数叫做构造函数就像 <code>Dog(char *dogName, int dogAge)</code> 这样。我们可以用 <code>Dog dog2(&quot;bbb&quot;, 5);</code> 的方式来调用构造函数并初始化类。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> 类名</span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    类名(参数列表)</span><br><span class="line">    &#123;</span><br><span class="line">        构造体</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>构造函数的格式，及注意事项：</p><ol><li>没有返回值</li><li>方法名和类名一致</li><li>构造函数可以重载，让参数列表不同</li><li>默认存在无参构造函数，当自定义构造函数之后无参构造函数失效，此时需要手动定义</li></ol><p><a href="https://github.com/YujieShui/up-up-c/blob/master/OOP/construct_function01.cpp" target="_blank" rel="noopener">构造函数代码示例</a></p><h1 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h1><p>C++中的类可以定义一个特殊的成员函数清理对象,这个特殊的成员函数叫做析构函数。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> 类名</span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    ~类名(参数列表)</span><br><span class="line">    &#123;</span><br><span class="line">        析构体</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>析构函数格式，及注意事项:</p><ol><li>无返回值</li><li>方法名和类名一致，前面有个 <code>~</code> 符号</li><li>默认存在一个析构函数</li><li>析构函数不可重载</li></ol><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-keyword">char</span> *name;</span><br><span class="line">    <span class="hljs-keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    Dog(<span class="hljs-keyword">char</span> *dogName, <span class="hljs-keyword">int</span> dogAge)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"调用了构造函数."</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        name = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">50</span>];</span><br><span class="line">        <span class="hljs-built_in">strcpy</span>(name, dogName);</span><br><span class="line">        age = dogAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bark</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">": wang wang~~"</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~Dog()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"调用了析构函数."</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span>(name != <span class="hljs-literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">delete</span> name;</span><br><span class="line">            name = <span class="hljs-literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同样是 Dog 类，和文章开头的 Dog 类别比较有一点小的改动。private 类型变量 name，我将其由字符数组类型更改为了字符指针类型。新的 Dog 类就需要我们在使用的时候为 name 申明一块内存空间，就想我在其构造函数中所做的一样。</p><p>与之相对的就是在 Dog 类使用完成之后 free() 之前申明的内存空间。</p><p><a href="https://github.com/YujieShui/up-up-c/blob/master/OOP/construct_function02.cpp" target="_blank" rel="noopener">析构函数代码示例</a></p><h1 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h1><p>在第一小节我们看到了普通的构造函数是怎么使用的，之前还提到了构造函数有无参构造函数和有参数构造函数。在没有显示申明构造函数的时候，类自带一个无参构造函数，而当我们显示申明构造函数之后，默认的无参构造函数就失效了，此时如果任然需要无参构造函数，那就需要我们自己显示申明。</p><p>接下来再介绍一种构造函数叫做拷贝构造函数，由一个以存在的类来初始化一个新的类就可以使用拷贝构造函数，此时将不由构造器来初始化，而是由拷贝构造器来初始化。</p><p>拷贝构造函数与构造函数、析构函数一样，也存在默认的拷贝构造函数，我们可以直接使用如下</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">Dog <span class="hljs-title">dog</span><span class="hljs-params">(<span class="hljs-string">"bbb"</span>, <span class="hljs-number">5</span>)</span></span>;</span><br><span class="line">dog.bark();</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">Dog <span class="hljs-title">dog2</span><span class="hljs-params">(dog)</span></span>;</span><br><span class="line">dog2.bark();</span><br></pre></td></tr></table></figure><p>如果想要自定一个拷贝构造函数格式如下</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> 类名</span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    类名(<span class="hljs-keyword">const</span> 类名 &amp;dog)</span><br><span class="line">    &#123;</span><br><span class="line">        拷贝构造体</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-keyword">char</span> name[<span class="hljs-number">50</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    Dog(<span class="hljs-keyword">char</span> *dogName, <span class="hljs-keyword">int</span> dogAge)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"调用了构造函数."</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-built_in">strcpy</span>(name, dogName);</span><br><span class="line">        age = dogAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Dog(<span class="hljs-keyword">const</span> Dog &amp;dog)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"调用了拷贝构造函数."</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-built_in">strcpy</span>(name, dog.name);</span><br><span class="line">        age = dog.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bark</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">": wang wang~~"</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h1><p><img src="http://image.shuiyujie.com/2019-05-18-09-11-33.png" alt="深拷贝与浅拷贝"></p><p>与结构体一样，类也存在深拷贝和浅拷贝的问题。浅拷贝即拷贝之后两个变量共用一块内存空间，深拷贝即新建一块内存来保存被拷贝的信息。</p><p>浅拷贝不是真正意义上的拷贝。在结构体发生浅拷贝时，如果我们释放该结构体，将会影响其他引用该结构体的其他变量。在类中的浅拷贝，如果类中包含的数据元素全部在栈上,浅拷贝也可以满足需求的。但如果堆上的数据,则会发生多次析构行为。 </p><p><em>注：关于结构体的深拷贝和浅拷贝可以看我这篇文章 <a href="https://shuiyujie.com/post/e261fd69.html">C语言学习笔记-结构体</a>。</em></p><p>系统提供的默认拷贝构造器执行的就是浅拷贝操作，如果我们想要将其修改为深拷贝就需要自己手动来实现拷贝构造函数。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Dog(<span class="hljs-keyword">const</span> Dog &amp;dog)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"调用了拷贝构造函数."</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    name = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">50</span>];        </span><br><span class="line">    <span class="hljs-built_in">strcpy</span>(name, dog.name);</span><br><span class="line">    age = dog.age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记-内联函数、默认参数和函数重载</title>
      <link href="/post/e95932f5.html"/>
      <url>/post/e95932f5.html</url>
      
        <content type="html"><![CDATA[<p>内联函数能够将函数体直接插入在函数调用的位置，减少了函数调用时出栈、入栈的过程，提高程序性能。</p><p>默认参数与占位符让我们在定义函数的时候能够设置默认值，提高了函数定义的灵活性。</p><p>函数的重载则允许我们在参数列表不同的情况下使用同名函数，解除了 C 语言中函数名必须不同的限制。</p><p>以上都是 C++ 在 C 语言基础上对函数定义的扩展，可以放在一起进行学习。</p><a id="more"></a><h1 id="inline-内联函数"><a href="#inline-内联函数" class="headerlink" title="inline 内联函数"></a>inline 内联函数</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 主函数循环调用 my_min() 函数</span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    min = my_min(a, b);</span><br><span class="line">    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"min = "</span> &lt;&lt; min &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 比较两个值的大小</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_min</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (a &lt; b ? a : b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当主函数调用函数的时候会有频繁的入栈、出栈操作。如果想减少这部分时间开销，在 C 语言中我们使用宏定义，在 C++ 中使用内联函数。</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MY_MAX(a, b) ((a) &lt; (b) ? (a) : (b))</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    min = MY_MAX(a, b);</span><br><span class="line">    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"min = "</span> &lt;&lt; min &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 C 语言中的宏定义我们可以让被调用的函数由预编译器展开，不会再有出栈入栈的过程，然而这样做存在一个问题。由于宏定义在编译的时候就展开，如果使用 <code>MY_MAX(a++, b++)</code> 的方式调用就会被展开成 <code>MY_MAX(a++, b++) ((a++) &lt; (b++) ? (a++) : (b++))</code>。</p><p>C++ 采用 inline 关键字来申明一个内联函数。内联函数是一种特殊的函数,具有普通函数的特征，但是<strong>C++编译器直接将函数体插入在函数调用的地方</strong>。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// inline 关键字修饰的内联函数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">my_max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (a &gt; b ? a : b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是内联函数使用的注意事项:</p><ol><li>不能存在任何形式的循环语句</li><li>不能存在过多的条件判断语句</li><li>不能对函数进行取址操作</li><li>函数内联声明必须在调用语句之前 </li></ol><h1 id="默认参数与占位符"><a href="#默认参数与占位符" class="headerlink" title="默认参数与占位符"></a>默认参数与占位符</h1><p>默认参数与占位符用于 C++ 定义函数的时候，相对于 C 语言有有更多的特性。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">function_name</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b = <span class="hljs-number">10</span>)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">" b = "</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> a = <span class="hljs-number">20</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> b = <span class="hljs-number">30</span>;</span><br><span class="line"></span><br><span class="line">    function_name(a, b);</span><br><span class="line">    function_name(a);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数 <code>int function_name(int a, int b = 10)</code> 中，我们在函数定义的过程中给 b 一个默认值，当函数调用时如果未传入 b 就会使用默认的 b 的值。</p><p>关于默认参数有这样几条规则</p><ol><li>可以有多个默认值</li><li>默认值必须从后面写起 <code>typename function_name(int a, int b, ... int x =10, int y =20)</code></li><li>一旦在一个函数调用中开始使用默认参数值,那么这个参数后的所有参数都必须使用默认参数值 </li></ol><p>占位符就感觉比较鸡肋了,我们使用一个没有名字的只有类型的形参作为占位符，但因为它没有名字，在函数中也没有办法使用。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 占位符</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span><span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span>)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 占位符并赋予默认值</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span><span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> = <span class="hljs-number">10</span>)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h1><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">funtion_name</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">funtion_name</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>;</span><br></pre></td></tr></table></figure><p>以上这段代码在 C 语言中是会报错的，因为 C 语言禁止函数同名，而在 C++ 中这样是允许的，被称为函数重载。</p><p>一个函数包含这样三个部分</p><ol><li>返回值类型</li><li>方法名名称</li><li>参数列表（参数类型，参数个数）</li></ol><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>;<span class="hljs-comment">//ok</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">char</span> a)</span></span>;<span class="hljs-comment">//ok, 参数个数相同，参数类型不同</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>;<span class="hljs-comment">//ok 参数个数不同</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>;<span class="hljs-comment">//error,与第一一个函数有冲突</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记-引用</title>
      <link href="/post/824d7309.html"/>
      <url>/post/824d7309.html</url>
      
        <content type="html"><![CDATA[<p>引用格式一个已存在变量的别名，通过这个别名就可以用来修改指向的变量的值。引用和指针很像，在很多情况下就是简化版的指针。引用比指针弱的地方在于引用必须在创建时初始化，并且不能再改变指向的对象，而指针可以为空，也可以改变指向的内存地址。</p><a id="more"></a><h1 id="引用的基本规则"><a href="#引用的基本规则" class="headerlink" title="引用的基本规则"></a>引用的基本规则</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>; <span class="hljs-comment">// 定义一个 a</span></span><br><span class="line">    <span class="hljs-keyword">int</span> &amp;b = a; <span class="hljs-comment">// 定义一个 a 的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> *p = &amp;a; <span class="hljs-comment">// 定义一个指向 a 的指针</span></span><br><span class="line">    *p = <span class="hljs-number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    b = <span class="hljs-number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">" , b = "</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> c;</span><br><span class="line">    <span class="hljs-comment">// &amp;b = c;  错误，b 已经是 a 的引用，不可修改引用关系</span></span><br><span class="line">    <span class="hljs-comment">// float &amp;f = c; 错误，引用类型不匹配</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> &amp;bb = b; <span class="hljs-comment">// 可以引用一个引用</span></span><br><span class="line">    bb = <span class="hljs-number">40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"a = "</span> &lt;&lt; a</span><br><span class="line">         &lt;&lt; <span class="hljs-string">" , b = "</span> &lt;&lt; b</span><br><span class="line">         &lt;&lt; <span class="hljs-string">" , bb = "</span> &lt;&lt; bb &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>引用的使用方式 <code>typename &amp;b = a</code>, &amp; 符号前有符号表示引用，否则表示取地址</li><li>引用是一种关系申明，表示它和某个变量的关系，它们类型相同，并共享一片内存</li><li>引用一经申明就不可以修改</li><li>可以引用一个引用</li></ol><h1 id="引用作为函数参数"><a href="#引用作为函数参数" class="headerlink" title="引用作为函数参数"></a>引用作为函数参数</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">Person</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">char</span> name[<span class="hljs-number">50</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printfA</span><span class="hljs-params">(Person *p)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printfB</span><span class="hljs-params">(Person &amp;p)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printfC</span><span class="hljs-params">(Person p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    Person person = &#123;<span class="hljs-string">"aaaa"</span>, <span class="hljs-number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"==========参数为指针类型=========="</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    printfA(&amp;person);</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"third time = "</span> &lt;&lt; person.age &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"==========参数为引用类型=========="</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    printfB(person);</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"third time = "</span> &lt;&lt; person.age &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"==========参数为结构体类型=========="</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    printfC(person);</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"third time = "</span> &lt;&lt; person.age &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 指针类型，同一块内存上操作</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printfA</span><span class="hljs-params">(Person *p)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"first time = "</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">    p-&gt;age = <span class="hljs-number">20</span>;</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"second time = "</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 引用类型，同一块内存上操作</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printfB</span><span class="hljs-params">(Person &amp;p)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"first time = "</span> &lt;&lt; p.age &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">    p.age = <span class="hljs-number">30</span>;</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"second time = "</span> &lt;&lt; p.age &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 结构体类型，形参的修改在栈区上</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printfC</span><span class="hljs-params">(Person p)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"first time = "</span> &lt;&lt; p.age &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">    p.age = <span class="hljs-number">40</span>;</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"second time = "</span> &lt;&lt; p.age &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">==========参数为指针类型==========</span><br><span class="line">first time = 18</span><br><span class="line">second time = 20</span><br><span class="line">third time = 20</span><br><span class="line">==========参数为引用类型==========</span><br><span class="line">first time = 20</span><br><span class="line">second time = 30</span><br><span class="line">third time = 30</span><br><span class="line">==========参数为结构体类型==========</span><br><span class="line">first time = 30</span><br><span class="line">second time = 40</span><br><span class="line">third time = 30</span><br></pre></td></tr></table></figure><p>以上这段代码分别将一个结构体用指针形式、引用形式和结构体变量形式作为形参传入到函数中，并对其值进行修改，最后打印结果。</p><p>我们可以看到指针类型和引用类型对变量进行修改，因为它们都指向同一块内存。结构体类型，形参的修改在栈区上，并不会对堆区中的结构体变量本身产生影响。</p><p><em>注：关于堆区、栈区的内存四区概念有问题可以看 <a href="https://shuiyujie.com/post/2f02c8ae.html">C语言学习笔记-指针01</a>。</em></p><ol><li>引用是一个变量的别名，有时候起到和指针一样的效果</li><li>引用比指针具有更强的可读性</li></ol><h1 id="引用作为函数返回值"><a href="#引用作为函数返回值" class="headerlink" title="引用作为函数返回值"></a>引用作为函数返回值</h1><ul><li>若返回栈变量: 不能成为其它引用的初始值(不能作为左值使用)</li><li>若返回静态变量或全局变量: 可以成为其他引用的初始值(可作为右值使用,也可作为左值使用)</li></ul><ol><li><a href="https://github.com/YujieShui/up-up-c/blob/master/extended_c/reference03.cpp" target="_blank" rel="noopener">引用作为函数返回-值返回栈变量代码示例</a></li><li><a href="https://github.com/YujieShui/up-up-c/blob/master/extended_c/reference04.cpp" target="_blank" rel="noopener">引用作为函数返回-值返回静态变量代码示例</a></li></ol><h1 id="指针引用"><a href="#指针引用" class="headerlink" title="指针引用"></a>指针引用</h1><p>都在代码里了，关键代码如下，<a href="https://github.com/YujieShui/up-up-c/blob/master/extended_c/reference05.cpp" target="_blank" rel="noopener">点击查看完整示例</a></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getTeacher</span><span class="hljs-params">(Teacher **teacher)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    Teacher *t = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    t = (Teacher*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Teacher));</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span>(t == <span class="hljs-literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">strcpy</span>(t-&gt;name, <span class="hljs-string">"Mary"</span>);</span><br><span class="line">    t-&gt;age = <span class="hljs-number">30</span>;</span><br><span class="line"></span><br><span class="line">    *teacher = t;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getTeacher02</span><span class="hljs-params">(Teacher *&amp;teacher)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    teacher = (Teacher *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Teacher));</span><br><span class="line">    <span class="hljs-keyword">if</span>(teacher == <span class="hljs-literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">strcpy</span>(teacher-&gt;name, <span class="hljs-string">"Lucy"</span>);</span><br><span class="line">    teacher-&gt;age = <span class="hljs-number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="const-引用"><a href="#const-引用" class="headerlink" title="const 引用"></a>const 引用</h1><p>const 最常见的作用就是在变量作为函数形参的时候加上 const 修饰，起到对形参的保护作用，加了 const 修饰的参数就不会在函数中被修改。</p><p>const 如果和引用放在一起会擦出什么火花？</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;</span><br><span class="line"><span class="hljs-comment">// int &amp;b = a; err</span></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;b = a;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> c = <span class="hljs-number">20</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;d = c;</span><br><span class="line"><span class="hljs-comment">// d = 30; err</span></span><br><span class="line">c = <span class="hljs-number">30</span>;</span><br></pre></td></tr></table></figure><p>第一组代码想说明的是 const 修饰的常量，如果我想用一直普通的引用指向它是不可以的。假设我们可以用一个普通的 b 做为 a 的引用，那就可以使用 b 去修改 a 所指代的内存，而 a 指向的内存是被 const 保护的，是不允许修改的。不过我们可以使用 const 修饰的引用去指向 a，此时他们的安全级别一样，都不会导致内存被修改的安全问题。</p><p>第二组代码想说明的 const 修饰的引用安全级别更高，可以用安全级别高的去引用安全级别低的。这时候造成的现象是 d 被 const 修饰不能修改，而 c 任然可以修改，虽然是同一片内存但是 d 也无法阻止 c 进行修改。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printA</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Teacher &amp;teacher)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//teacher.age = 33; </span></span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"teacher.age:%d \n"</span>, teacher.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码则表示 const 修饰的形参是只读的，不允许在函数中进行修改，起到了保护形参的作用。</p><p>总结一下：</p><ol><li>const 引用可以指向安全级别比其低的或者同级的</li><li>const 引用常在形参传递过程中起保护形参的作用</li></ol>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记-指针01</title>
      <link href="/post/2f02c8ae.html"/>
      <url>/post/2f02c8ae.html</url>
      
        <content type="html"><![CDATA[<p>指针是 C 语言的灵魂，现在对于指针的掌握肯定是不透彻的，然学习是一个迭代的过程，姑且写出目前自己的理解。</p><a id="more"></a><h1 id="指针的概念"><a href="#指针的概念" class="headerlink" title="指针的概念"></a>指针的概念</h1><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> *p = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    p = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));</span><br><span class="line">    p = &amp;a;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, p);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, *p);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">free</span>(p);</span><br><span class="line">        p = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看这样一段代码</p><ol><li>p 是一个指针变量，*p 是指针指向的内存空间的保存的值。</li><li>&amp;a 表示取变量 a 所在内存的地址，p = &amp;a 表示将内存 a 所在的地址值赋值给 p，相当于指针 p 指向 a 所在的内存。</li><li>接下来分别打印 p 和 *p 来验证上面的说法</li><li>最后我们释放内存空间</li></ol><p>明确几个概念：</p><ol><li>指针是一个变量</li><li>注意区分指针变量和它指向的内存块<ol><li>改变指针变量的值不会影响指针指向的内存区域 </li><li>改变指针指向的内存区域也不会改变指针变量的值</li></ol></li></ol><h1 id="内存四区"><a href="#内存四区" class="headerlink" title="内存四区"></a>内存四区</h1><p>先来看这样一段代码</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">get_str</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">char</span> str[] = <span class="hljs-string">"abcdefg"</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">char</span> buf[<span class="hljs-number">128</span>] = &#123;<span class="hljs-number">0</span>&#125;;</span><br><span class="line">    <span class="hljs-built_in">strcpy</span>(buf, get_str());</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"buf = %s\n"</span>, buf);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">// char *p = NULL;</span></span><br><span class="line">    <span class="hljs-comment">// p = get_str();</span></span><br><span class="line">    <span class="hljs-comment">// printf("p = %s\n", p);</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>char *p 是一个 char 类型的指针变量，看代码的意思是希望通过 get_str() 方法给指针 p 赋值。如果你运行一下这段代码会发现它是会报错的，至于为什么会报错就要分析一下内存四区了。</p><p><img src="http://image.shuiyujie.com/2019-05-11-16-35-12.png" alt="内存四区图"></p><table><thead><tr><th>区域</th><th>作用</th></tr></thead><tbody><tr><td>栈区(stack)</td><td>由编译器自动分配释放，存放函数的参数值，局部变量值等。</td></tr><tr><td>堆区（heap）</td><td>一般由程序员分配释放（动态内存申请与释放），若程序员不释放，程序结束时可能由操作系统回收。</td></tr><tr><td>全局区（静态区）</td><td>全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量在一块区域，未被初始化的全局变量和未初始化的静态变量在相邻的另一块区域，该区域在程序结束后由操作系统释放。</td></tr><tr><td>程序代码区</td><td>存放函数体的二进制代码。</td></tr></tbody></table><p>现在通过内存四区的理论来分析上面这一段代码。</p><p><img src="http://image.shuiyujie.com/2019-05-11-16-41-34.png" alt="内存四区分析"></p><ol><li>声明了一个名为 buf 的变量</li><li>调用 get_str()<ol><li>声明一个数组 str ，它是一个局部变量所以再栈区</li><li>字符串 “abcdef…” 是字符串常量，所以再全局区（静态区）</li><li>str = “abcdef” 会将全局区的字符串常量拷贝到 str 数组内存中</li></ol></li><li>紧接着 get_str() 调用结束，<strong>与之相关的内存就会被销毁</strong></li><li>strcpy() 希望将  get_str() 返回的字符串拷贝给 buf，但是因为这一块内存已经被销毁了，就会报错</li></ol><p><em>注：有时候以上的操作可能会成功，这可能是因为没有及时销毁，可以用我上面注释掉的指针操作的代码做练习，用内存四区的方式分析，赋值是一定不会成功的，原理相同。</em></p><h1 id="正确的赋值方式"><a href="#正确的赋值方式" class="headerlink" title="正确的赋值方式"></a>正确的赋值方式</h1><p>我们可以使用 malloc() 将变量保存在堆区，堆区的内存在函数执行完之后不会立即销毁，而是由我们自己销毁，或者再程序运行完之后由操作系统来销毁。</p><p><img src="http://image.shuiyujie.com/2019-05-11-16-54-13.png" alt="内存四区分析2"></p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">get_str2</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">char</span> *tmp = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>);</span><br><span class="line">    <span class="hljs-keyword">if</span>(tmp == <span class="hljs-literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">strcpy</span>(tmp, <span class="hljs-string">"adsaffa"</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">char</span> buf[<span class="hljs-number">128</span>] = &#123;<span class="hljs-number">0</span>&#125;;</span><br><span class="line">    <span class="hljs-comment">// strcpy(buf, get_str());</span></span><br><span class="line">    <span class="hljs-comment">// printf("buf = %s\n", buf);</span></span><br><span class="line">    <span class="hljs-keyword">char</span> *p = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    p = get_str2();</span><br><span class="line">    <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"p = %s\n"</span>, p);</span><br><span class="line">        <span class="hljs-built_in">free</span>(p);</span><br><span class="line">        p = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用指针的几个注意事项"><a href="#使用指针的几个注意事项" class="headerlink" title="使用指针的几个注意事项"></a>使用指针的几个注意事项</h1><p>这一小节属于使用指针过程中遇到的一些问题，以及如何避免，有个故事说：人如果知道自己会死在哪里，就死也不要去那里就行了。使用指针也一样，指针使用会遇到很多的坑，知道哪里有坑就要尽可能避免。</p><h2 id="修改内存时要保证内存可写"><a href="#修改内存时要保证内存可写" class="headerlink" title="修改内存时要保证内存可写"></a>修改内存时要保证内存可写</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">char</span> *p = <span class="hljs-string">"abcdef"</span>;</span><br><span class="line">    <span class="hljs-keyword">char</span> q[] = <span class="hljs-string">"fdasfafdfas"</span>;</span><br><span class="line">    p[<span class="hljs-number">2</span>] = <span class="hljs-string">"1”; // 会报错 err</span></span><br><span class="line"><span class="hljs-string">    q[2] = "</span><span class="hljs-number">1</span><span class="hljs-string">";</span></span><br><span class="line"><span class="hljs-string">    printf("</span>p: %s\n<span class="hljs-string">", p);</span></span><br><span class="line"><span class="hljs-string">    printf("</span>q: %s\n<span class="hljs-string">", q);</span></span><br><span class="line"><span class="hljs-string">    return 0;</span></span><br><span class="line"><span class="hljs-string">&#125;</span></span><br></pre></td></tr></table></figure><p>修改 p[2] 会报错，因为 abcdef 是字符串常量，保存在全局区（静态区），所以它是不能被修改的。使用指针的第一个事项就是修改内存的时候保证内存可写。</p><h2 id="指针的步长"><a href="#指针的步长" class="headerlink" title="指针的步长"></a>指针的步长</h2><p>指针的步长由指针指向的内存类型决定，比如说 int <em>p 步长就是 4，chat </em>p 步长就是 1。步长的意思就是每次 p++ 操作之后，地址移动的距离。可以分别打印 p 和 p++ 的值看一看就知道了。</p><p>由此还想讲一个问题就是如何计算一个动态数组的大小。比如 int a[] = {1, 2, 3, 4}，可以使用 <code>sizeof(a)/sizeof(a[0])</code>的方式计算数组大小。</p><h2 id="不允许-NULL-或者未知非法地址拷贝内存"><a href="#不允许-NULL-或者未知非法地址拷贝内存" class="headerlink" title="不允许 NULL 或者未知非法地址拷贝内存"></a>不允许 NULL 或者未知非法地址拷贝内存</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">char</span> *p =<span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-built_in">strcpy</span>(p, “<span class="hljs-number">1232143</span>”); <span class="hljs-comment">// 报错</span></span><br></pre></td></tr></table></figure><p>strcpy() 执行的操作时将字符串拷贝给指针 p 所指向的内存,此时指针 p 指向的内存是 NULL，就是说没有执行任何内存，字符串也就没地方拷贝，自然会发生错误。 </p><p>如果我们让<code>char* p = 0x11;</code> 任意赋一个值，也会报错，向未知非法地址拷贝也是不被允许的。 正确的做法就是将 p 指向一个已经分配好内存的指针，比如 char *q = “fdsafas” 。</p><p>所以当我们给一个使用 malloc() 分配内存之后应该习惯性地加一个判断，比如<code>int *p = (int *)malloc(sizeof(int));</code>之后应该进行判断<code>if(p == NULL)</code>如果为空则说明内存分配失败，就应该对异常进行处理。一直对应的，释放内存是有个也应该讲指针赋值为空<code>free(p); p = NULL;</code>。</p><h1 id="通过指针间接赋值"><a href="#通过指针间接赋值" class="headerlink" title="通过指针间接赋值"></a>通过指针间接赋值</h1><p>我们定义一个函数会有返回值，返回值可能是一个结果、可能表示一种状态。比如说<code>int findMax(int *a, int n);</code>在这个函数中我们出入一个数组，然后返回这个数组中最大的值。</p><p>那现在如果我想返回这个数组的最大值、最小值该怎么办？</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> *max, <span class="hljs-keyword">int</span> *min)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(a == <span class="hljs-literal">NULL</span> || n &lt;= <span class="hljs-number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> tmp_max, tmp_min, sum = *a;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(a[i] &lt; tmp_min)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp_min = a[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span>(a[i] &gt; tmp_max)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp_max = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    max = &amp;tmp_max;</span><br><span class="line">    min = &amp;tmp_min;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> a[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>&#125;;</span><br><span class="line">    <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> min = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> res = fun(a, <span class="hljs-number">5</span>, &amp;max, &amp;min);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span>(res == <span class="hljs-number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="hljs-string">"fun() err."</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"max = %d, min = %d\n"</span>, max, min);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个函数<code>int fun(int *a, int n, int *max, int *min);</code></p><ol><li>返回值表示成功或者失败</li><li>a 是数组指针</li><li>n 是数组大小</li><li>max 和 int 是 int 类型的指针</li></ol><p>关键就在于 max 和 int 这两个指针，它们指向的两个内存分别保存数组的最大和最小值，而这两个指针是由主函数传入的，此时就完成你了最大值和最小值传递。</p><p><strong>通过指针间接赋值是指针很强大的一个功能，我们可以看到很多函数都是这样定义的。</strong></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记-字符串</title>
      <link href="/post/a99472bd.html"/>
      <url>/post/a99472bd.html</url>
      
        <content type="html"><![CDATA[<ul><li>字符串初始化</li><li>访问字符串</li><li>字符串的拷贝</li></ul><a id="more"></a><h1 id="字符串初始化"><a href="#字符串初始化" class="headerlink" title="字符串初始化"></a>字符串初始化</h1><p>C 语言没有字符串类型，利用字符类型来模拟，以 \0 结尾。</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 如果用字符数组来初始化字符串，末尾不是\0结尾后面的会乱码</span></span><br><span class="line">    <span class="hljs-keyword">char</span> buf[] = &#123;<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>&#125;;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"buf = %s\n"</span>, buf);</span><br><span class="line">    <span class="hljs-comment">// 指定数组长度未初始化的地方会补零，读到0就作为字符串结束标记，则不会乱码</span></span><br><span class="line">    <span class="hljs-keyword">char</span> buf1[<span class="hljs-number">100</span>] = &#123;<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>&#125;;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"buf1 = %s\n"</span>, buf1);</span><br><span class="line">    <span class="hljs-comment">// '字符 0' ≠ 0 = '\0'</span></span><br><span class="line">    <span class="hljs-keyword">char</span> buf2[<span class="hljs-number">100</span>] = &#123;<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'0'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2'</span>&#125;;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"buf2 = %s\n"</span>, buf2);</span><br><span class="line">    <span class="hljs-keyword">char</span> buf3[<span class="hljs-number">100</span>] = &#123;<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-number">0</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2'</span>&#125;;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"buf3 = %s\n"</span>, buf3);</span><br><span class="line">    <span class="hljs-keyword">char</span> buf4[<span class="hljs-number">100</span>] = &#123;<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'\0'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2'</span>&#125;;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"buf4 = %s\n"</span>, buf4);</span><br><span class="line">    <span class="hljs-comment">// 常用初始化字符串的方法</span></span><br><span class="line">    <span class="hljs-keyword">char</span> str[] = <span class="hljs-string">"safafasga"</span>;</span><br><span class="line">    <span class="hljs-comment">// strlen() 和 sizeof() 的区别:</span></span><br><span class="line">    <span class="hljs-comment">// 字符串末尾以\0结尾，strlen() 计算字符串长短; sizeof()计算大小还会包含\0</span></span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"strlen() = %d, sizeof() = %d\n"</span>, <span class="hljs-built_in">strlen</span>(str), <span class="hljs-keyword">sizeof</span>(str));</span><br><span class="line">    <span class="hljs-keyword">char</span> str2[<span class="hljs-number">100</span>] = <span class="hljs-string">"safafasga"</span>;</span><br><span class="line">    <span class="hljs-comment">// 制定数组大小的情况下，未制定的位置将会自动补零</span></span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"strlen() = %d, sizeof() = %d\n"</span>, <span class="hljs-built_in">strlen</span>(str2), <span class="hljs-keyword">sizeof</span>(str2));</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="访问字符串"><a href="#访问字符串" class="headerlink" title="访问字符串"></a>访问字符串</h1><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">* 遍历字符串的方法</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">char</span> *buf = <span class="hljs-string">"fdsafasdgag"</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(buf); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>, buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);</span><br><span class="line">    <span class="hljs-keyword">char</span> *p = buf;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(buf); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>, p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(buf); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>, *(p + i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(buf); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>, *(buf + i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);</span><br><span class="line">    <span class="hljs-comment">// p 和 buf 等价么</span></span><br><span class="line">    <span class="hljs-comment">// buf 是常量，常量是不可变的</span></span><br><span class="line">    <span class="hljs-comment">// p 是变量，可变</span></span><br><span class="line">    <span class="hljs-comment">// p++;</span></span><br><span class="line">    <span class="hljs-comment">// buf++; // err</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串的拷贝"><a href="#字符串的拷贝" class="headerlink" title="字符串的拷贝"></a>字符串的拷贝</h1><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">* 1. 进行非空判断，避免异常</span></span><br><span class="line"><span class="hljs-comment">* 2. 不要直接使用形参</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_strcpy</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *dst, <span class="hljs-keyword">char</span> *src)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 非空判断</span></span><br><span class="line">    <span class="hljs-keyword">if</span>(dst == <span class="hljs-literal">NULL</span> || src == <span class="hljs-literal">NULL</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line">    <span class="hljs-comment">// 不要直接使用形参</span></span><br><span class="line">    <span class="hljs-comment">// 会改变数组的首地址位置</span></span><br><span class="line">    <span class="hljs-keyword">char</span> *to = dst;</span><br><span class="line">    <span class="hljs-keyword">char</span> *from = src;</span><br><span class="line">    <span class="hljs-keyword">while</span>(*to++ == *from++);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">// 上面把形参结果来不起作用，只有这样才行，之后再看一下</span></span><br><span class="line">    <span class="hljs-comment">// while(*dst++ == *src++);</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">* 1. 实现字符串拷贝函数</span></span><br><span class="line"><span class="hljs-comment">* 2. 写出健壮的代码的注意事项</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">char</span> *src = <span class="hljs-string">"dfagfadga"</span>;</span><br><span class="line">    <span class="hljs-keyword">char</span> dst[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;;</span><br><span class="line">    <span class="hljs-keyword">int</span> res = my_strcpy(dst, src);</span><br><span class="line">    <span class="hljs-keyword">if</span>(res != <span class="hljs-number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">"copy str error."</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"dst: %s\n"</span>, dst);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记-const关键字</title>
      <link href="/post/5c7372a9.html"/>
      <url>/post/5c7372a9.html</url>
      
        <content type="html"><![CDATA[<p>c语言中 const 关键字使用示例</p><ol><li>const 修饰的变量定义时要初始化，不初始化后面就没有办法赋值了</li><li>const 运用在指针上</li><li>c 语言中的 const 是个冒牌货，使用指针任然能够修改</li></ol><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">char</span> buf[] = <span class="hljs-string">"dfasfadsgafdg"</span>;</span><br><span class="line">    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *p = buf;</span><br><span class="line">    <span class="hljs-comment">// p[1] = "2"; err</span></span><br><span class="line">    p = <span class="hljs-string">"0x11"</span>;</span><br><span class="line">    <span class="hljs-comment">// const 此时修饰的是 *p，表示 p 指向的那块内存的内容 *p 是不可变的</span></span><br><span class="line"> </span><br><span class="line">    <span class="hljs-comment">// char const *p1 = buf;</span></span><br><span class="line">    <span class="hljs-comment">// p1[1] = '2;</span></span><br><span class="line">    <span class="hljs-comment">// 交换顺序这里 const char 与 char const 相同</span></span><br><span class="line"> </span><br><span class="line">    <span class="hljs-keyword">char</span> * <span class="hljs-keyword">const</span> p1 = buf;</span><br><span class="line">    p1[<span class="hljs-number">1</span>] = <span class="hljs-string">'2'</span>;</span><br><span class="line">    <span class="hljs-comment">// p1 = "0x11"; err</span></span><br><span class="line">    <span class="hljs-comment">// const 此时修饰的是 p，表示指针变量 p 本身是不可修改的，而指针变量指向的内容 *p 是可以修改的</span></span><br><span class="line"> </span><br><span class="line">    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * <span class="hljs-keyword">const</span> p3 = buf;</span><br><span class="line">    <span class="hljs-comment">// p3[1] = '2; err</span></span><br><span class="line">    <span class="hljs-comment">// p3 = "abc"; err</span></span><br><span class="line">    <span class="hljs-comment">// 两个 const 分别修饰了 p 和 *p，此时无论是指针还是指针指向的内存都不可变，完成处于只读状态</span></span><br><span class="line"> </span><br><span class="line">    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">123</span>;</span><br><span class="line">    <span class="hljs-comment">// a = 321; err</span></span><br><span class="line">    <span class="hljs-keyword">int</span> *q = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    q = &amp;a;</span><br><span class="line">    *q = <span class="hljs-number">321</span>;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"a: %d\n"</span>, a);</span><br><span class="line">    <span class="hljs-comment">// c 语言中的 const 是个冒牌货，使用指针任然能够修改</span></span><br><span class="line"> </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记-结构体</title>
      <link href="/post/e261fd69.html"/>
      <url>/post/e261fd69.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>结构体的类型和定义</p></li><li><p>结构体的赋值</p></li><li><p>结构体的数组</p></li><li><p>结构体嵌套一级指针</p></li><li>结构体嵌套二级指针</li><li>结构体作为函数参数</li><li>结构体深拷贝、浅拷贝</li></ul><a id="more"></a><h1 id="结构体的类型和定义"><a href="#结构体的类型和定义" class="headerlink" title="结构体的类型和定义"></a>结构体的类型和定义</h1><p>结构体是一种数据类型，用 struct 关键字来修饰，定义一个结构体可以这样：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">char</span> name[<span class="hljs-number">50</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用 typedef 修饰，就可以直接使用 Teacher </p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">char</span> name[<span class="hljs-number">50</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Teacher teacher = <span class="hljs-literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>为结构体申明变量有多种方式：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 初始化结构体变量1: 定义类型的同时定义变量</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">char</span> name[<span class="hljs-number">50</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> age;</span><br><span class="line">&#125;t1, t2;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 初始化结构体变量2</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">char</span> name[<span class="hljs-number">50</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> age;</span><br><span class="line">&#125;s1 = &#123;<span class="hljs-string">"Mike"</span>, <span class="hljs-number">15</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 初始化结构体变量3</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">char</span> name[<span class="hljs-number">50</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> age;</span><br><span class="line">&#125;dog = &#123;<span class="hljs-string">"Luck"</span>, <span class="hljs-number">3</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 初始化结构体变量4</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span> <span class="hljs-title">t3</span> = &#123;</span><span class="hljs-string">"Mary"</span>, <span class="hljs-number">21</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 初始化结构体变量5</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span> <span class="hljs-title">t4</span>;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span> *<span class="hljs-title">pTeacher</span> = <span class="hljs-title">NULL</span>;</span></span><br><span class="line">pTeacher = &amp;t4;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">strcpy</span>(pTeacher-&gt;name, <span class="hljs-string">"John"</span>);</span><br><span class="line">pTeacher-&gt;age = <span class="hljs-number">30</span>;</span><br></pre></td></tr></table></figure><h1 id="结构体的赋值"><a href="#结构体的赋值" class="headerlink" title="结构体的赋值"></a>结构体的赋值</h1><p>结构体赋值之前要先给结构体申请内存。</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* 结构体赋值 */</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">char</span> name[<span class="hljs-number">50</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span> <span class="hljs-title">teacher_t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show_teacher</span><span class="hljs-params">(<span class="hljs-keyword">teacher_t</span> t)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">copyTeacher</span><span class="hljs-params">(<span class="hljs-keyword">teacher_t</span> *to, <span class="hljs-keyword">teacher_t</span> *from)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">teacher_t</span> t1, t2, t3;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 结构体是一种数据类型，分配空间之后才能赋值</span></span><br><span class="line">    <span class="hljs-built_in">memset</span>(&amp;t1, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(t1));</span><br><span class="line">    <span class="hljs-built_in">strcpy</span>(t1.name, <span class="hljs-string">"teacher"</span>);</span><br><span class="line">    t1.age = <span class="hljs-number">30</span>;</span><br><span class="line"></span><br><span class="line">    show_teacher(t1);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 直接赋值</span></span><br><span class="line">    t2 = t1;</span><br><span class="line">    show_teacher(t2);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 作为参数传递到用于拷贝的函数</span></span><br><span class="line">    copyTeacher(&amp;t3, &amp;t1);</span><br><span class="line">    show_teacher(t3);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">copyTeacher</span><span class="hljs-params">(<span class="hljs-keyword">teacher_t</span> *to, <span class="hljs-keyword">teacher_t</span> *from)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    *to = *from;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show_teacher</span><span class="hljs-params">(<span class="hljs-keyword">teacher_t</span> t)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"teacher name = %s\n"</span>, t.name);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"teacher age = %d\n"</span>, t.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结构体的数组"><a href="#结构体的数组" class="headerlink" title="结构体的数组"></a>结构体的数组</h1><p>指针数组可以分成静态结构体数组和动态结构体数组两种。</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 静态结构体数组</span></span><br><span class="line">Teacher t1[<span class="hljs-number">3</span>] = &#123;<span class="hljs-string">"a"</span>, <span class="hljs-number">18</span>, <span class="hljs-string">"a"</span>, <span class="hljs-number">28</span>, <span class="hljs-string">"a"</span>, <span class="hljs-number">38</span>&#125;;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s, %d\n"</span>, t1[i].name, t1[i].age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 动态结构体数组</span></span><br><span class="line">Teacher *p = <span class="hljs-literal">NULL</span>;</span><br><span class="line">p = (Teacher *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">3</span> * <span class="hljs-keyword">sizeof</span>(Teacher));</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">char</span> buf[<span class="hljs-number">50</span>];</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">"name%d"</span>, i);</span><br><span class="line"><span class="hljs-built_in">strcpy</span>(p[i].name, buf);</span><br><span class="line">p[i].age = <span class="hljs-number">20</span> + i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/YujieShui/up-up-c/blob/master/struct/struct03.c" target="_blank" rel="noopener">结构体数组</a></p><h1 id="结构体嵌套指针"><a href="#结构体嵌套指针" class="headerlink" title="结构体嵌套指针"></a>结构体嵌套指针</h1><p>我们在定义结构体的时候，其中有一个属性使用了一级指针：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">char</span> *name;</span><br><span class="line">    <span class="hljs-keyword">int</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如上所示<code>char *name</code>是一个指针类型的变量，指针类型的变量当我们为其赋值时要分配内存空间，释放结构体的时候也要先释放其中指针内存的变量。</p><p><a href="https://github.com/YujieShui/up-up-c/blob/master/struct/struct04.c" target="_blank" rel="noopener">示例代码，结构体嵌套一级指针</a></p><p><a href="https://github.com/YujieShui/up-up-c/blob/master/struct/struct06.c" target="_blank" rel="noopener">示例代码，结构体嵌套二级指针</a></p><h1 id="结构体深拷贝、浅拷贝"><a href="#结构体深拷贝、浅拷贝" class="headerlink" title="结构体深拷贝、浅拷贝"></a>结构体深拷贝、浅拷贝</h1><p>当结构体中嵌套了指针，采用浅拷贝的方式如下</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Student stu;</span><br><span class="line">stu.name = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">30</span>);</span><br><span class="line"><span class="hljs-built_in">strcpy</span>(stu.name, <span class="hljs-string">"aaaaaa"</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 浅拷贝，stu 和 sut2 的name 指针指向同一块内存</span></span><br><span class="line">Student stu2;</span><br><span class="line">stu2 = stu;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"name = %s\n"</span>, stu2.name);</span><br></pre></td></tr></table></figure><p>此时 stu.name 和 stu2.name 指向同一块内存空间，当释放其中一个指针的时候，另一个 name 的值也就消失了。</p><p>深拷贝的方式指的就是 stu2.name 指向一块新的内存空间，这块内存空间拷贝 stu.name 指向的空间的内容，就像下面这样。</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 深拷贝，stu3 重新申请一块内存</span></span><br><span class="line">Student stu3;</span><br><span class="line">stu3.name = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">30</span>);</span><br><span class="line"><span class="hljs-built_in">strcpy</span>(stu3.name, stu.name);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"name = %s\n"</span>, stu3.name);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/YujieShui/up-up-c/blob/master/struct/struct07.c" target="_blank" rel="noopener">示例代码，结构体的深拷贝和浅拷贝</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记-文件操作</title>
      <link href="/post/fe52dfa7.html"/>
      <url>/post/fe52dfa7.html</url>
      
        <content type="html"><![CDATA[<p>C语言中我们使用一个指针变量指向一个文件，这个文件就是文件指针。这个文件指针就是 FILE 结构体，它被包含在头文件 “stdio.h” 中。拿到文件指针再结合文件操作的 API，我们就可以对文件进行读写操作。</p><a id="more"></a><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="打开文件-fopen"><a href="#打开文件-fopen" class="headerlink" title="打开文件 fopen()"></a>打开文件 fopen()</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">FILE *fopen(const char *path, const char *mode);</span><br></pre></td></tr></table></figure><p>文件的打开操作表示返回一个指向制定文件的 <strong>FILE 结构体</strong>。我们需要指定文件位置和操作方式，特别需要注意的是区分不同的文件操作方式将会产生的结果。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">r      Open text file for reading.  The stream  is  positioned  at  the beginning of the file.</span><br><span class="line"></span><br><span class="line">r+     Open  for  reading and writing.  The stream is positioned at the beginning of the file.</span><br><span class="line"></span><br><span class="line">w      Truncate file to zero length or create text  file  for  writing. The stream is positioned at the beginning of the file.</span><br><span class="line"></span><br><span class="line">w+     Open  for  reading  and writing.  The file is created if it does not exist, otherwise it is truncated.  The stream is  positioned at the beginning of the file.</span><br><span class="line"></span><br><span class="line">a      Open  for  appending (writing at end of file).  The file is created if it does not exist.  The stream is positioned at the  end of the file.</span><br><span class="line"></span><br><span class="line">a+     Open  for  reading  and appending (writing at end of file).  The file is created if it does not exist.  The initial file position for  reading  is  at  the  beginning  of the file, but output is always appended to the end of the file.</span><br></pre></td></tr></table></figure><h2 id="关闭文件-fclose"><a href="#关闭文件-fclose" class="headerlink" title="关闭文件 fclose()"></a>关闭文件 fclose()</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int fclose(FILE *stream);</span><br></pre></td></tr></table></figure><p>文件操作完成后,必须要用fclose()函数进行关闭,这是因为对打开的文件进行写入时,若文件缓冲区的空间未被写入的内容填满,这些内容不会写到打开的文件中去而丢失。只有对打开的文件进行关闭操作时,停留在文件缓冲区的内容才能写到该文件中去,从而使文件完整。再者一旦关闭了文件,该文件对应的FILE结构将被释放,从而使关闭的文件得到保护,因为这时对该文件的存取操作将不会进行。文件的关闭也意味着释放了该文件的缓冲区。</p><p>它表示该函数将关闭FILE指针对应的文件,并返回一个整数值。若成功地关闭了文件,则返回一个0值,否则返回一个非0值。</p><h2 id="fgetc-和-fputc-按字符读写文件"><a href="#fgetc-和-fputc-按字符读写文件" class="headerlink" title="fgetc() 和 fputc() 按字符读写文件"></a>fgetc() 和 fputc() 按字符读写文件</h2><p>首先用 fopen() 读入一个文件<code>FILE *fp = **fopen**(&quot;../data/file01.txt&quot;, &quot;r+&quot;);</code> 指定文件位置以及读写格式，r+表示打开文件进行读写操作。</p><p>写操作使用 fputc() 逐个字符写入：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">char</span> text[] = <span class="hljs-string">"This is a text for test."</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> length = <span class="hljs-built_in">strlen</span>(text);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line">fputc(text[i], fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读操作使用 fgetc() 逐个字符读取，当读到结束标志位 EOF 时停止</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 方法一</span><br><span class="line">while( (ch = fgetc(fp)) != EOF )</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%c&quot;, ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 方法二</span><br><span class="line">while(!feof(fp))</span><br><span class="line">&#123;</span><br><span class="line">ch = fgetc(fp);</span><br><span class="line">printf(&quot;%c&quot;, ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/YujieShui/up-up-c/blob/master/file_operation/file01.c" target="_blank" rel="noopener">逐个字符读写文件，示例代码</a></p><h2 id="fgets-和-fputs-按行读写文件"><a href="#fgets-和-fputs-按行读写文件" class="headerlink" title="fgets() 和 fputs() 按行读写文件"></a>fgets() 和 fputs() 按行读写文件</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* 按行读写 */</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    FILE *fp = fopen(<span class="hljs-string">"../data/file02.txt"</span>, <span class="hljs-string">"r+"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span>(fp == <span class="hljs-literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="hljs-string">"fopen(): file is NULL."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">char</span> tmp[<span class="hljs-number">100</span>] = <span class="hljs-string">"aaaaaaaaa"</span>;</span><br><span class="line">    <span class="hljs-built_in">fputs</span>(tmp, fp);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">char</span> buf[<span class="hljs-number">100</span>];</span><br><span class="line">    <span class="hljs-keyword">while</span>(!feof(fp))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">char</span> *p = fgets(buf, <span class="hljs-keyword">sizeof</span>(buf), fp);</span><br><span class="line">        <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"buf = %s"</span>, buf);</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"p = %s"</span>, p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fwrite-和-fread-按块读写文件"><a href="#fwrite-和-fread-按块读写文件" class="headerlink" title="fwrite() 和 fread() 按块读写文件"></a>fwrite() 和 fread() 按块读写文件</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FILE_NAME  <span class="hljs-meta-string">"../data/file03.txt"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">teacher</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> age;</span><br><span class="line"><span class="hljs-keyword">int</span> id;</span><br><span class="line"><span class="hljs-keyword">char</span> *name;  </span><br><span class="line"><span class="hljs-keyword">int</span> name_len;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">FILE *fp = <span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 0</span></span><br><span class="line"><span class="hljs-keyword">int</span> write_ret = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">fp = fopen(FILE_NAME, <span class="hljs-string">"wb+"</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>) &#123;</span><br><span class="line"><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"fopen error\n"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">teacher</span> <span class="hljs-title">t1</span>;</span></span><br><span class="line"><span class="hljs-keyword">char</span> *name = <span class="hljs-string">"zhang3"</span>;</span><br><span class="line"></span><br><span class="line">t1.age = <span class="hljs-number">10</span>;</span><br><span class="line">t1.id = <span class="hljs-number">20</span>;</span><br><span class="line">t1.name = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">64</span>);</span><br><span class="line"><span class="hljs-built_in">memset</span>(t1.name, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>);</span><br><span class="line"><span class="hljs-built_in">strcpy</span>(t1.name, name);</span><br><span class="line">t1.name_len = <span class="hljs-built_in">strlen</span>(name);</span><br><span class="line"></span><br><span class="line">write_ret = fwrite(&amp;t1, <span class="hljs-keyword">sizeof</span>(struct teacher), <span class="hljs-number">1</span>, fp);</span><br><span class="line"><span class="hljs-keyword">if</span> (write_ret &lt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line"><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"write error\n"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">write_ret = fwrite(t1.name, t1.name_len, <span class="hljs-number">1</span>, fp);</span><br><span class="line"><span class="hljs-keyword">if</span> (write_ret &lt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line"><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"write error\n"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (fp != <span class="hljs-literal">NULL</span>) &#123;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// #if 0</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">teacher</span> <span class="hljs-title">t2</span> = &#123;</span> <span class="hljs-number">0</span> &#125;;</span><br><span class="line"><span class="hljs-keyword">int</span> read_ret = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">fp = fopen(FILE_NAME, <span class="hljs-string">"rb+"</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>) &#123;</span><br><span class="line"><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"fopen r+error\n"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read_ret = fread(&amp;t2, <span class="hljs-keyword">sizeof</span>(struct teacher), <span class="hljs-number">1</span>, fp);</span><br><span class="line"><span class="hljs-keyword">if</span> (read_ret &lt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line"><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"fread error\n"</span>);</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t2.name = <span class="hljs-built_in">malloc</span>(t2.name_len + <span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-built_in">memset</span>(t2.name, <span class="hljs-number">0</span>, t2.name_len + <span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">read_ret = fread(t2.name, t2.name_len, <span class="hljs-number">1</span>, fp);</span><br><span class="line"><span class="hljs-keyword">if</span> (read_ret &lt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line"><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"fread error\n"</span>);</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"id : %d, age : %d, name:%s, name_len :%d\n"</span>, t2.id, t2.age, t2.name, t2.name_len);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (fp != <span class="hljs-literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// #endif</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记-写一个最简单的makefile</title>
      <link href="/post/24de7431.html"/>
      <url>/post/24de7431.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/makefile.png" alt="makefile思维导图"></p><p><a href="https://github.com/YujieShui/up-up-c/tree/master/how_to_write_makefile" target="_blank" rel="noopener">示例代码</a></p><a id="more"></a><h1 id="最简单的-makefile"><a href="#最简单的-makefile" class="headerlink" title="最简单的 makefile"></a>最简单的 makefile</h1><figure class="highlight makefile hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-section">app: main.c add.c mul.c sub.c</span></span><br><span class="line">gcc main.c add.c mul.c sub.c -o app</span><br></pre></td></tr></table></figure><ul><li>目标：生产名为 app 的可执行文件</li><li>依赖：可执行文件通过 .c 文件生成</li><li>命令：通过 gcc 命令生成</li></ul><p>第一个版本的问题在于每次都需要编译所有的 .c 文件，如果想要修改哪个文件就只编译修改过的文件就可以这样那样写：</p><figure class="highlight makefile hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-section">app:main.o add.o mul.o sub.o</span></span><br><span class="line">gcc main.o add.o mul.o sub.o -o app</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">main.o:main.c</span></span><br><span class="line">gcc -c main.c</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">add.o:add.c</span></span><br><span class="line">gcc -c add.c</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">mul.o:mul.c</span></span><br><span class="line">gcc -c mul.c</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">sub.o:sub.c</span></span><br><span class="line">gcc -c sub.c</span><br></pre></td></tr></table></figure><ul><li>目标：生成名为 app 的可执行文件</li><li>依赖：预编译完成的 .o 文件</li><li>命令：系列 gcc 命令</li></ul><h1 id="makefile的工作原理"><a href="#makefile的工作原理" class="headerlink" title="makefile的工作原理"></a><strong>makefile的工作原理</strong></h1><h2 id="makefile中的变量"><a href="#makefile中的变量" class="headerlink" title="makefile中的变量"></a><strong>makefile中的变量</strong></h2><figure class="highlight makefile hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">obj=main.o add.o mul.o sub.o</span><br><span class="line">target=app</span><br><span class="line">CC=gcc</span><br><span class="line"><span class="hljs-variable">$(target)</span>:<span class="hljs-variable">$(obj)</span></span><br><span class="line">    gcc <span class="hljs-variable">$(obj)</span> -o <span class="hljs-variable">$(target)</span></span><br><span class="line">    </span><br><span class="line"><span class="hljs-section">%.o:%.c</span></span><br><span class="line"><span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$&lt;</span> -o <span class="hljs-variable">$@</span></span><br></pre></td></tr></table></figure><p><code>%.o:%.c</code>模式匹配</p><p>自动变量，只能在规则中的命令中使用</p><ul><li><code>$&lt;</code>规则中第一个依赖</li><li><code>$@</code>规则中的目标</li><li><code>$^</code>规则中所有依赖</li></ul><h2 id="makefile中的函数"><a href="#makefile中的函数" class="headerlink" title="makefile中的函数"></a><strong>makefile中的函数</strong></h2><figure class="highlight makefile hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">target=app</span><br><span class="line">src=<span class="hljs-variable">$(<span class="hljs-built_in">wildcard</span> ./*.c)</span></span><br><span class="line">obj=<span class="hljs-variable">$(<span class="hljs-built_in">patsubst</span> ./%.c, ./%.o, <span class="hljs-variable">$(src)</span>)</span></span><br><span class="line">CC=gcc</span><br><span class="line">CPPFLAGS=-I</span><br><span class="line"><span class="hljs-variable">$(target)</span>:<span class="hljs-variable">$(obj)</span></span><br><span class="line"><span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(obj)</span> -o <span class="hljs-variable">$(target)</span></span><br><span class="line">    </span><br><span class="line"><span class="hljs-section">%.o:%.c</span></span><br><span class="line"><span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$&lt;</span> -o <span class="hljs-variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta"><span class="hljs-meta-keyword">.PHONY</span>:clean</span></span><br><span class="line"><span class="hljs-section">clean:</span></span><br><span class="line">rm -f <span class="hljs-variable">$(obj)</span> <span class="hljs-variable">$(target)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeepre源码编译</title>
      <link href="/post/5ddebf1a.html"/>
      <url>/post/5ddebf1a.html</url>
      
        <content type="html"><![CDATA[<p>我们首先 fork 一份 zookeeper 在 github 上的项目，地址为：<a href="https://github.com/apache/zookeeper。再将" target="_blank" rel="noopener">https://github.com/apache/zookeeper。再将</a> fork 之后的项目 clone 到本地。</p><p>我们不使用最新版本的代码，而是使用 3.4.11 这个版本的，所以我们根据 tag，checkout 一个分支出来：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b zookeeper3.4.11 release-3.4.11</span><br></pre></td></tr></table></figure><p>由于 zookeeper 是用 ant 构建的，所以要安装 ant。我使用的是 macOS，直接用 homebrew 安装比较方便：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install ant</span><br></pre></td></tr></table></figure><p>之后用 ant 构建一个 eclipse 项目</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ant eclipse</span><br></pre></td></tr></table></figure><p>最后，将导入项目。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper的基本概念</title>
      <link href="/post/e7973620.html"/>
      <url>/post/e7973620.html</url>
      
        <content type="html"><![CDATA[<p>本文介绍 zookeeper 的一些基本概念。</p><a id="more"></a><h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><ul><li>分层结构</li><li>树形结构中的每个节点叫做Znode</li><li>每个Znode都有数据ͧ(byte[]类型ͨ)，也可以有子节点</li><li><p>节点路径</p><ul><li>斜线分隔:/Zoo/Duck</li><li>没有相对路径</li></ul></li><li><p>通过数据结构stat来孓储数据的变化 ACL的变化和时间戳 </p></li><li>数据发生变化时，版本号会递增</li><li>可以对Znode中的数据进行读写操作</li></ul><h1 id="数据节点-Znode"><a href="#数据节点-Znode" class="headerlink" title="数据节点(Znode)"></a>数据节点(Znode)</h1><ul><li>不是机器的意思</li><li>Zk树形结构中的数据节点，用于存储数据</li><li>持久节点：一旦创建,除非主动调用删除操作,否则一直存储在zk上</li><li>临时节点：与客户端的会话绑定，一旦客户端绘画是小，这个客户端创建的所有临时节点都会被移除</li><li>SEQUENTIAL Znode：创建临时节点时，如果设置属性 SEQUENTIAL，则会自动在节点名后面追加一个整型数字</li></ul><h1 id="持久节点"><a href="#持久节点" class="headerlink" title="持久节点"></a>持久节点</h1><p>启动一个 zkCli 创建一个持久节点，即使创建节点的会话关闭，该节点也不会被删除。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 10] create /node nodedata</span><br><span class="line">Created /node</span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] ls /</span><br><span class="line">[node, zookeeper]</span><br></pre></td></tr></table></figure><h2 id="临时节点"><a href="#临时节点" class="headerlink" title="临时节点"></a>临时节点</h2><p>启动一个 zkCli 之后创建临时节点</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 3] create -e /node1 node1data</span><br><span class="line">Created /node1</span><br><span class="line">[zk: localhost:2181(CONNECTED) 4] ls /</span><br><span class="line">[zookeeper, node1]</span><br></pre></td></tr></table></figure><p>将创建临时节点的会话关闭之后，临时节点将会消失。(可以再起一个 zkCli 验证)</p><h2 id="顺序节点"><a href="#顺序节点" class="headerlink" title="顺序节点"></a>顺序节点</h2><p>创建数据节点</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 12] create -s /node/seq 321</span><br><span class="line">Created /node/seq0000000000</span><br><span class="line">[zk: localhost:2181(CONNECTED) 13] create -s /node/seq 322</span><br><span class="line">Created /node/seq0000000001</span><br><span class="line">[zk: localhost:2181(CONNECTED) 15] ls /node</span><br><span class="line">[seq0000000000, seq0000000001]</span><br></pre></td></tr></table></figure><h1 id="集群角色"><a href="#集群角色" class="headerlink" title="集群角色"></a>集群角色</h1><ul><li>Leader: 为客户端提供读和写服务</li><li>Follower: 提供读服务，所有写服务都需要转交给Leader角色，参与选举</li><li>Observer: 提供读服，不参与选举过程，一般是为了增强zk集群的读请求并发能力</li></ul><h1 id="会发-Session"><a href="#会发-Session" class="headerlink" title="会发(Session)"></a>会发(Session)</h1><ul><li>Zk的客户与zk的服务端之间的连接</li><li>通过心跳检测保持客户端连接的存活</li><li>接收来自服务端的watch事件通知</li><li>可以设置超时时间</li></ul><h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><ul><li>Version: 当前 Znode 的版本</li><li>Cversion：当前 Znode 的子节点的版本</li><li>Aversion：当前 Znode 的 ANL(访问控制)版本</li></ul><h1 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h1><ul><li>作用于 Znode 节点上</li><li>多种事件通知：数据更新，子节点状态等</li></ul><h1 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h1><ul><li>Access Control Lists</li><li>类似于linux/unix的权限控制</li><li><strong>CREATE</strong>：创建子节点的权限</li><li>READ:获取节点数据和子节点列表的权限</li><li>WRITE：更新节点数据的权限</li><li><strong>DELETE</strong>：删除子节点的权限</li><li>ADMIN：设置节点ACL的权限</li></ul><p><em>CREATE和DELETE是针对子节点的权限控制。</em></p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper概述</title>
      <link href="/post/6e7f6d53.html"/>
      <url>/post/6e7f6d53.html</url>
      
        <content type="html"><![CDATA[<h1 id="Q-zookeeper-解决了什么问题？"><a href="#Q-zookeeper-解决了什么问题？" class="headerlink" title="Q: zookeeper 解决了什么问题？"></a>Q: zookeeper 解决了什么问题？</h1><p><img src="http://image.shuiyujie.com/2019-09-20-07-37-54.png" alt="分布式系统的问题"></p><p>相对于开发在一台计算机上运行的单个程序，<strong>如何让一个应用中多个独立的程序协同工作</strong>是一件非常困难的事情。开发这样的应用，很容易让很多开发人员陷入如何使多个程序协同工作的逻辑中，最后导致没有时间更好地思考和实现他们自己的应用程序逻辑；又或者开发人员对协同逻辑关注不够，只是用很少的时间开发了一个简单脆弱的主协调器，导致不可靠的单一失效点。</p><a id="more"></a><h1 id="Q-zookeeper-是怎么解决应用中多个独立程序协同工作的问题的？"><a href="#Q-zookeeper-是怎么解决应用中多个独立程序协同工作的问题的？" class="headerlink" title="Q: zookeeper 是怎么解决应用中多个独立程序协同工作的问题的？"></a>Q: zookeeper 是怎么解决应用中多个独立程序协同工作的问题的？</h1><p><img src="http://image.shuiyujie.com/2019-09-20-07-39-34.png" alt="协调者"></p><p>ZooKeeper从文件系统API得到启发，提供一组简单的API，使得开发人员可以实现通用的协作任务，包括<strong>选举主节点、管理组内成员关系、管理元数据等</strong>。ZooKeeper包括一个应用开发库（主要提供Java和C两种语言的API）和一个用Java实现的服务组件。ZooKeeper的服务组件运行在一组专用服务器之上，保证了高容错性和可扩展性。</p><p>当你决定使用ZooKeeper来设计应用时，最好将应用数据和协同数据独立开。比如，网络邮箱服务的用户对自己邮箱中的内容感兴趣，但是并不关心由哪台服务器来处理特定邮箱的请求。在这个例子中，邮箱内容就是应用数据，而从邮箱到某一台邮箱服务器之间的映射关系就是<strong>协同数据（或称元数据）</strong>。整个ZooKeeper服务所管理的就是后者</p><h1 id="Q-zookeeper的应用场景？"><a href="#Q-zookeeper的应用场景？" class="headerlink" title="Q: zookeeper的应用场景？"></a>Q: zookeeper的应用场景？</h1><ul><li><p>Apache HBase：HBase是一个通常与Hadoop一起使用的数据存储仓库。在HBase中，ZooKeeper用于选举一个集群内的主节点，以便跟踪可用的服务器，并保存集群的元数据。</p></li><li><p>Apache Kafka：Kafka是一个基于发布-订阅（pub-sub）模型的消息系统。其中ZooKeeper用于检测崩溃，实现主题（topic）的发现，并保持主题的生产和消费状态。</p></li><li>Apache Solr：Solr是一个企业级的搜索平台。Solr的分布式版本命名为SolrCloud，它使用ZooKeeper来存储集群的元数据，并协作更新这些元数据。</li><li>Yahoo！Fetching Service：Yahoo！Fetching Service是爬虫实现的一部分，通过缓存内容的方式高效地获取网页信息，同时确保满足网页服务器的管理规则（比如robots.txt文件）。该服务采用ZooKeeper实现主节点选举、崩溃检测和元数据存储。</li><li>Facebook Messages：Facebook推出的这个应用（<a href="http://on.fb.me/1a7uViK）集成了email、短信、Facebook聊天和Facebook收件箱等通信通道。该应用将ZooKeeper作为控制器，用来实现数据分片、故障恢复和服务发现等功能。" target="_blank" rel="noopener">http://on.fb.me/1a7uViK）集成了email、短信、Facebook聊天和Facebook收件箱等通信通道。该应用将ZooKeeper作为控制器，用来实现数据分片、故障恢复和服务发现等功能。</a></li></ul><h1 id="Q-zookeeper不适用的场景？"><a href="#Q-zookeeper不适用的场景？" class="headerlink" title="Q: zookeeper不适用的场景？"></a><strong>Q: zookeeper不适用的场景？</strong></h1><p>整个ZooKeeper的服务器集群管理着应用协作的关键数据。ZooKeeper不适合用作海量数据存储。对于需要存储海量的应用数据的情况，我们有很多备选方案，比如说数据库和分布式文件系统等。因为不同的应用有不同的需求，如对一致性和持久性的不同需求，所以在设计应用时，最佳实践还是应该将应用数据和协同数据独立开。</p><h1 id="Q-使用-zookeeper-时需要注意的问题？"><a href="#Q-使用-zookeeper-时需要注意的问题？" class="headerlink" title="Q: 使用 zookeeper 时需要注意的问题？"></a><strong>Q: 使用 zookeeper 时需要注意的问题？</strong></h1><ul><li>消息延迟：消息传输可能会发生任意延迟，比如，因为网络拥堵。这种任意延迟可能会导致不可预期的后果。比如，根据基准时钟，进程P先发送了一个消息，之后另一个进程Q发送了消息，但是进程Q的消息也许会先完成传送。</li><li>处理器性能：操作系统的调度和超载也可能导致消息处理的任意延迟。当一个进程向另一个进程发送消息时，整个消息的延时时间约等于发送端消耗的时间、传输时间、接收端的处理时间的总和。如果发送或接收过程需要调度时间进行处理，消息延时会更高。</li><li>时钟偏移：使用时间概念的系统并不少见，比如，确定某一时间系统中发生了哪些事件。处理器时钟并不可靠，它们之间也会发生任意的偏移。因此，依赖处理器时钟也许会导致错误的决策。</li></ul><h1 id="Q-ZooKeeper的成功和注意事项"><a href="#Q-ZooKeeper的成功和注意事项" class="headerlink" title="Q: ZooKeeper的成功和注意事项"></a><strong>Q: ZooKeeper的成功和注意事项</strong></h1><p>不得不指出，完美的解决方案是不存在的，我们重申ZooKeeper无法解决分布式应用开发者面对的所有问题，而是为开发者提供了一个优雅的框架来处理这些问题。多年以来，ZooKeeper在分布式计算领域进行了大量的工作。Paxos算法<a href="evernotecid://E52A53DA-6D02-407A-9C28-91264ED3E6A7/appyinxiangcom/663849/ENNote/p4132#" target="_blank" rel="noopener">[1]</a>和虚拟同步技术（virtual synchrony）<a href="evernotecid://E52A53DA-6D02-407A-9C28-91264ED3E6A7/appyinxiangcom/663849/ENNote/p4132#" target="_blank" rel="noopener">[2]</a>给ZooKeeper的设计带来了很大影响，通过这些技术可以无缝地处理所发生的某些变化或情况，并提供给开发者一个框架，来应对无法自动处理的某些情况。</p><p>ZooKeeper最初由雅虎研究院开发，用于处理大量的大型分布式应用。我们注意到，这些应用在分布式协作方面的处理方式并不妥当，这些系统的部署存在单点故障问题或很脆弱，另一方面，开发者在分布式协作方面花费了大量的时间和精力，导致开发者没有足够的资源来关注应用本身的功能逻辑。我们还注意到，这些应用都在基本协作方面有相同的需求。因此，我们开始着手设计一套通用的解决方案，通过某些关键点让我们可以一次实现就能应用于大多数不同的应用中。ZooKeeper已经被证实更加通用，其受欢迎程度超越了我们的想象。</p><p>多年来，我们发现人们可以很容易地部署ZooKeeper集群，轻松通过这个集群开发应用，但实际上，在使用ZooKeeper时，有些情况ZooKeeper自身无法进行决策而是需要开发者自己做出决策，有些开发者并不完全了解这些。编写本书的其中一个目的就是让开发者了解如何更有效地使用ZooKeeper，以及为什么需要这样做。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记-静态库、动态库的制作和使用</title>
      <link href="/post/62b06016.html"/>
      <url>/post/62b06016.html</url>
      
        <content type="html"><![CDATA[<p>本文将介绍 C 语言静态库和动态库制作和使用的过程，系统环境是 Ubuntu16.04，其他系统制作方法可能略有差别。</p><p><a href="https://github.com/YujieShui/up-up-c/tree/master/how_to_make_lib" target="_blank" rel="noopener">示例代码</a></p><a id="more"></a><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── include</span><br><span class="line">│   └── head.h</span><br><span class="line">├── lib</span><br><span class="line">├── main.c</span><br><span class="line">└── src</span><br><span class="line">    ├── add.c</span><br><span class="line">    ├── mul.c</span><br><span class="line">    ├── sub.c</span><br></pre></td></tr></table></figure><ul><li>include - 头文件目录</li><li>lib - 库文件目录</li><li>src - 源代码目录</li></ul><h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><p>本节介绍如何将代码编译成静态库。当我们希望程序响应更快，或者不想提供源代码，我们可以使用静态库。</p><p><img src="http://image.shuiyujie.com/static_library.png" alt="静态库"></p><h3 id="编译静态库"><a href="#编译静态库" class="headerlink" title="编译静态库"></a>编译静态库</h3><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 将 .c 文件编译成 .o 文件</span></span><br><span class="line">➜  ls</span><br><span class="line">add.c mul.c sub.c</span><br><span class="line">➜  gcc *.c -c -I ../include</span><br><span class="line">➜  ls</span><br><span class="line">add.c add.o mul.c mul.o sub.c sub.o</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 将 .o 文件打包，生成 .a 文件</span></span><br><span class="line">➜  ar rcs libMyCalc.a *.o</span><br><span class="line">➜  ls</span><br><span class="line">add.c       libMyCalc.a mul.o       sub.o</span><br><span class="line">add.o       mul.c       sub.c</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 将 .a 文件移动到 lib 目录下</span></span><br><span class="line">➜  mv libMyCalc.a ../lib</span><br></pre></td></tr></table></figure><h3 id="使用静态库"><a href="#使用静态库" class="headerlink" title="使用静态库"></a>使用静态库</h3><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 方式 1</span></span><br><span class="line">gcc main.c lib/libMyCalc.a -I include -o sum</span><br><span class="line">./sum</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 方式 2</span></span><br><span class="line">gcc main.c -Iinclude -L lib -l MyCalc -o myapp</span><br><span class="line">./myapp</span><br></pre></td></tr></table></figure><h2 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h2><p><img src="http://image.shuiyujie.com/dll.png" alt="动态库"></p><h3 id="编译动态库"><a href="#编译动态库" class="headerlink" title="编译动态库"></a>编译动态库</h3><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> .c 编译为 .o</span></span><br><span class="line">➜  src git:(master) ✗ ls</span><br><span class="line">add.c mul.c sub.c</span><br><span class="line">➜  src git:(master) ✗ gcc -fPIC -c *.c -I ../include</span><br><span class="line">➜  src git:(master) ✗ ls</span><br><span class="line">add.c add.o mul.c mul.o sub.c sub.o</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> .o 打包为 .so</span></span><br><span class="line">➜  src git:(master) ✗ gcc -shared -o libMyCalc.so *.o -Iinclude</span><br><span class="line">➜  src git:(master) ✗ ls</span><br><span class="line">add.c        libMyCalc.so mul.o        sub.o</span><br><span class="line">add.o        mul.c        sub.c</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> .so 移动到 lib</span></span><br><span class="line">➜  src git:(master) ✗ mv libMyCalc.so ../lib</span><br></pre></td></tr></table></figure><h3 id="使用动态库"><a href="#使用动态库" class="headerlink" title="使用动态库"></a>使用动态库</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 方式 1</span><br><span class="line">gcc main.c lib/libMyCalc.so -o app -Iinclude</span><br><span class="line">./app</span><br><span class="line"></span><br><span class="line"># 方式 2</span><br><span class="line">gcc main.c -Iinclude -L lib -l MyCalc -o myapp</span><br><span class="line">./myapp</span><br></pre></td></tr></table></figure><p>如果在使用动态库的过程中遇到了问题，请看下一小结。</p><h3 id="动态库链接失败问题"><a href="#动态库链接失败问题" class="headerlink" title="动态库链接失败问题"></a>动态库链接失败问题</h3><p>动态库是由动态连机器加载的，通过<code>ldd app</code>我们可以查看可执行文件执行的时候依赖的所有动态库。交由动态连接器管理的动态库都能被正确加载，比如说<code>/lib</code>目录下的库文件。我们自定义的动态库没有被加载就是因为没有告知动态连接器我们的动态库在哪里。</p><h3 id="方法一-临时配置"><a href="#方法一-临时配置" class="headerlink" title="方法一 临时配置"></a>方法一 临时配置</h3><p>要想汤动态连机器知道我们的动态库在哪，一种方式是直接把自定义的动态库丢到<code>/lib</code>目录下，这样自然就能加载到了，当然我想没有人会想这么做的。另一种方式就是在配置文件中配置动态库的位置，比如像下面的这样：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LD_LIBRARY_PATH=我们的动态库位置</span><br></pre></td></tr></table></figure><p><code>LD_LIBRARY_PATH</code>我们可以将动态库的位置保存在这里，此时就能顺利运行程序，但是重启终端将会失效，临时测试的时候使用很方便。</p><h3 id="方法二-永久配置"><a href="#方法二-永久配置" class="headerlink" title="方法二 永久配置"></a>方法二 永久配置</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. vim /etc/ld.so.conf</span><br><span class="line">2. 将动态库的路径配置在里面</span><br><span class="line">3. sudo ldconfig -v</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列的连环炮</title>
      <link href="/post/b63a0941.html"/>
      <url>/post/b63a0941.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://image.shuiyujie.com/2019-05-09-23-02-26.png" alt="消息队列思维导图"></p><h1 id="1-引子"><a href="#1-引子" class="headerlink" title="1. 引子"></a>1. 引子</h1><p>消息队列分布式系统中重要的组件，一种存放消息的容器，主要作用有解耦、异步、削锋，是大型分布式系统不可缺少的中间件。</p><p>常见的消息队列有 ActiveMQ，RabbitMQ，RocketMQ，Kafka。</p><p>简历中涉及到了消息队列，面试官先问了这样几个问题：</p><ol><li>你们系统里为什么要使用消息队列？</li><li>既然使用了消息队列，说说他还有什么使用场景？</li><li>消息队列的优缺点是什么？</li></ol><a id="more"></a><h1 id="2-为什么使用消息队列？"><a href="#2-为什么使用消息队列？" class="headerlink" title="2. 为什么使用消息队列？"></a>2. 为什么使用消息队列？</h1><p>我的回答：甲方提供 EOS 充值服务，我方进行调用。出于<strong>解耦</strong>的目的，引入了消息队列。</p><p>一个类似应试的回答方法，就是<strong>思考面试官问这个问题是出于什么目的，想获得的是什么样的答案？</strong></p><p>当问到为什么使用消息队列时，面试官期望的回答是公司的 xxx 业务遇到了挑战，不用 MQ 会有麻烦，使用 MQ 之后带来了好处。</p><p>通过一个问题就能看出是为了用而用，还是经过思考之后使用。</p><h1 id="3-消息队列的使用场景？"><a href="#3-消息队列的使用场景？" class="headerlink" title="3. 消息队列的使用场景？"></a>3. 消息队列的使用场景？</h1><p>问消息队列的使用场景，和问消息队列有什么优点，消息队列有什么作用是等价的。</p><p>消息队列的作用主要有三个<strong>解耦、异步、削峰</strong>。</p><h2 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h2><p><img src="https://image.shuiyujie.com/2019-05-09-23-03-06.png" alt="解耦"></p><p>B,C,D 系统需要使用 A 系统产生的关键数据。</p><ul><li>无消息队列时<ul><li>系统 A 为系统 B、C、D 等提供各自的接口，导致系统 A 与它们紧密耦合</li><li>添加系统 E 又需要接口，删除 B 系统原接口又没用了</li></ul></li><li>有消息队列时<ul><li>系统 A 作为生产者，将消息发送到消息队列</li><li>系统 B、C、D 作为消费者订阅消息</li><li>新增消费者只需订阅消息，对原系统和业务没有影响</li></ul></li></ul><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p><img src="https://image.shuiyujie.com/2019-05-09-23-03-45.png" alt="异步.png"></p><p>用户请求数据时，系统的响应时间是保证用户体验很重要的一部分。</p><ul><li>无消息队列时<ul><li>用户请求 A 系统，A 系统需要等待 BCD 执行完成之后响应</li><li>用户收到响应用时近 1 秒</li></ul></li><li>用消息队列时<ul><li>用户请求 A 系统，A 系统将请求推到消息队列中，B、C、D 异步执行</li><li>用户收到响应用时 200 毫秒</li></ul></li></ul><h2 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h2><p><img src="https://image.shuiyujie.com/2019-05-09-23-04-20.png" alt="削峰.png"></p><p>秒杀场景下，每秒有 5000 个请求，Mysql 每秒最大处理 2000 条 sql。</p><ul><li>无消息队列时<ul><li>用户请求数据直接写入数据库，高并发时数据库压力剧增，甚至奔溃</li><li>Mysql 宕机，整个系统都不能用了</li></ul></li><li>有消息队列时系统 B、C、D<ul><li>用户请求数据先存入 MQ 中</li><li>系统 A 每秒读取 2000 条数据进行处理</li><li>每秒多出 3000 条未处理数据按场景稍后处理</li></ul></li></ul><h1 id="4-消息队列有什么缺点？"><a href="#4-消息队列有什么缺点？" class="headerlink" title="4. 消息队列有什么缺点？"></a>4. 消息队列有什么缺点？</h1><p>优点前面已经说过了，还需要讨论一下缺点。</p><h2 id="为什么要问缺点是什么？"><a href="#为什么要问缺点是什么？" class="headerlink" title="为什么要问缺点是什么？"></a>为什么要问缺点是什么？</h2><p>凡事都有两面性，如果只是考虑到消息队列的优点，而没有考虑缺点，这就是一个潘多拉的魔盒。打开魔盒，接踵而来的会是一系列的意外。</p><p>推广到引入其他技术亦然，只有考虑到缺点之后才可以采取额外的技术方案或者架构来规避这些缺点。</p><h2 id="系统可用性降低"><a href="#系统可用性降低" class="headerlink" title="系统可用性降低"></a>系统可用性降低</h2><ul><li>系统引入的外部依赖越多，宕机的可能性就越大</li><li>系统引入消息队列，就要考虑消息队列的可靠性</li><li>比如原本只需要考虑 A,B,C,D 四个系统</li><li>引入消息队列之后就需要考虑 A,B,C,D 四个系统外加消息队列</li></ul><h2 id="系统复杂度提高"><a href="#系统复杂度提高" class="headerlink" title="系统复杂度提高"></a>系统复杂度提高</h2><ul><li>消息重复消费问题</li><li>消息丢失问题</li><li>消息传递顺序问题</li></ul><h2 id="一致性问题"><a href="#一致性问题" class="headerlink" title="一致性问题"></a>一致性问题</h2><ul><li>A 系统处理完返回成功，即认为请求成功</li><li>但是也存在 BC 系统写入成功，而 D 系统写入失败的情况</li><li>这样的情况就是数据不一致</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>面试官问到 MQ 的时候，希望考察我们在使用 MQ 的时候是否有过自己的思考。没有完美的技术，任何技术都具有两面性，要考虑它的使用场景，并且对可能遇到的风险做到心中有数，提前预防。</p><p><img src="https://image.shuiyujie.com/2019-05-09-23-02-26.png" alt="消息队列思维导图"></p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>引入消息队列之后：</p><ul><li>如何保证高可用？</li><li>如何避免消息的重复消费和消息丢失？</li><li>如何保证消息的顺序执行？</li></ul><p>下一篇文章一起讨论。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用Jupyter notebook</title>
      <link href="/post/80ec4f16.html"/>
      <url>/post/80ec4f16.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/2019-03-22-07-53-40.png" alt="Jupyter Notebook"></p><p>Notebook 已迅速成为处理数据的必备工具。其已知用途包括<a href="http://nbviewer.jupyter.org/github/jmsteinw/Notebooks/blob/master/IndeedJobs.ipynb" target="_blank" rel="noopener">数据清理和探索</a>、可视化、<a href="http://nbviewer.jupyter.org/github/masinoa/machine_learning/blob/master/04_Neural_Networks.ipynb" target="_blank" rel="noopener">机器学习</a>和<a href="http://nbviewer.jupyter.org/github/tdhopper/rta-pyspark-presentation/blob/master/slides.ipynb" target="_blank" rel="noopener">大数据分析</a>。GitHub 上面也会自动提供 notebook。借助此出色的功能，你可以轻松共享工作。<a href="http://nbviewer.jupyter.org/" target="_blank" rel="noopener">http://nbviewer.jupyter.org/</a> 也会提供 GitHub 代码库中的 notebook 或存储在其他地方的 notebook。</p><a id="more"></a><p>Notebook 运行的核心是 notebook 服务器。你通过浏览器连接到该服务器，而 notebook 呈现为 Web 应用。你在 Web 应用中编写的代码通过该服务器发送给内核。内核运行代码并将代码发送回该服务器，之后，任何输出都会返回到浏览器中。保存 notebook 时，它作为 JSON 文件（文件扩展名为 <code>.ipynb</code>）写入到该服务器中。</p><h1 id="使用-Jupyter-notebook"><a href="#使用-Jupyter-notebook" class="headerlink" title="使用 Jupyter notebook"></a>使用 Jupyter notebook</h1><h2 id="安装-notebook"><a href="#安装-notebook" class="headerlink" title="安装 notebook"></a>安装 notebook</h2><p>安装 Jupyter 的最简单方法是使用 Anaconda。该发行版自动附带了 Jupyter notebook。你能够在默认环境下使用 notebook。</p><p>要在 conda 环境中安装 Jupyter notebook，请使用 <code>conda install jupyter notebook</code>。</p><p>也可以通过 pip 使用 <code>pip install jupyter notebook</code> 来获得 Jupyter notebook。</p><p>查看<a href="https://shuiyujie.com/post/9d29b615.html">如何使用Anaconda</a>了解如何使用Anaconda。</p><h2 id="启动-notebook-服务器"><a href="#启动-notebook-服务器" class="headerlink" title="启动 notebook 服务器"></a>启动 notebook 服务器</h2><p>要启动 notebook 服务器，请在终端或控制台中输入 <code>jupyter notebook</code>。服务器会在你运行此命令的目录中启动。这意味着任何 notebook 文件都会保存在该目录中。你通常希望在 notebook 所在的目录中启动服务器。不过，你可以在文件系统中导航到 notebook 所在的位置。</p><p>运行此命令时（请自己试一下！），服务器主页会在浏览器中打开。默认情况下，notebook 服务器的运行地址是 <code>http://localhost:8888</code>。如果启动其他服务器，新服务器会尝试使用端口 <code>8888</code>，但由于此端口已被占用，因此新服务器会在端口 <code>8889</code> 上运行。之后，可以通过 <code>http://localhost:8889</code> 连接到新服务器。每台额外的 notebook 服务器都会像这样增大端口号。</p><p><img src="http://image.shuiyujie.com/2019-03-21-07-37-58.png" alt="Jupyter启动后的界面"></p><p>在右侧，你可以点击“New”（新建），创建新的 notebook、文本文件、文件夹或终端。“Notebooks”下的列表显示了你已安装的内核。由于我在 Python 3 环境中运行服务器，因此列出了 Python 3 内核。</p><p>顶部的选项卡是 <em>Files</em>（文件）、<em>Running</em>（运行）和 <em>Cluster</em>（聚类）。<em>Files</em>（文件）显示当前目录中的所有文件和文件夹。点击 <em>Running</em>（运行）选项卡会列出所有正在运行的 notebook。可以在该选项卡中管理这些 notebook。</p><h2 id="关闭-notebook"><a href="#关闭-notebook" class="headerlink" title="关闭 notebook"></a>关闭 notebook</h2><p>通过在服务器主页上选中 notebook 旁边的复选框，然后点击“Shutdown”（关闭），你可以关闭各个 notebook。但是，在这样做之前，请确保你保存了工作！否则，在你上次保存后所做的任何更改都会丢失。下次运行 notebook 时，你还需要重新运行代码。</p><p>通过在终端中按两次 Ctrl + C，可以关闭整个服务器。再次提醒，这会立即关闭所有运行中的 notebook，因此，请确保你保存了工作！</p><h2 id="远程运行-notebook"><a href="#远程运行-notebook" class="headerlink" title="远程运行 notebook"></a>远程运行 notebook</h2><p>如果你想在本地或者远程的机器上安装Jupyter Notebook，可以参考下面的两个文档。</p><p>安装：<a href="https://jupyter.org/install.html" target="_blank" rel="noopener">https://jupyter.org/install.html</a></p><p>运行：<a href="https://jupyter.readthedocs.io/en/latest/running.html#running" target="_blank" rel="noopener">https://jupyter.readthedocs.io/en/latest/running.html#running</a></p><p>后台运行使用 <code>jupyter notebook --allow-root &gt; jupyter.log 2&gt;&amp;1 &amp;</code>或者 <code>nohup jupyter notebook --allow-root &gt; jupyter.log 2&gt;&amp;1 &amp;</code>。</p><p>用<code>&amp;</code>让命令后台运行, 并把标准输出写入 jupyter.log 中。<code>nohup</code>表示no hang up, 就是不挂起, 于是这个命令执行后即使终端退出, 也不会停止运行.</p><h1 id="Notebook-界面"><a href="#Notebook-界面" class="headerlink" title="Notebook 界面"></a>Notebook 界面</h1><h2 id="Cell"><a href="#Cell" class="headerlink" title="Cell"></a>Cell</h2><p>新建的一个 notebook 之后，默认就会有一个 cell，也就是下图中蓝色的小框。</p><p><img src="http://image.shuiyujie.com/2019-03-21-07-49-10.png" alt="Notebook 界面"></p><p>Cell 可以称为<em>单元格</em>。单元格是你编写和运行代码的地方。</p><h2 id="工具栏"><a href="#工具栏" class="headerlink" title="工具栏"></a>工具栏</h2><p>从左侧开始，工具栏上的其他控件是：</p><ul><li>落伍的软盘符号，表示“保存”。请记得保存 notebook！</li><li><code>+</code> 按钮用于创建新的单元格</li><li>然后是用于剪切、复制和粘贴单元格的按钮。</li><li>运行、停止、重新启动内核</li><li>单元格类型：代码、Markdown、原始文本和标题</li><li>命令面板（见下文）</li><li>单元格工具栏，提供不同的单元格选项（例如将单元格用作幻灯片）</li></ul><h2 id="命令面板"><a href="#命令面板" class="headerlink" title="命令面板"></a>命令面板</h2><p>小键盘符号代表命令面板。点击它会弹出一个带有搜索栏的面板，供你搜索不同的命令。这能切实帮助你加快工作速度，因为你无需使用鼠标翻查各个菜单。你只需打开命令面板，然后键入要执行的操作。</p><p><img src="http://image.shuiyujie.com/2019-03-21-07-50-18.png" alt="命令面板"></p><h2 id="生成目录"><a href="#生成目录" class="headerlink" title="生成目录"></a>生成目录</h2><blockquote><p>conda install -c conda-forge jupyter_contrib_nbextensions</p></blockquote><p>在 Nbexyensions 选项卡中开启 Table of Contents(2) 选项，即可在侧边栏生成目录。</p><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>Notebook 提供了许多快捷键，我们可以使用<code>shift + command + P</code>呼出命令行面板，在输入<code>keyboard</code>就可以查看快捷键列表。</p><p><img src="http://image.shuiyujie.com/2019-03-21-08-07-42.png" alt="快捷键列表"></p><p>键入<code>Esc</code>进入命令模式，即可使用这些快捷键。</p><h1 id="Magic-关键字"><a href="#Magic-关键字" class="headerlink" title="Magic 关键字"></a>Magic 关键字</h1><p>Magic 关键字是可以在单元格中运行的特殊命令，能让你控制 notebook 本身或执行系统调用（例如更改目录）。例如，可以使用 <code>%matplotlib</code> 将 matplotlib 设置为以交互方式在 notebook 中工作。</p><p>Magic 命令的前面带有一个或两个百分号（<code>%</code> 或 <code>%%</code>），分别对应行 Magic 命令和单元格 Magic 命令。行 Magic 命令仅应用于编写 Magic 命令时所在的行，而单元格 Magic 命令应用于整个单元格。</p><p><strong>注意：</strong>这些 Magic 关键字是特定于普通 Python 内核的关键字。如果使用其他内核，这些关键字很有可能无效。</p><h2 id="代码计时"><a href="#代码计时" class="headerlink" title="代码计时"></a>代码计时</h2><p>有时候，你可能要花些精力优化代码，让代码运行得更快。在此优化过程中，必须对代码的运行速度进行计时。可以使用 Magic 命令 <code>timeit</code> 测算单元格中代买运行时间和函数的运行时间。</p><p>测试整个单元格代码运行时间的时候可以添加<code>%%timeit</code></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%timeit</span><br><span class="line">sum = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):</span><br><span class="line">    sum += i就会输出</span><br></pre></td></tr></table></figure><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.97 µs ± 150 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)</span><br></pre></td></tr></table></figure><p>测试整个某个函数代码运行时间的时候可以添加<code>%timeit</code></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sum</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    sum = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):</span><br><span class="line">        sum += i</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%timeit sum()</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.06 µs ± 180 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)</span><br></pre></td></tr></table></figure><h2 id="在-notebook-中进行调试"><a href="#在-notebook-中进行调试" class="headerlink" title="在 notebook 中进行调试"></a>在 notebook 中进行调试</h2><p>对于 Python 内核，可以使用 Magic 命令 <code>%pdb</code> 开启交互式调试器。出错时，你能检查当前命名空间中的变量。</p><p>要详细了解 <code>pdb</code>，请阅读<a href="https://docs.python.org/3/library/pdb.html" target="_blank" rel="noopener">此文档</a>。要退出调试器，在提示符中输入 <code>q</code> 即可。</p><h2 id="补充读物"><a href="#补充读物" class="headerlink" title="补充读物"></a>补充读物</h2><p>Magic 命令还有很多，我只是介绍了你将会用得最多的一些命令。要了解更多信息，请查看<a href="http://ipython.readthedocs.io/en/stable/interactive/magics.html" target="_blank" rel="noopener">此列表</a>，它列出了所有可用的 Magic 命令。</p><h1 id="转换-notebook"><a href="#转换-notebook" class="headerlink" title="转换 notebook"></a>转换 notebook</h1><p>Notebook 只是扩展名为 <code>.ipynb</code> 的大型 <a href="http://www.json.org/" target="_blank" rel="noopener">JSON</a> 文件。</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="hljs-attr">"cells"</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="hljs-attr">"cell_type"</span>: <span class="hljs-string">"code"</span>,</span><br><span class="line">   <span class="hljs-attr">"execution_count"</span>: <span class="hljs-number">8</span>,</span><br><span class="line">   <span class="hljs-attr">"metadata"</span>: &#123;&#125;,</span><br><span class="line">   <span class="hljs-attr">"outputs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="hljs-attr">"name"</span>: <span class="hljs-string">"stdout"</span>,</span><br><span class="line">     <span class="hljs-attr">"output_type"</span>: <span class="hljs-string">"stream"</span>,</span><br><span class="line">     <span class="hljs-attr">"text"</span>: [</span><br><span class="line">      <span class="hljs-string">"3.97 µs ± 150 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n"</span></span><br><span class="line">     ]</span><br><span class="line">    &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="hljs-attr">"source"</span>: [</span><br><span class="line">    <span class="hljs-string">"%%timeit\n"</span>,</span><br><span class="line">    <span class="hljs-string">"sum = 0\n"</span>,</span><br><span class="line">    <span class="hljs-string">"for i in range(100):\n"</span>,</span><br><span class="line">    <span class="hljs-string">"    sum += i"</span></span><br><span class="line">   ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="hljs-attr">"cell_type"</span>: <span class="hljs-string">"code"</span>,</span><br><span class="line">   <span class="hljs-attr">"execution_count"</span>: <span class="hljs-number">9</span>,</span><br><span class="line">   <span class="hljs-attr">"metadata"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"collapsed"</span>: <span class="hljs-literal">true</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="hljs-attr">"outputs"</span>: [],</span><br><span class="line">   <span class="hljs-attr">"source"</span>: [</span><br><span class="line">    <span class="hljs-string">"def sum():\n"</span>,</span><br><span class="line">    <span class="hljs-string">"    sum = 0\n"</span>,</span><br><span class="line">    <span class="hljs-string">"    for i in range(100):\n"</span>,</span><br><span class="line">    <span class="hljs-string">"        sum += i"</span></span><br><span class="line">   ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="hljs-attr">"cell_type"</span>: <span class="hljs-string">"code"</span>,</span><br><span class="line">   <span class="hljs-attr">"execution_count"</span>: <span class="hljs-number">10</span>,</span><br><span class="line">   <span class="hljs-attr">"metadata"</span>: &#123;&#125;,</span><br><span class="line">   <span class="hljs-attr">"outputs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="hljs-attr">"name"</span>: <span class="hljs-string">"stdout"</span>,</span><br><span class="line">     <span class="hljs-attr">"output_type"</span>: <span class="hljs-string">"stream"</span>,</span><br><span class="line">     <span class="hljs-attr">"text"</span>: [</span><br><span class="line">      <span class="hljs-string">"4.06 µs ± 180 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n"</span></span><br><span class="line">     ]</span><br><span class="line">    &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="hljs-attr">"source"</span>: [</span><br><span class="line">    <span class="hljs-string">"%timeit sum()"</span></span><br><span class="line">   ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="hljs-attr">"cell_type"</span>: <span class="hljs-string">"code"</span>,</span><br><span class="line">   <span class="hljs-attr">"execution_count"</span>: <span class="hljs-literal">null</span>,</span><br><span class="line">   <span class="hljs-attr">"metadata"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"collapsed"</span>: <span class="hljs-literal">true</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="hljs-attr">"outputs"</span>: [],</span><br><span class="line">   <span class="hljs-attr">"source"</span>: []</span><br><span class="line">  &#125;</span><br><span class="line"> ],</span><br><span class="line"> <span class="hljs-attr">"metadata"</span>: &#123;</span><br><span class="line">  <span class="hljs-attr">"kernelspec"</span>: &#123;</span><br><span class="line">   <span class="hljs-attr">"display_name"</span>: <span class="hljs-string">"Python 3"</span>,</span><br><span class="line">   <span class="hljs-attr">"language"</span>: <span class="hljs-string">"python"</span>,</span><br><span class="line">   <span class="hljs-attr">"name"</span>: <span class="hljs-string">"python3"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="hljs-attr">"language_info"</span>: &#123;</span><br><span class="line">   <span class="hljs-attr">"codemirror_mode"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"ipython"</span>,</span><br><span class="line">    <span class="hljs-attr">"version"</span>: <span class="hljs-number">3</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="hljs-attr">"file_extension"</span>: <span class="hljs-string">".py"</span>,</span><br><span class="line">   <span class="hljs-attr">"mimetype"</span>: <span class="hljs-string">"text/x-python"</span>,</span><br><span class="line">   <span class="hljs-attr">"name"</span>: <span class="hljs-string">"python"</span>,</span><br><span class="line">   <span class="hljs-attr">"nbconvert_exporter"</span>: <span class="hljs-string">"python"</span>,</span><br><span class="line">   <span class="hljs-attr">"pygments_lexer"</span>: <span class="hljs-string">"ipython3"</span>,</span><br><span class="line">   <span class="hljs-attr">"version"</span>: <span class="hljs-string">"3.6.5"</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="hljs-attr">"nbformat"</span>: <span class="hljs-number">4</span>,</span><br><span class="line"> <span class="hljs-attr">"nbformat_minor"</span>: <span class="hljs-number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 notebook 是 JSON 文件，因此，可以轻松将其转换为其他格式。Jupyter 附带了一个名为 <code>nbconvert</code> 的实用程序，可将 notebook 转换为 HTML、Markdown、幻灯片等格式。</p><p>例如，要将 notebook 转换为 HTML 文件，请在终端中使用</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter nbconvert --to html notebook.ipynb</span><br></pre></td></tr></table></figure><p>要将 notebook 与不使用 notebook 的其他人共享，转换为 HTML 很有用。而要在博客和其他接受 Markdown 格式化的文本编辑器中加入 notebook，Markdown 很合适。</p><p>像平常一样，要详细了解 <code>nbconvert</code>，请阅读相关<a href="https://nbconvert.readthedocs.io/en/latest/usage.html" target="_blank" rel="noopener">文档</a>。</p><h1 id="更好地使用"><a href="#更好地使用" class="headerlink" title="更好地使用"></a>更好地使用</h1><p>现在的技术趋势，则是彻底云端化了，例如Jupyter官方的Binder平台（介绍文 档：<a href="https://mybinder.readthedocs.io/en/latest/index.html）和Google提供的" target="_blank" rel="noopener">https://mybinder.readthedocs.io/en/latest/index.html）和Google提供的</a> Google Colab环境（介 绍：<a href="https://colab.research.google.com/notebooks/welcome.ipynb）。它们让Jupyter" target="_blank" rel="noopener">https://colab.research.google.com/notebooks/welcome.ipynb）。它们让Jupyter</a> Notebook变得和石墨文档、Google Doc在线文档一样，在浏览器点开链接就能运行。</p><p>所以，现在当你用Binder打开一份GitHub上的Jupyter Notebook时，你不需要安装任何软件，直接在浏览器 打开一份代码，就能在云端运行。</p><p>比如这样一个<a href="https://github.com/binder-examples/python2_with_3/blob/master/index3.ipynb" target="_blank" rel="noopener">GitHub文件</a>。在<a href="https://mybinder.org/" target="_blank" rel="noopener">Binder</a>中，你只要输入其对应的GitHub Repository的名字或者URL，就能在 云端打开整个Repository，选择你需要的<a href="https://mybinder.org/v2/gh/binder-examples/python2_with_3/master?filepath=index3.ipynb" target="_blank" rel="noopener">notebook</a>。</p><p>另外，还有下面这些 Jupyter Notebook，可以作为实践的第一站。</p><p>第一个是Jupyter官方：<a href="https://mybinder.org/v2/gh/binder-examples/matplotlib-versions/mpl-v2.0/?filepath=matplotlib_versions_demo.ipynb" target="_blank" rel="noopener">https://mybinder.org/v2/gh/binder-examples/matplotlib-versions/mpl-v2.0/?filepath=matplotlib_versions_demo.ipynb</a></p><p>第二个是Google Research提供的Colab环境，尤其适合机器学习的实践应 用：<a href="https://colab.research.google.com/notebooks/basic_features_overview.ipynb" target="_blank" rel="noopener">https://colab.research.google.com/notebooks/basic_features_overview.ipynb</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用Anaconda</title>
      <link href="/post/9d29b615.html"/>
      <url>/post/9d29b615.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/2019-03-20-20-13-26.png" alt="Anaconda"></p><p>Anaconda 能让你轻松安装在数据科学工作中经常使用的包。你还将使用它创建虚拟环境，以便更轻松地处理多个项目。Anaconda 简化了我的工作流程，并且解决了我在处理包和多个 Python 版本时遇到的大量问题。</p><a id="more"></a><p>Anaconda 实际上是一个软件发行版，它附带了 <code>conda</code>、Python 和 150 多个科学包及其依赖项。应用程序 <code>conda</code> 是包和环境管理器。Anaconda 的下载文件比较大（约 500 MB），因为它附带了 Python 中最常用的数据科学包。</p><p><code>conda</code> 是一种只能通过命令行来使用的程序。conda 与 pip 相似，不同之处是可用的包以数据科学包为主，而 pip 适合一般用途。但是，conda 并非像 pip 那样专门适用于 Python，它也可以安装非 Python 的包。它是适用于<em>任何</em>软件堆栈的包管理器。也就是说，并非所有的 Python 库都能通过 Anaconda 发行版和 conda 获得。在使用 conda 的同时，你仍可以并且仍将使用 pip 来安装包。</p><p>Conda 安装了预编译的包。例如，Anaconda 发行版附带了使用 <a href="https://docs.continuum.io/mkl-optimizations/" target="_blank" rel="noopener">MKL 库</a>编译的 Numpy、Scipy 和 Scikit-learn，从而加快了各种数学运算的速度。这些包由发行版的贡献者维护，这意味着它们通常滞后于新版本。但是，由于有人需要为许多系统构建这些包，因此，它们往往更为稳定，而且更便于你使用。</p><p>除了管理包之外，conda 还是<strong>虚拟环境管理器</strong>。它类似于另外两个很流行的环境管理器，即 <a href="https://virtualenv.pypa.io/en/stable/" target="_blank" rel="noopener">virtualenv</a> 和 <a href="https://github.com/yyuu/pyenv" target="_blank" rel="noopener">pyenv</a>。</p><p>环境能让你分隔你要用于不同项目的包。你常常要使用依赖于某个库的不同版本的代码。例如，你的代码可能使用了 Numpy 中的新功能，或者使用了已删除的旧功能。实际上，不可能同时安装两个 Numpy 版本。你要做的应该是，为每个 Numpy 版本创建一个环境，然后在适用于项目的环境中工作。</p><h1 id="安装-Anaconda"><a href="#安装-Anaconda" class="headerlink" title="安装 Anaconda"></a>安装 Anaconda</h1><p>Anaconda 可用于 Windows、Mac OS X 和 Linux。可以在 <a href="https://docs.anaconda.com/anaconda/install/" target="_blank" rel="noopener">https://docs.anaconda.com/anaconda/install/</a> 上找到安装程序和安装说明。</p><p>此外，和我一样使用 Ubuntu 的朋友参考这两篇优秀的文章：<a href="https://www.digitalocean.com/community/tutorials/how-to-install-the-anaconda-python-distribution-on-ubuntu-16-04" target="_blank" rel="noopener">How To Install the Anaconda Python Distribution on Ubuntu 16.04</a> 和 <a href="https://linuxize.com/post/how-to-install-anaconda-on-ubuntu-18-04/" target="_blank" rel="noopener">How to Install Anaconda on Ubuntu 18.04</a>。</p><p>完成安装后，会自动进入默认的 conda 环境，而且所有包均已安装完毕，如下面所示。可以在终端或命令提示符中键入 <code>conda list</code>，以查看你安装的内容。</p><p><img src="http://image.shuiyujie.com/2019-03-20-19-57-17.png" alt="conda list"></p><p>初次安装下的软件包版本一般都比较老旧，因此提前更新可以避免未来不必要的问题，初次安装可以键入以下命令更新所有的软件包：</p><blockquote><p>conda upgrade –all</p></blockquote><p>Anaconda 可以使用命令行的方式使用，也可以使用 GUI，下面将介绍用命令行的方式使用。</p><h1 id="conda-切换为国内源"><a href="#conda-切换为国内源" class="headerlink" title="conda 切换为国内源"></a>conda 切换为国内源</h1><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class="line">  - https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: true</span><br></pre></td></tr></table></figure><p><a href="https://mirrors.tuna.tsinghua.edu.cn/news/close-anaconda-service/" target="_blank" rel="noopener">关于停止Anaconda镜像服务的通知</a>。</p><h1 id="管理包"><a href="#管理包" class="headerlink" title="管理包"></a>管理包</h1><p>安装了 Anaconda 之后，管理包是相当简单的。要安装包，请在终端中键入 <code>conda install package_name</code>。例如，要安装 numpy，请键入 <code>conda install numpy</code>。</p><p>你还可以同时安装多个包。类似 <code>conda install numpy scipy pandas</code> 的命令会同时安装所有这些包。还可以通过添加版本号（例如 <code>conda install numpy=1.10</code>）来指定所需的包版本。</p><p>Conda 还会自动为你安装依赖项。例如，<code>scipy</code> 依赖于 <code>numpy</code>，因为它使用并需要 <code>numpy</code>。如果你只安装 <code>scipy</code> (<code>conda install scipy</code>)，则 conda 还会安装 <code>numpy</code>（如果尚未安装的话）。</p><p>大多数命令都是很直观的。要卸载包，请使用 <code>conda remove package_name</code>。要更新包，请使用 <code>conda update package_name</code>。如果想更新环境中的所有包（这样做常常很有用），请使用 <code>conda update --all</code>。最后，要列出已安装的包，请使用前面提过的 <code>conda list</code>。</p><p>如果不知道要找的包的确切名称，可以尝试使用 <code>conda search search_term</code> 进行搜索。例如，我知道我想安装 <a href="https://www.crummy.com/software/BeautifulSoup/" target="_blank" rel="noopener">Beautiful Soup</a>，但我不清楚确切的包名称。因此，我尝试执行 <code>conda search beautifulsoup</code>。</p><p>它返回可用的 Beautiful Soup 包的列表，并列出了相应的包名称 <code>beautifulsoup4</code>。</p><h1 id="管理环境"><a href="#管理环境" class="headerlink" title="管理环境"></a>管理环境</h1><h2 id="列出环境"><a href="#列出环境" class="headerlink" title="列出环境"></a>列出环境</h2><p>可以使用 <code>conda env list</code> 列出你创建的所有环境。你会看到环境的列表，而且你当前所在环境的旁边会有一个星号。默认的环境名为 <code>root</code>。</p><h2 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h2><p>如前所述，conda 是虚拟环境管理器，可以使用 conda 创建环境以隔离项目。</p><p>要创建环境，请在终端中使用 <code>conda create -n env_name list of packages</code>。在这里，<code>-n env_name</code> 设置环境的名称（<code>-n</code> 是指名称），而 <code>list of packages</code> 是要安装在环境中的包的列表。例如，要创建名为 <code>my_env</code> 的环境并在其中安装 numpy，请键入 <code>conda create -n my_env numpy</code>。</p><p>创建环境时，可以指定要安装在环境中的 Python 版本。这在你同时使用 Python 2.x 和 Python 3.x 中的代码时很有用。要创建具有特定 Python 版本的环境，请键入类似于 <code>conda create -n py3 python=3</code> 或 <code>conda create -n py2 python=2</code> 的命令。实际上，我在我的个人计算机上创建了这两个环境。我将它们用作与任何特定项目均无关的通用环境，以处理普通的工作（可轻松使用每个 Python 版本）。这些命令将分别安装 Python 3 和 2 的最新版本。要安装特定版本（例如 Python 3.3），请使用 <code>conda create -n py python=3.3</code>。</p><h2 id="进入环境"><a href="#进入环境" class="headerlink" title="进入环境"></a>进入环境</h2><p>创建了环境后，在 OSX/Linux 上使用 <code>source activate my_env</code> 进入环境。在 Windows 上，请使用 <code>activate my_env</code>。</p><p>进入环境后，你会在终端提示符中看到环境名称，它类似于 <code>(my_env) ~ $</code>。环境中只安装了几个默认的包，以及你在创建它时安装的包。可以使用 <code>conda list</code> 检查这一点。在环境中安装包的命令与前面一样：<code>conda install package_name</code>。不过，这次你安装的特定包仅在你进入环境后才可用。要离开环境，请键入 <code>source deactivate</code>（在 OSX/Linux 上）。在 Windows 上，请使用 <code>deactivate</code>。</p><h2 id="保存和加载环境"><a href="#保存和加载环境" class="headerlink" title="保存和加载环境"></a>保存和加载环境</h2><p>共享环境这项功能确实很有用，它能让其他人安装你的代码中使用的所有包，并确保这些包的版本正确。可以使用 <code>conda env export &gt; environment.yaml</code> 将包保存为 <a href="http://www.yaml.org/" target="_blank" rel="noopener">YAML</a>。第一部分 <code>conda env export</code> 输出环境中的所有包的名称（包括 Python 版本）。</p><p>上图可以看到列出了环境的名称和所有依赖项及其版本。导出命令的第二部分 <code>&gt; environment.yaml</code> 将导出的文本写入到 YAML 文件 <code>environment.yaml</code> 中。现在可以共享此文件，而且其他人能够创建和你用于项目相同的环境。</p><p>要通过环境文件创建环境，请使用 <code>conda env create -f environment.yaml</code>。这会创建一个新环境，而且它具有在 <code>environment.yaml</code> 中列出的同样的库。</p><h2 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h2><p>如果你不再使用某些环境，可以使用 <code>conda env remove -n env_name</code> 删除指定的环境（在这里名为 <code>env_name</code>）。</p><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h2><p>对我帮助很大的一点是，我的 Python 2 和 Python 3 具有独立的环境。我使用了 <code>conda create -n py2 python=2</code> 和 <code>conda create -n py3 python=3</code> 创建两个独立的环境，即 <code>py2</code> 和 <code>py3</code>。现在，我的每个 Python 版本都有一个通用环境。在所有这些环境中，我都安装了大多数标准的数据科学包（numpy、scipy、pandas 等）。</p><p>我还发现，为我从事的每个项目创建环境很有用。这对于与数据不相关的项目（例如使用 Flask 开发的 Web 应用）也很有用</p><h2 id="共享环境"><a href="#共享环境" class="headerlink" title="共享环境"></a>共享环境</h2><p>在 GitHub 上共享代码时，最好同样创建环境文件并将其包括在代码库中。这能让其他人更轻松地安装你的代码的所有依赖项。对于不使用 conda 的人，我通常还会使用 <code>pip freeze</code>（<a href="https://pip.pypa.io/en/stable/reference/pip_freeze/" target="_blank" rel="noopener">在此处了解详情</a>）将一个 pip <code>requirements.txt</code> 文件包括在内。</p><h2 id="了解更多信息"><a href="#了解更多信息" class="headerlink" title="了解更多信息"></a>了解更多信息</h2><p>要详细了解 conda 和它如何融入到 Python 生态系统中，请查看这篇由 Jake Vanderplas 撰写的文章：<a href="https://jakevdp.github.io/blog/2016/08/25/conda-myths-and-misconceptions/" target="_blank" rel="noopener">Conda myths and misconceptions</a>（有关 conda 的迷思和误解）。此外，有空也可以参考这篇 <a href="http://conda.pydata.org/docs/using/index.html" target="_blank" rel="noopener">conda 文档</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器发展历史</title>
      <link href="/post/9da65e04.html"/>
      <url>/post/9da65e04.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/docker_vs_k8s.png" alt="docker_vs_k8s"></p><ul><li><p>容器技术的兴起源于 PaaS 技术的普及；</p></li><li><p>Docker 公司发布的 Docker 项目具有里程碑式的意义；</p></li><li><p>Docker 项目通过“容器镜像”，解决了应用打包这个根本性难题。</p></li></ul><blockquote><p>容器本身没有价值，有价值的是“容器编排”。</p></blockquote><a id="more"></a><h1 id="Docker-解决-Paas-应用打包困难的问题"><a href="#Docker-解决-Paas-应用打包困难的问题" class="headerlink" title="Docker 解决 Paas 应用打包困难的问题"></a>Docker 解决 Paas 应用打包困难的问题</h1><p>2013~2014 年，以 Cloud  Foundry 为代表的 PaaS 项目，逐渐完成了教育用户和开拓市场的艰巨任务，也正是在这个将概念逐渐落地的过程中，应用<strong>“打包”困难</strong>这个问题，成了整个后端技术圈子的一块心病。</p><blockquote><p>出现这个问题的根本原因是，一旦用上了 PaaS，用户就必须为每种语言、每种框架，甚至每个版本的应用维护一个打好的包。这个打包过程，没有任何章法可循，更麻烦的是，明明在本地运行得好好的应用，却需要做很多修改和配置工作才能在 PaaS 里运行起来。而这些修改和配置，并没有什么经验可以借鉴，基本上得靠不断试错，直到你摸清楚了本地应用和远端 PaaS 匹配的“脾气”才能够搞定。</p></blockquote><p>Docker 项目的出现，则为这个根本性的问题提供了一个近乎完美的解决方案。这正是 Docker 项目刚刚开源不久，就能够带领一家原本默默无闻的 PaaS 创业公司脱颖而出，然后迅速占领了所有云计算领域头条的技术原因。</p><blockquote><p>Docker 项目给 PaaS 世界带来的“降维打击”，其实是提供了一种非常便利的打包机制。这种机制直接打包了应用运行所需要的整个操作系统，从而保证了本地环境和云端环境的高度一致，避免了用户通过“试错”来匹配两种不同运行环境之间差异的痛苦过程。</p></blockquote><h1 id="Docker-与开发者紧密结合并迅速崛起"><a href="#Docker-与开发者紧密结合并迅速崛起" class="headerlink" title="Docker 与开发者紧密结合并迅速崛起"></a>Docker 与开发者紧密结合并迅速崛起</h1><ol><li>Docker 镜像通过技术手段解决了 PaaS 的根本性问题；</li><li>Docker 容器同开发者之间有着与生俱来的密切关系；</li><li>PaaS 概念已经深入人心的完美契机。</li></ol><blockquote><p>相比于其他正在企业级市场里厮杀得头破血流的经典 PaaS 项目们，Docker 项目的推广策略从一开始就呈现出一副“憨态可掬”的亲人姿态，把每一位后端技术人员（而不是他们的老板）作为主要的传播对象。</p><p>简洁的 UI，有趣的 demo，“1 分钟部署一个 WordPress 网站”“3 分钟部署一个 Nginx 集群”，这种同开发者之间与生俱来的亲近关系，使 Docker 项目迅速成为了全世界 Meetup 上最受欢迎的一颗新星。</p></blockquote><h1 id="Docker-一家独大企图进一步商业化"><a href="#Docker-一家独大企图进一步商业化" class="headerlink" title="Docker 一家独大企图进一步商业化"></a>Docker 一家独大企图进一步商业化</h1><p>实际上，Docker 项目一日千里的发展势头，一直伴随着公司管理层和股东们的阵阵担忧。他们心里明白，虽然 Docker 项目备受追捧，但用户们最终要部署的，还是他们的网站、服务、数据库，甚至是云计算业务。</p><p>Docker 项目希望提供更多平台层能力，发布了 Docker Swarm、Fig（后来的 Compose）项目，向 Paas 进化。</p><p>Docker 也和 CoreOS 公司、RedHat 等产生利益冲突，同时拒绝了微软的天价收购，为后来 Kubernetes 项目的诞生埋下了伏笔。</p><h1 id="Kubernetes-推出，容器技术尘埃落定"><a href="#Kubernetes-推出，容器技术尘埃落定" class="headerlink" title="Kubernetes 推出，容器技术尘埃落定"></a>Kubernetes 推出，容器技术尘埃落定</h1><p>Docker 公司在 Docker 开源项目的发展上，始终保持着绝对的权威和发言权，并在多个场合用实际行动挑战到了其他玩家（比如，CoreOS、RedHat，甚至谷歌和微软）的切身利益。</p><p>于是，2015 年 6 月 22 日，由 Docker 公司牵头，CoreOS、Google、RedHat 等公司共同宣布，Docker 公司将 Libcontainer 捐出，并改名为 RunC 项目，交由一个完全中立的基金会管理，然后以 RunC 为依据，大家共同制定一套容器和镜像的标准和规范。</p><p>这套标准和规范，就是 OCI（ Open Container Initiative ）。<strong>OCI 的提出，意在将容器运行时和镜像的实现从 Docker 项目中完全剥离出来</strong>。这样做，一方面可以改善 Docker 公司在容器技术上一家独大的现状，另一方面也为其他玩家不依赖于 Docker 项目构建各自的平台层能力提供了可能。</p><p>所以这次，Google、RedHat 等开源基础设施领域玩家们，共同牵头发起了一个名为 CNCF（Cloud Native Computing Foundation）的基金会。这个基金会的目的其实很容易理解：它希望，以 Kubernetes 项目为基础，建立一个由开源基础设施领域厂商主导的、按照独立基金会方式运营的平台级社区，来对抗以 Docker 公司为核心的容器商业生态。</p><blockquote><p>而为了打造出这样一个围绕 Kubernetes 项目的“护城河”，CNCF 社区就需要至少确保两件事情：</p><ol><li>Kubernetes 项目必须能够在容器编排领域取得足够大的竞争优势；</li><li>CNCF 社区必须以 Kubernetes 项目为核心，覆盖足够多的场景。</li></ol></blockquote><p>2017 年 10 月，Docker 公司出人意料地宣布，将在自己的主打产品 Docker 企业版中内置 Kubernetes 项目，这标志着持续了近两年之久的“编排之争”至此落下帷幕。</p><p>2018 年 1 月 30 日，RedHat 宣布斥资 2.5 亿美元收购 CoreOS。</p><p>2018 年 3 月 28 日，这一切纷争的始作俑者，Docker 公司的 CTO Solomon Hykes 宣布辞职，曾经纷纷扰扰的容器技术圈子，到此尘埃落定。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://time.geekbang.org/column/article/14254" target="_blank" rel="noopener">01 | 预习篇 · 小鲸鱼大事记（一）：初出茅庐</a></p><p><a href="https://time.geekbang.org/column/article/14256" target="_blank" rel="noopener">02 | 预习篇 · 小鲸鱼大事记（二）：崭露头角</a></p><p><a href="https://time.geekbang.org/column/article/14405" target="_blank" rel="noopener">03 | 预习篇 · 小鲸鱼大事记（三）：群雄并起</a></p><p><a href="https://time.geekbang.org/column/article/14406" target="_blank" rel="noopener">04 | 预习篇 · 小鲸鱼大事记（四）：尘埃落定</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker&amp;K8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16.04配置OpenCV环境</title>
      <link href="/post/5359e313.html"/>
      <url>/post/5359e313.html</url>
      
        <content type="html"><![CDATA[<p>本文介绍在 Ubuntu16.04 中配置 OpenCV 的环境 </p><p>Linux 环境: Ubuntu16.04 LST </p><p>软件版本:　opencv-3.4.0 、opencv_contrib-3.4.0 (安装包在文末下载) </p><p>参考文档：<a href="https://docs.opencv.org/3.4.0/d7/d9f/tutorial_linux_install.html" target="_blank" rel="noopener">Installation in Linux</a> </p><a id="more"></a><h1 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h1><p>执行以下命令</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[compiler] sudo apt-get install build-essential</span><br><span class="line"></span><br><span class="line">[required] sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev cmake-gui</span><br><span class="line"></span><br><span class="line">[optional] sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</span><br></pre></td></tr></table></figure><p>下载以下两个文件，注意版本</p><p><a href="https://github.com/opencv/opencv/releases" target="_blank" rel="noopener">opencv-3.4.0</a> 、<a href="https://github.com/opencv/opencv_contrib/releases" target="_blank" rel="noopener">opencv_contrib-3.4.0</a></p><p>解压文件，并新建一个build文件夹作为编译目录，如下 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">opencv/</span><br><span class="line">├── build</span><br><span class="line">├── opencv-3.4.0</span><br><span class="line">└── opencv_contrib-3.4.0</span><br></pre></td></tr></table></figure><h1 id="使用CMake-gui进行编译"><a href="#使用CMake-gui进行编译" class="headerlink" title="使用CMake-gui进行编译"></a>使用CMake-gui进行编译</h1><p>使用cmake-gui生成Makefile,并进行编译</p><h2 id="生成-Makefile"><a href="#生成-Makefile" class="headerlink" title="生成 Makefile"></a>生成 Makefile</h2><p><img src="http://image.shuiyujie.com/Snipaste_2019-03-19_19-26-50.png" alt="生成 Makefile"></p><ol><li>点击 Browse_Source… 引入 opencv-3.4.0 文件夹 </li><li>点击 Browse_Build… 引入 build 文件夹 </li><li>不想编译 protobuf 可以选择 <code>-D BUILD_PROTOBUF=OFF PROTOBUF_UPDATE_FILES=ON</code></li><li>dnn 也会依赖 protobuf 也可以选择不编译</li><li>cuda 相关的用不到也不可以不编译</li><li>点击 Configure </li><li>点击 Generate </li><li>弹出如下对话框，选择使用Makefile生成的系统平台 </li></ol><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注：</span><br><span class="line">1. 第一次会弹出`CMakeSetup`选择`default`那个就可以了</span><br><span class="line">2. 开始的时候没有上图红色部分</span><br></pre></td></tr></table></figure><p>之后我们勾选下面这几个选项</p><ol><li>编译成静态库，取消选择 BUILD_SHARED_LIBS </li><li>勾选　OPENCV_ENABLE_NOFREE </li><li>选择　OPENCV_EXTRA_MODULES_PATH 引入 opencv_contrib-3.4.0 下的 modules 文件夹 </li><li>点击 Configure </li><li>点击 Generate </li></ol><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>进入 build 文件夹路径</p><blockquote><p>make -j7 # 7 表示7个并发</p></blockquote><p>修改　opencv.pv 文件</p><blockquote><p>cd /build/unix_install</p><p>vim opencv.pc</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Package Information for pkg-config</span><br><span class="line">prefix=/usr/local</span><br><span class="line">exec_prefix=$&#123;prefix&#125;</span><br><span class="line">libdir=$&#123;exec_prefix&#125;/lib</span><br><span class="line">includedir_old=$&#123;prefix&#125;/include/opencv</span><br><span class="line">includedir_new=$&#123;prefix&#125;/include</span><br><span class="line"></span><br><span class="line">Name: OpenCV</span><br><span class="line">Description: Open Source Computer Vision Library</span><br><span class="line">Version: 3.4.0</span><br><span class="line">Libs: -L$&#123;exec_prefix&#125;/lib -lopencv_stitching -lopencv_superres -lopencv_videostab -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dpm -lopencv_face -lopencv_photo -lopencv_freetype -lopencv_fuzzy -lopencv_img_hash -lopencv_line_descriptor -lopencv_optflow -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_xfeatures2d -lopencv_shape -lopencv_video -lopencv_ml -lopencv_ximgproc -lopencv_calib3d -lopencv_features2d -lopencv_highgui -lopencv_videoio -lopencv_flann -lopencv_xobjdetect -lopencv_imgcodecs -lopencv_objdetect -lopencv_xphoto -lopencv_imgproc -lopencv_core</span><br><span class="line">Libs.private: -ldl -lm -lpthread -lrt</span><br><span class="line">Cflags: -I$&#123;includedir_old&#125; -I$&#123;includedir_new&#125;</span><br></pre></td></tr></table></figure><p>将文件中的<code>Libs.private:</code>删除</p><blockquote><p>sudo make install</p><p>sudo updatedb</p><p>sudo ldconfig</p></blockquote><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>写一段测试程序，可以使用命令行的方式或者 CMake 进行编译</p><h2 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"opencv2/highgui/highgui.hpp"</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"opencv2/imgproc/imgproc.hpp"</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"opencv2/core/core.hpp"</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"opencv2/video/video.hpp"</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 从命令行参数读取图片路径</span></span><br><span class="line">    <span class="hljs-keyword">char</span> *imageName = argv[<span class="hljs-number">1</span>];</span><br><span class="line"></span><br><span class="line">    Mat image;</span><br><span class="line">    image = imread(imageName, IMREAD_COLOR);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span> || !image.data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"No image data"</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Mat gray_image;</span><br><span class="line">    cvtColor(image, gray_image, COLOR_BGR2GRAY);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 保存转换之后的灰度图片</span></span><br><span class="line">    imwrite(<span class="hljs-string">"Gray_Image.jpg"</span>, gray_image);</span><br><span class="line"></span><br><span class="line">    namedWindow(imageName, WINDOW_AUTOSIZE);</span><br><span class="line">    namedWindow(<span class="hljs-string">"Gray image"</span>, WINDOW_AUTOSIZE);</span><br><span class="line"></span><br><span class="line">    imshow(imageName, image);</span><br><span class="line">    imshow(<span class="hljs-string">"Gray image"</span>, gray_image);</span><br><span class="line">    waitKey(<span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令行方式编译"><a href="#命令行方式编译" class="headerlink" title="命令行方式编译"></a>命令行方式编译</h2><blockquote><p>g++ ModifyImage.cpp <code>pkg-config --cflags --libs opencv</code> -o ModifyImage</p></blockquote><h2 id="CMake-方式编译"><a href="#CMake-方式编译" class="headerlink" title="CMake 方式编译"></a>CMake 方式编译</h2><p>新建一个<code>CMakeLists.txt</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 2.8)</span><br><span class="line">project( ModifyImage )</span><br><span class="line">find_package( OpenCV REQUIRED )</span><br><span class="line">include_directories( $&#123;OpenCV_INCLUDE_DIRS&#125; )</span><br><span class="line">add_executable( ModifyImage ModifyImage.cpp )</span><br><span class="line">target_link_libraries( ModifyImage $&#123;OpenCV_LIBS&#125; )</span><br></pre></td></tr></table></figure><p>输入以下命令</p><blockquote><p>cmake .</p><p>make</p></blockquote><p>通过以上两种方式都会生成一个可执行文件，我们可以执行它</p><blockquote><p>./ModifyImage</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu OpenSSH Server</title>
      <link href="/post/cbbc9ca0.html"/>
      <url>/post/cbbc9ca0.html</url>
      
        <content type="html"><![CDATA[<p>本文介绍如何使用<code>OpenSSH</code>实现计算机之间的远程控制和数据交换。你将了解到<code>OpenSSH</code>的一些配置以及如何在<code>Ubuntu</code>中修改这些配置。</p><p><code>Ubuntu16.04</code>是目前<code>Ubuntu</code>较为稳定的版本，本文使用该版本进行说明。</p><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>OpenSSH</code>基于<a href="https://zh.wikipedia.org/zh-hans/Secure_Shell" target="_blank" rel="noopener">SSH协议</a>，是用于实现计算机之间远程控制和数据交换的工作的工具。</p><p>传统的工具实现远程登录(telnet)和rcp等功能的方式不安全的，他们会用明文的方式交换用户密码。<code>OpenSSH</code>用后台进程和客户端工具来提高安全性，对远程控制和数据交换操作进行加密，比其他传统工具更加高效。</p><p><code>OpenSSH</code>使用<code>sshd</code>持续地监听来自各个客户端程序的连接。当客户端发出连接请求，<code>ssh</code>根据客户端的连接类型来判断是否建立连接。比如，如果远程计算机是一个<code>ssh</code>客户端程序，<code>OpenSSH</code>将会在认证之后建立一个控制会话。如果远程用户使用<code>scp</code>进行连接，<code>OpenSSH</code>在认证之后会与客户端建立连接，并在后台初始化一个安全的文件拷贝。</p><p><code>OpenSSH</code>可以使用密码、公钥和 <a href="https://www.varonis.com/blog/kerberos-" target="_blank" rel="noopener">Kerberos</a> 等多种方式进行认证。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><code>OpenSSH</code>的安装非常简单，分别安装<code>OpenSSH Sever</code>和<code>OpenSSH Client</code>。</p><blockquote><p>sudo apt install openssh-client<br>sudo apt install openssh-server</p></blockquote><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p><code>OpenSSH</code>的配置文件是<code>/etc/ssh/sshd_config</code>，查看详细配置可以使用</p><blockquote><p>man sshd_config</p></blockquote><p>在修改配置文件之前我们应当对配置文件进行备份</p><blockquote><p>sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.original<br>sudo chmod a-w /etc/ssh/sshd_config.original</p></blockquote><p>我们可以通过修改配置文件做这些事情：</p><ol><li>将<code>OpenSSH</code>监听的默认TCP端口从2222改为默认端口22，可以修改<code>Port 2222</code></li><li>允许运行使用公式登录，可以使用<code>PubkeyAuthentication yes</code></li></ol><p>修改完成之后重启服务使其生效</p><blockquote><p>sudo systemctl restart sshd.service</p></blockquote><h1 id="SSH-Keys"><a href="#SSH-Keys" class="headerlink" title="SSH Keys"></a>SSH Keys</h1><p>配置了<code>ssh key</code>允许主机之间直接通信而不用输入密码。</p><p>首选生成<code>ssh key</code>，使用一下命令并一路回车</p><blockquote><p>ssh-keygen -t rsa</p></blockquote><p>此时会在<code>~/.ssh</code>文件夹在生产一个密钥文件和一个公钥文件，我们将公钥拷贝给远程的主机</p><blockquote><p>ssh-copy-id username@remotehost</p></blockquote><p>之后用相同的方式将远程主机的公钥拷贝给本机，就可以实现双方免密登录。</p><p>最后我们还要注意，认证用户需要对用于认证的文件有读写的权限。</p><blockquote><p>chmod 600 .ssh/authorized_keys</p></blockquote><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://help.ubuntu.com/lts/serverguide/openssh-server.html.en" target="_blank" rel="noopener">OpenSSH Server</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更多搜索引擎</title>
      <link href="/post/9a276542.html"/>
      <url>/post/9a276542.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/2019-03-16-15-04-59.png" alt="search engine"></p><p>善用搜索引擎，程序员提升的一大步。</p><a id="more"></a><p><a href="www.google.com">谷歌</a></p><p>全球最大搜索引擎公司。</p><p><a href="www.bing.com">必应</a></p><p>微软旗下，比较出名了，国内可访问。</p><p><a href="caup.cn">Bird.so</a></p><p>技术问题的聚合，国内也可访问，是我谷歌替代方案。</p><p><a href="https://duckduckgo.com" target="_blank" rel="noopener">DuckDuckGo</a></p><p>注重隐私安全，不记录用户数据是卖点，注重隐私的人的上好选择。</p><p><a href="https://zh.wikipedia.org" target="_blank" rel="noopener">Wikipedia</a></p><p>维基百科就像是一本参考书，有很高的权威性。</p><p><a href="https://www.semanticscholar.org" target="_blank" rel="noopener">SemanticScholar</a></p><p>Semantic Scholar 是由微软联合创始人 Paul Allen 做的免费学术搜索引擎，其检索结果来自于期刊、学术会议资料或者是学术机构的文献。</p><p><a href="https://so.mezw.com/" target="_blank" rel="noopener">MEZW</a></p><p>MEZW 搜索服务可以汇集国内外网页的搜索结果，登录帐号，更可自定义的屏蔽掉不希望展示在搜索结果中的网站。</p>]]></content>
      
      
      <categories>
          
          <category> 善用佳软 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 系列文章</title>
      <link href="/post/ee9b8bc4.html"/>
      <url>/post/ee9b8bc4.html</url>
      
        <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> <a href="https://shuiyujie.com/2019/02/19/Java/Spring/SpringBoot%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%8A%E5%85%B6%E8%AF%BB%E5%8F%96/">SpringBoot 配置文件及其读取</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://shuiyujie.com/2019/02/19/Java/Spring/SpringBoot%20%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E9%A1%B5/">SpringBoot 错误处理页</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://shuiyujie.com/2019/02/19/Java/Spring/SpringBoot%20%E6%A8%A1%E6%9D%BF%20Thymeleaf%20%E7%9A%84%E4%BD%BF%E7%94%A8/">SpringBoot 模板 Thymeleaf 的使用</a></li><li style="list-style: none"><input type="checkbox"> <a href>SpringBoot 文件上传</a></li><li style="list-style: none"><input type="checkbox"> <a href>SpringBoot 基础拦截器</a></li><li style="list-style: none"><input type="checkbox"> <a href>SpringBoot 整合 MyBatis</a></li><li style="list-style: none"><input type="checkbox"> <a href>SpringBoot 整合消息服务</a></li><li style="list-style: none"><input type="checkbox"> <a href>SpringBoot 整合Redis数据库</a></li><li style="list-style: none"><input type="checkbox"> <a href>SpringBoot 整合Restful</a></li><li style="list-style: none"><input type="checkbox"> <a href>SpringBoot 整合Shiro验证框架</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 模板 Thymeleaf 的使用</title>
      <link href="/post/41479a53.html"/>
      <url>/post/41479a53.html</url>
      
        <content type="html"><![CDATA[<p>Java 开发行业有三种常用显示模板</p><ul><li>FreeMarker</li><li>Velocity</li><li>Thymeleaf（推荐使用）</li></ul><p>本项目是使用 Thymeleaf 模板的简单 Demo</p><p><a href="https://github.com/YujieShui/springboot-learning/tree/master/springboot-thymeleaf" target="_blank" rel="noopener">点击查看源码</a></p><a id="more"></a><h1 id="SpringBoot-模板-Thymeleaf-的使用"><a href="#SpringBoot-模板-Thymeleaf-的使用" class="headerlink" title="SpringBoot 模板 Thymeleaf 的使用"></a>SpringBoot 模板 Thymeleaf 的使用</h1><p>pom.xml 中添加依赖</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置使用 thymeleaf 模板--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>控制层进行信息显示</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Controller</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractBaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/show"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">show</span><span class="hljs-params">(String mid, Model model)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// request属性传递包装</span></span><br><span class="line">        model.addAttribute(<span class="hljs-string">"url"</span>, <span class="hljs-string">"www.shuiyujie.com"</span>);</span><br><span class="line">        <span class="hljs-comment">// request属性传递包装</span></span><br><span class="line">        model.addAttribute(<span class="hljs-string">"mid"</span>, mid);</span><br><span class="line">        <span class="hljs-comment">// 此处只返回一个路径， 该路径没有设置后缀，后缀默认是*.html</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"message/message_show"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们使用的是<code>@Controller</code>注解，所以此时<code>return &quot;message/message_show&quot;</code>将进行一次路由，路由到的文件就是 Thymeleaf 模板文件。</p><h1 id="Thymeleaf-模板文件位置配置"><a href="#Thymeleaf-模板文件位置配置" class="headerlink" title="Thymeleaf 模板文件位置配置"></a>Thymeleaf 模板文件位置配置</h1><p>文件位置的配置很重要，要按照规范进行配置。</p><p>首先我们要建立一个<strong>Resources类型目录</strong>，<code>Resources</code>目录就是源代码目录，这个是可以通过 IDE 进行设置。</p><p>我是这样设置的：</p><ul><li>src/main/view 目录下存放页面</li><li>src/main/view/static 目录下存放 js,css,images 等文件</li><li>src/main/view/templates 目录下存放 html 页面</li></ul><p><em>注: static 静态目录下的文件可以直接访问，而不需要通过控制器进行路由。</em></p><p><a href="http://localhost:8080/show" target="_blank" rel="noopener">http://localhost:8080/show</a><br>通过路由访问 message_show.html 页面</p><p><a href="http://localhost:8080/message_index.html" target="_blank" rel="noopener">http://localhost:8080/message_index.html</a><br>直接访问 message_index.html 页面</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 错误处理页</title>
      <link href="/post/3c98ab20.html"/>
      <url>/post/3c98ab20.html</url>
      
        <content type="html"><![CDATA[<p>SpringBoot 错误处理有三种情况</p><ul><li>数据验证错误</li><li>错误页指派</li><li>全局异常处理</li></ul><p>比如说在提交表单信息的时候，有些信息没填，有些信息有规范的格式，如果不符合要求就是数据校验错误。</p><p>我们需要对这些数据的格式进行校验，不符合要求不能接受且要提示错误信息。</p><p><img src="http://image.shuiyujie.com/2019-02-12-15-48-04.png" alt="验证注解"></p><p><a href="https://github.com/YujieShui/springboot-learning/tree/master/springboot-error" target="_blank" rel="noopener">点击查看源码</a></p><a id="more"></a><h1 id="springboot-错误处理，数据校验错误"><a href="#springboot-错误处理，数据校验错误" class="headerlink" title="springboot 错误处理，数据校验错误"></a>springboot 错误处理，数据校验错误</h1><p>SpringBoot 有数据校验的默认支持，该支持由 Hibernate 开发框架提供。</p><p>错误信息统一配置在<code>ValidationMessages.properties</code>文件中。</p><p>这种方式每个 VO 类在<code>ValidationMessages.properties</code>文件中配置对应的错误信息，并且在 VO 类的属性上添加上错误注解，过程繁琐。不推荐使用，更推荐使用反射和拦截器的方式处理错误信息。</p><p>但是我们还是要会使用这种方式处理数据验证错误，写了一个小 Demo，再接下来简单记录一下使用过程。</p><h2 id="添加错误信息配置文件"><a href="#添加错误信息配置文件" class="headerlink" title="添加错误信息配置文件"></a>添加错误信息配置文件</h2><p><code>src/main/resources</code>目录中建立<code>ValidationMessages.properties</code>文件。文件中配置错误信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">member.mid.notnull.error=邮箱不允许为空</span><br><span class="line">member.mid.email.error=邮箱格式错误</span><br><span class="line">member.mid.length.error=邮箱长度错误</span><br><span class="line">member.age.notnull.error=年龄不允许为空</span><br><span class="line">member.age.digits.error=年龄格式错误</span><br><span class="line">member.salary.notnull.error=工资不允许为空</span><br><span class="line">member.salary.digits.error=工资格式错误</span><br><span class="line">member.birthday.notnull.error=生日不允许为空</span><br></pre></td></tr></table></figure><h2 id="VO-类添加注解"><a href="#VO-类添加注解" class="headerlink" title="VO 类添加注解"></a>VO 类添加注解</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SuppressWarnings(<span class="hljs-string">"serial"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Member</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@NotNull</span>(message=<span class="hljs-string">"&#123;member.mid.notnull.error&#125;"</span>)</span><br><span class="line">    <span class="hljs-meta">@Email</span>(message=<span class="hljs-string">"&#123;member.mid.email.error&#125;"</span>)</span><br><span class="line">    <span class="hljs-meta">@Length</span>(min=<span class="hljs-number">6</span>,message=<span class="hljs-string">"&#123;member.mid.length.error&#125;"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> String mid ;</span><br><span class="line">    <span class="hljs-meta">@NotNull</span>(message=<span class="hljs-string">"&#123;member.age.notnull.error&#125;"</span>)</span><br><span class="line">    <span class="hljs-meta">@Digits</span>(integer=<span class="hljs-number">3</span>,fraction=<span class="hljs-number">0</span>,message=<span class="hljs-string">"&#123;member.age.digits.error&#125;"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> Integer age ;</span><br><span class="line">    <span class="hljs-meta">@NotNull</span>(message=<span class="hljs-string">"&#123;member.salary.notnull.error&#125;"</span>)</span><br><span class="line">    <span class="hljs-meta">@Digits</span>(integer=<span class="hljs-number">20</span>,fraction=<span class="hljs-number">2</span>,message=<span class="hljs-string">"&#123;member.salary.digits.error&#125;"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> Double salary ;</span><br><span class="line">    <span class="hljs-meta">@NotNull</span>(message=<span class="hljs-string">"&#123;member.birthday.notnull.error&#125;"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> Date birthday ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制器配置校验"><a href="#控制器配置校验" class="headerlink" title="控制器配置校验"></a>控制器配置校验</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/add"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="hljs-meta">@ResponseBody</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">add</span><span class="hljs-params">(@Valid Member vo, BindingResult result)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        Iterator&lt;ObjectError&gt; iterator = result.getAllErrors().iterator();</span><br><span class="line">        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            ObjectError error = iterator.next();</span><br><span class="line">            System.out.println(<span class="hljs-string">"【错误信息】code = "</span> + error.getCode() + <span class="hljs-string">"，message = "</span> + error.getDefaultMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> result.getAllErrors();</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> vo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="springboot-错误处理，配置错误页面"><a href="#springboot-错误处理，配置错误页面" class="headerlink" title="springboot 错误处理，配置错误页面"></a>springboot 错误处理，配置错误页面</h1><p>错误页面配置在<code>src/main/view/static</code>目录下，比如叫 error-404.html</p><h2 id="SringBoot-1-x-这样处理"><a href="#SringBoot-1-x-这样处理" class="headerlink" title="SringBoot 1.x 这样处理"></a>SringBoot 1.x 这样处理</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> com.shuiyujie.config;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.ErrorPage;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shui</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019-02-12</span></span><br><span class="line"><span class="hljs-comment"> **/</span></span><br><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ErrorPageConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> EmbeddedServletContainerCustomizer <span class="hljs-title">containerCustomizer</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class="line">            <span class="hljs-meta">@Override</span></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">customize</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">                    ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">                ErrorPage errorPage400 = <span class="hljs-keyword">new</span> ErrorPage(HttpStatus.BAD_REQUEST,</span><br><span class="line">                        <span class="hljs-string">"/error-400.html"</span>);</span><br><span class="line">                ErrorPage errorPage404 = <span class="hljs-keyword">new</span> ErrorPage(HttpStatus.NOT_FOUND,</span><br><span class="line">                        <span class="hljs-string">"/error-404.html"</span>);</span><br><span class="line">                ErrorPage errorPage500 = <span class="hljs-keyword">new</span> ErrorPage(</span><br><span class="line">                        HttpStatus.INTERNAL_SERVER_ERROR, <span class="hljs-string">"/error-500.html"</span>);</span><br><span class="line">                container.addErrorPages(errorPage400, errorPage404,</span><br><span class="line">                        errorPage500);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SringBoot-2-x-这样处理"><a href="#SringBoot-2-x-这样处理" class="headerlink" title="SringBoot 2.x 这样处理"></a>SringBoot 2.x 这样处理</h2><p>在SpringBoot2中没有<code>EmbeddedServletContainerCustomizer</code>这个类了，要这样处理</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ackage com.shuiyujie.config;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.boot.web.server.ErrorPage;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.boot.web.server.ErrorPageRegistrar;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.boot.web.server.ErrorPageRegistry;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shui</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019-02-12</span></span><br><span class="line"><span class="hljs-comment"> **/</span></span><br><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ErrorPageConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ErrorPageRegistrar</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerErrorPages</span><span class="hljs-params">(ErrorPageRegistry registry)</span> </span>&#123;</span><br><span class="line">        ErrorPage[] errorPages = <span class="hljs-keyword">new</span> ErrorPage[<span class="hljs-number">3</span>];</span><br><span class="line">        errorPages[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> ErrorPage(HttpStatus.NOT_FOUND, <span class="hljs-string">"/error-400.html"</span>);</span><br><span class="line">        errorPages[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> ErrorPage(HttpStatus.NOT_FOUND, <span class="hljs-string">"/error-404.html"</span>);</span><br><span class="line">        errorPages[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, <span class="hljs-string">"/error-500.html"</span>);</span><br><span class="line">        registry.addErrorPages(errorPages);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SpringBoot-全局错误处理"><a href="#SpringBoot-全局错误处理" class="headerlink" title="SpringBoot 全局错误处理"></a>SpringBoot 全局错误处理</h1><p>之前设置了错误页面，发生错误将会跳转到错误页面。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 演示 500 错误</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/get"</span>)</span><br><span class="line"><span class="hljs-meta">@ResponseBody</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"除法计算："</span> + (<span class="hljs-number">10</span> / <span class="hljs-number">0</span>));</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"hello world"</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如这样一个 10/0 的错误控制器跳转到 500 页面，这样就看不到详细的报错信息了。我们想看到类似控制台里面更加详细的报错信息。</p><h2 id="定义一个错误信息处理的页面"><a href="#定义一个错误信息处理的页面" class="headerlink" title="定义一个错误信息处理的页面"></a>定义一个错误信息处理的页面</h2><p>新建一个错误界面<code>src/main/view/templates/error.html</code></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">!DOCTYPE HTML&gt;</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>SpringBoot模版渲染<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"icon"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"image/x-icon"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/images/mldn.ico"</span>/&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"Content-Type"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span>/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;exception.message&#125;"</span>/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定义全局异常处理类"><a href="#定义全局异常处理类" class="headerlink" title="定义全局异常处理类"></a>定义全局异常处理类</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestControllerAdvice</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 定义错误显示页，error.html</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_ERROR_VIEW = <span class="hljs-string">"error"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 所有的异常都是Exception子类</span></span><br><span class="line">    <span class="hljs-meta">@ExceptionHandler</span>(Exception.class)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">defaultErrorHandler</span><span class="hljs-params">(HttpServletRequest request, Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ErrorInfo</span> </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">private</span> Integer code;</span><br><span class="line">            <span class="hljs-keyword">private</span> String message;</span><br><span class="line">            <span class="hljs-keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCode</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> code;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCode</span><span class="hljs-params">(Integer code)</span> </span>&#123;</span><br><span class="line">                <span class="hljs-keyword">this</span>.code = code;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMessage</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMessage</span><span class="hljs-params">(String message)</span> </span>&#123;</span><br><span class="line">                <span class="hljs-keyword">this</span>.message = message;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUrl</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> url;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUrl</span><span class="hljs-params">(String url)</span> </span>&#123;</span><br><span class="line">                <span class="hljs-keyword">this</span>.url = url;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ErrorInfo info = <span class="hljs-keyword">new</span> ErrorInfo();</span><br><span class="line">        <span class="hljs-comment">// 标记一个错误信息类型</span></span><br><span class="line">        info.setCode(<span class="hljs-number">100</span>);</span><br><span class="line">        info.setMessage(e.getMessage());</span><br><span class="line">        info.setUrl(request.getRequestURL().toString());</span><br><span class="line">        <span class="hljs-keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 配置文件及其读取</title>
      <link href="/post/f0ba9e07.html"/>
      <url>/post/f0ba9e07.html</url>
      
        <content type="html"><![CDATA[<p> 在配置文件中统一管理配置信息，使用配置文件 SpringBoot 有规范的方式。</p><p> <code>src/main/resources</code> 的 classpath 路径之中，创建<code>application.properties</code>配置文件。</p><p> 配置文件也可以用 YAML 语言来写，创建<code>application.yml</code>配置文件</p><p> 两个文件同时存在都会起作用，但当配置项冲突时，优先使用<code>application.properties</code>文件</p><p> <a href="https://github.com/YujieShui/springboot-learning/tree/master/spring-messagesource" target="_blank" rel="noopener">点击获取项目源码</a></p> <a id="more"></a><h1 id="资源文件的设置"><a href="#资源文件的设置" class="headerlink" title="资源文件的设置"></a>资源文件的设置</h1><p> 资源文件统一放在<code>src/main/resources/i18n</code>目录中</p><ul><li>建立 Messages.properties</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">welcome.url=www.shuiyujie.com</span><br><span class="line">welcome.msg=shuiyujie</span><br></pre></td></tr></table></figure><ul><li>建立 Pages.properties</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">member.add.page=/pages/back/admin/member/member_add.jsp</span><br><span class="line">member.add.action=/pages/back/admin/member/member_add.action</span><br></pre></td></tr></table></figure><ul><li>配置文件 application.yml 中指定资源文件目录</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring: # 表示该配置直接为Spring容器负责处理</span><br><span class="line">    messages: # 表示进行资源配置</span><br><span class="line">        basename: i18n/Messages,i18n/Pages # 资源文件的名称</span><br><span class="line">server:</span><br><span class="line">    port: 80 # 此处设置的服务的访问端口配置</span><br></pre></td></tr></table></figure><h1 id="资源文件的读取"><a href="#资源文件的读取" class="headerlink" title="资源文件的读取"></a>资源文件的读取</h1><p>经过以上配置就会自动生成一个<code>MessageSource</code>资源文件对象，我们只要注入这个对象就能使用资源文件中配置的属性了。</p><p>我会建立一个控制器的父类在其中注入<code>MessageSource</code>，然后子类继承父类就能很方便地读取资源文件了</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractBaseController</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Resource</span></span><br><span class="line">    <span class="hljs-keyword">private</span> MessageSource messageSource; <span class="hljs-comment">// 自动注入此资源对象</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMessage</span><span class="hljs-params">(String key, String... args)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.messageSource.getMessage(key, args, Locale.getDefault());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractBaseController</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/echo"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">echo</span><span class="hljs-params">(String mid)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"【*** 访问地址 ***】"</span> + <span class="hljs-keyword">super</span>.getMessage(<span class="hljs-string">"member.add.action"</span>));</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getMessage(<span class="hljs-string">"welcome.msg"</span>, mid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程的优缺点</title>
      <link href="/post/579f9aa4.html"/>
      <url>/post/579f9aa4.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9.png" alt="并发编程的优缺点"></p><p>Java 程序从 main() 函数开始开始执行，就是启动一个名称为 main 的线程。在程序顺序执行的过程中，看似没有其他线程参与，实际上有许多线程和 main 线程一起执行着。</p><p>Java 天生就是多线程的，为什么 Java 会设计成多线程的呢？并发编程是不是有它优点？然而事物都是有两面性的，并发编程的缺点是什么？应该怎么避免？</p><a id="more"></a><h1 id="1-为什么要使用并发？（优点）"><a href="#1-为什么要使用并发？（优点）" class="headerlink" title="1. 为什么要使用并发？（优点）"></a>1. 为什么要使用并发？（优点）</h1><h2 id="1-1-更好地利用计算机处理器"><a href="#1-1-更好地利用计算机处理器" class="headerlink" title="1.1 更好地利用计算机处理器"></a>1.1 更好地利用计算机处理器</h2><p>现在 CPU 都是多核的，而且核心越来越多。如果一个程序是单线程的，无论如何只能使用一个核心，CPU 的核心再多也无法提升机器的性能。</p><p>如果一个程序是多线程的，那么它就可以利用 CPU 的多个核心进行运算，CPU 的核心变得越多，运行速度也能越快。</p><h2 id="1-2-更快的响应速度"><a href="#1-2-更快的响应速度" class="headerlink" title="1.2 更快的响应速度"></a>1.2 更快的响应速度</h2><p>多线程可以让一系列的操作并发地执行，这样就可以提高程序响应的速度。比如用户下单，它包括插入订单数据、生成订单快照、发送邮件通知卖家和记录货品销售数量等。</p><p>等这些业务操作做完，用户要等 1 秒。把生成订单快照、发送邮件这样的操作给其他线程处理，用户可能就等 0.5 s。</p><h2 id="1-3-更简单地进行开发"><a href="#1-3-更简单地进行开发" class="headerlink" title="1.3 更简单地进行开发"></a>1.3 更简单地进行开发</h2><p>Java 设计之初就考虑了并发编程，提供了一致的编程模型，使用 Java 的程序员可以把更多精力放在业务上，而不用考虑怎么使用多线程。</p><h1 id="2-并发编程的缺点及解决方案"><a href="#2-并发编程的缺点及解决方案" class="headerlink" title="2. 并发编程的缺点及解决方案"></a>2. 并发编程的缺点及解决方案</h1><h2 id="2-1-增加上下文切换，影响执行速度"><a href="#2-1-增加上下文切换，影响执行速度" class="headerlink" title="2.1 增加上下文切换，影响执行速度"></a>2.1 增加上下文切换，影响执行速度</h2><p>我们在阅读英文书籍的时候碰到了一个不认识的单词，这时候就去字典里查一下这个单词是什么意思，查完再回过头继续往下看书。这个一来一回的过程就相当于是上下文切换的过程。</p><p>线程之间上下文切换的过程是这样的。CPU 个每个线程分配一个时间片，一个时间片就表示一段很短的时间。CPU 执行线程时，时间片用完了就会换一个线程执行，就这样在各个线程之间切换。</p><p>查完字典再回过头继续阅读，这样会影响我们的阅读效率。上下文切换自然也会影响执行速度。</p><p>减少上下文切换的方法有无锁并发编程、CAS算法、使用最少线程和使用协程。</p><ul><li><p>无锁并发编程。多线程竞争锁时，会引起上下文切换，所以多线程处理数据时，可以用一些办法来避免使用锁，如将数据的ID按照Hash算法取模分段，不同的线程处理不同段的数据。</p></li><li><p>CAS算法。Java的Atomic包使用CAS算法来更新数据，而不需要加锁。</p></li><li><p>使用最少线程。避免创建不需要的线程，比如任务很少，但是创建了很多线程来处理，这样会造成大量线程都处于等待状态。</p></li><li><p>协程：在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。</p></li></ul><h2 id="2-2-出现死锁，导致系统不可用"><a href="#2-2-出现死锁，导致系统不可用" class="headerlink" title="2.2 出现死锁，导致系统不可用"></a>2.2 出现死锁，导致系统不可用</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeadLockDemo</span> </span>&#123;</span><br><span class="line">    privat <span class="hljs-keyword">static</span> String A = <span class="hljs-string">"A"</span>;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String B = <span class="hljs-string">"B"</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">new</span> DeadLockDemo().deadLock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deadLock</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">            Thread t1 = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="hljs-meta">@Override</span></span><br><span class="line">                    <span class="hljs-function">publicvoid <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">                            <span class="hljs-keyword">synchronized</span> (A) &#123;</span><br><span class="line">                                    <span class="hljs-keyword">try</span> &#123; Thread.currentThread().sleep(<span class="hljs-number">2000</span>);</span><br><span class="line">                                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                            e.printStackTrace();</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="hljs-keyword">synchronized</span> (B) &#123;</span><br><span class="line">                                            System.out.println(<span class="hljs-string">"1"</span>);</span><br><span class="line">                                    &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            Thread t2 = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="hljs-meta">@Override</span></span><br><span class="line">                    <span class="hljs-function">publicvoid <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">                            <span class="hljs-keyword">synchronized</span> (B) &#123;</span><br><span class="line">                                    <span class="hljs-keyword">synchronized</span> (A) &#123;</span><br><span class="line">                                            System.out.println(<span class="hljs-string">"2"</span>);</span><br><span class="line">                                    &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            t1.start();</span><br><span class="line">            t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如t1拿到锁之后，因为一些异常情况没有释放锁（死循环）。又或者是t1拿到一个数据库锁，释放锁的时候抛出了异常，没释放掉。</p><p>一旦出现死锁，系统功能就不可用了，需要花许多精力去排查错误。</p><p>避免死锁的几个常见方法有：</p><ul><li>避免一个线程同时获取多个锁。</li><li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。</li><li>尝试使用定时锁，使用lock.tryLock（timeout）来替代使用内部锁机制。</li><li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。</li></ul><h2 id="2-3-资源限制影响性能"><a href="#2-3-资源限制影响性能" class="headerlink" title="2.3 资源限制影响性能"></a>2.3 资源限制影响性能</h2><p>资源限制是指在进行并发编程时，程序的执行速度受限于计算机硬件资源或软件资源。</p><p>比如带宽受限的情况下及时启动多个线程进行下载，下载速度永远无法超过带宽。</p><p>在并发编程中，将代码执行速度加快的原则是将代码中串行执行的部分变成并发执行。</p><p>但是如果将某段串行的代码并发执行，因为受限于资源，仍然在串行执行，这时候程序不仅不会加快执行，反而会更慢，因为增加了上下文切换和资源调度的时间。</p><p>对于硬件资源的限制，可以采用集群的方式，一台机器的资源有限那就用多台，比如部署 hadoop 集群。</p><p>对于软件资源限制可以采用连接池，提高资源的复用率。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu上安装maven</title>
      <link href="/post/9ec2f732.html"/>
      <url>/post/9ec2f732.html</url>
      
        <content type="html"><![CDATA[<p>本文介绍如何在 ubuntu16.04 中安装 maven。</p><a id="more"></a><p>在 <a href="https://maven.apache.org/" target="_blank" rel="noopener">Maven 官网</a>下载安装包，然后解压。</p><p>解压之后拷贝到到 <code>/opt</code> 目录下，并建立软链接：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv apache-maven-3.3.9 /opt</span><br><span class="line">ln -s apache-maven-3.3.9 maven</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line">export M2_HOME=/opt/maven</span><br><span class="line">export M2=$M2_HOME/bin</span><br><span class="line">export PATH=$M2:$PATH</span><br><span class="line"></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>测试安装是否成功</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure><p>修改 maven 的源</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/maven/conf/settings.xml ~/.m2</span><br><span class="line">vim ~/.m2/settings.xml</span><br></pre></td></tr></table></figure><p>在 <code>&lt;mirrors&gt;</code>中进行如下配置</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML</title>
      <link href="/post/af8b09ba.html"/>
      <url>/post/af8b09ba.html</url>
      
        <content type="html"><![CDATA[<p>临时笔记，待补充。</p><a id="more"></a><p>UML 的定义</p><ul><li>统一建模语言（Unified Modeling Language）</li><li>非专利的第三代建模和规约语言</li></ul><p>UML 特点</p><ul><li>UML 是一种开发的方法</li><li>用于说明、可视化、构建和编写一个正在开发的面向对象爱你过的、软件密集系统的制品的开放方法</li><li>UML 展现了一系列最佳工程实践。这些最佳实践在对大规模，复杂系统进行建模方面，特别是在软件架构层次已经被验证有效</li></ul><p>UML2.2分类</p><ul><li><p>结构式图形：强调的是系统式的建模</p></li><li><ul><li>静态图（类图、对象图、包图）</li><li>实现图（组件图、部署图）</li><li>剖面图</li><li>复合结构图</li></ul></li><li><p>行为式图形：强调系统模型中触发的事件</p></li><li><ul><li>活动图</li><li>状态图</li><li>用例图</li></ul></li><li><p>交互式图形：属于行为式图形子集合，强调系统模型中资料流程</p></li><li><ul><li>通信图</li><li>交互概述图（UML2.0）</li><li>时序图（UML2.0）</li><li>时间图（UML2.0）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> computer science </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂相关设计模式</title>
      <link href="/post/6d867605.html"/>
      <url>/post/6d867605.html</url>
      
        <content type="html"><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><ul><li>定义：由一个工厂对象决定创建出哪一种产品类的实例</li><li>类型：创建型，但不属于 GOF 23 种类设计模式</li><li>适用场景：<ul><li>工厂类负责创建的对象比较少</li><li>客户端(应用层)只知道传入工厂类的参数，对于创建对象对象(逻辑)不关心</li></ul></li><li>优点：只需要传入一个正确的参数，就可以获取你所需要的对象，无需知道其创建细节</li><li>缺点：工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，违背开闭原则</li></ul><p>简单工厂模式中，应用层  <code>Test</code> 通过一个工厂类 <code>VideoFactory</code> 来获取一个对象。从应用层来看，这样做的优点是不需要单独创建一个 video 对象，而是采用工厂统一来创建对象，应用层只需要传入参数就可以了。</p><p>入参可能是字符串等，通过逻辑判断来返回相应的实例对象；入参也有可能是一个类，通过反射来获取对象。</p><p><img src="http://image.shuiyujie.com/2019-09-22-00-49-19.png" alt="简单工厂模式"></p><h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1>]]></content>
      
      
      <categories>
          
          <category> computer science </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件设计的7大原则</title>
      <link href="/post/9c334df9.html"/>
      <url>/post/9c334df9.html</url>
      
        <content type="html"><![CDATA[<p>开闭原则、依赖倒置原则、单一职责原则、接口隔离原则、迪米特原则、里氏替换原则、合成复用原则。</p><a id="more"></a><h1 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h1><ul><li>what：一个软件实体如类、模块和函数应该<strong>对扩展开发</strong>，<strong>对修改关闭</strong>。</li><li><p>why：提高软件系统的可复用性及可维护性</p></li><li><p>how: 版本更新尽量不更改源代码，但是可以添加新功能；</p></li><li><p>example: 弹性工作时间，每天工作8小时不变，早点来早点走，晚点来晚点走</p></li></ul><p>面向抽象编程，继承、多态机制</p><p><img src="http://image.shuiyujie.com/2019-09-21-15-23-44.png" alt="开闭原则"></p><p>左图表示我们有一个订单接口，现在要在其基础上扩展一个功能，能够实现打折的功能。<strong>如何才能实现打折功能呢？</strong></p><ol><li>在 IOrder 接口中添加一个 getDiscountPrice()，并在其实现类中实现这个方法。这样可行么？如果这样做就需要在所有实现这个方法的类中，添加 getDiscountPrice()。</li><li>修改 getPrice() 的实现，这样原价去哪里获取呢？也不是很好</li><li>我们可以写一个类 <code>ShoeDiscoutOrder</code> 继承 <code>ShoeOrder</code> 然后 @Override getPrice() 来实现打折功能，而原价则使用 getOriginPrice()，并在其中使用 <code>super.getPrice()</code> 调用父类方法。</li></ol><p><strong>这是开闭原则的简单应用：扩展是开启的，但是对接口和基类的修改是关闭的。</strong></p><h1 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h1><ul><li>what: 高层模块不应该依赖低层模块，二者都应该依赖其抽象</li><li>why: 减少雷剑的耦合性，提高系统稳定性，提高代码可读性和可维护性，降低修改程序所造成的风险</li><li><p>how：抽象不应该依赖细节；细节应该依赖抽象。针对接口编程，不要针对实现编程。</p></li><li><p>example：对比扩展类中的方法编程，以及面向接口编程的区别。</p></li></ul><p>现在有一个 course 类，类中有上各种课程的方法，我在应用层调用各种上课的方法，就需要在 course 中新增相应的方法。此时就造成了一种局面：<strong>高层模块依赖于低层模块</strong>。代码是这样的：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 应用层（高层）调用低层的方法</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Geely geely = <span class="hljs-keyword">new</span> Geely();</span><br><span class="line">       geely.studyJavaCourse();</span><br><span class="line">       geely.studyFECourse();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 低层想要扩展就要加方法</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Geely</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">studyJava</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 业务代码</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">studyPython</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 业务代码</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-comment">// 更多课程都要添加新的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们希望高层模块不依赖低层模块，并且让它们依赖其抽象。具体来说是什么意思呢？就是说我有一个接口实现了 <code>stydyCouse()</code> 这一个方法，具体什么课，怎么学都由该接口的实现类负责。我从高层传入对象，就可以调用相应的类。</p><p><img src="http://image.shuiyujie.com/2019-09-21-20-08-41.png" alt="依赖倒置原则实现" style="zoom:50%;"></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 高层调用低层，只要注入具体的实现类</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Geely geely = <span class="hljs-keyword">new</span> Geely();</span><br><span class="line">        geely.setiCourse(<span class="hljs-keyword">new</span> JavaCourse());</span><br><span class="line">        geely.studyImoocCourse();</span><br><span class="line"></span><br><span class="line">        geely.setiCourse(<span class="hljs-keyword">new</span> FECourse());</span><br><span class="line">        geely.studyImoocCourse();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 低层调用方法无需变动</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Geely</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> ICourse iCourse;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setiCourse</span><span class="hljs-params">(ICourse iCourse)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.iCourse = iCourse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">studyImoocCourse</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        iCourse.studyCourse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依赖倒置的核心是<strong>面向接口编程</strong>。</p><h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h1><ul><li>what: 不要存在多余一个导致类变更的原则</li><li>why: 一个类有多个职责会导致它变更，修改某一个职责可能导致其他职责出错</li><li><p>how: 一个类/接口/方法只负责一个职责</p></li><li><p>example：类、接口和方法级别的单一职责实现。</p></li></ul><h2 id="类级别"><a href="#类级别" class="headerlink" title="类级别"></a>类级别</h2><p>现在有一个 bird 类，有的鸟靠飞，有的鸟靠走。我们可能会用一个逻辑判断来实现。如果说遵循单一职责原则，就应该将其拆成两个类 <code>FlyBird</code> 和 <code>WalkBird</code> ，然后由应用层来判断是哪种鸟。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bird</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mainMoveMode</span><span class="hljs-params">(String birdName)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(<span class="hljs-string">"鸵鸟"</span>.equals(birdName))&#123;</span><br><span class="line">            System.out.println(birdName+<span class="hljs-string">"用脚走"</span>);</span><br><span class="line">        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">            System.out.println(birdName+<span class="hljs-string">"用翅膀飞"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口级别"><a href="#接口级别" class="headerlink" title="接口级别"></a>接口级别</h2><p>比如说有个 ICourse 接口，接口中有若干方法，一些方法负责获取课程信息，一些方法负责管理可能。比如说，有个方法是退订这门课，那就不能获取课程信息了对不对。总之，这样一个接口现在负责了两种职责，我们就应该将其拆成两组接口。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ICourse</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 职责一：负责获取课程信息</span></span><br><span class="line">    <span class="hljs-function">String <span class="hljs-title">getCourseName</span><span class="hljs-params">()</span></span>;</span><br><span class="line">    <span class="hljs-keyword">byte</span>[] getCourseVideo();</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 职责二：负责管理课程</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">studyCourse</span><span class="hljs-params">()</span></span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">refundCourse</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.shuiyujie.com/2019-09-21-20-51-45.png" alt="单一职责原则的实现"></p><h2 id="方法级别"><a href="#方法级别" class="headerlink" title="方法级别"></a>方法级别</h2><p>方法中做逻辑判断，负责多个任务，实际上是可以拆分开的。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateUsername</span><span class="hljs-params">(String userName)</span></span>&#123;</span><br><span class="line">userName = <span class="hljs-string">"geely"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateUserAddress</span><span class="hljs-params">(String address)</span></span>&#123;</span><br><span class="line">address = <span class="hljs-string">"beijing"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 多个职责，条件判断，拆！</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateUserInfo</span><span class="hljs-params">(String userName,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">         String address,<span class="hljs-keyword">boolean</span> bool)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(bool)&#123;</span><br><span class="line">            <span class="hljs-comment">//todo something1</span></span><br><span class="line">        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">            <span class="hljs-comment">//todo something2</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        userName = <span class="hljs-string">"geely"</span>;</span><br><span class="line">        address = <span class="hljs-string">"beijing"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h1><ul><li>what: 用多个专门的接口，而不使用单一的总接口，客户端不应该依赖它不需要的接口</li><li>why: 符合高内聚低耦合的设计思想，从而使得类具有很好的可读性、可扩展性和可维护性</li><li><p>how：</p><ul><li>一类对一个类的依赖应该建立在最小的接口上</li><li>建立单一接口，不要建立庞大臃肿的接口</li><li>尽量细化接口，接口中的方法尽量少</li><li>注意适度原则，一定要适度</li></ul></li><li><p>example: 一个关于动物的接口承载太多的方法，将其拆分的例子</p></li></ul><p>同样是动物但是这个动物能做的事儿，其他动物可能不能做。如果动物都实现同样的接口，那么有些方法的实现就要空着了。所以要拆分。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IAnimalAction</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span></span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拆分前，拆分后如下所示：</p><p><img src="http://image.shuiyujie.com/2019-09-21-21-10-31.png" alt="接口隔离原则演示" style="zoom:50%;"></p><p>接口隔离原则看着简单，但是把握好接口隔离的粒度还是需要仔细考量的。</p><h1 id="迪米特原则"><a href="#迪米特原则" class="headerlink" title="迪米特原则"></a>迪米特原则</h1><ul><li>what: 一个对象应该对其他对象保持最少的了解，又叫最少知道原则</li><li>why: 降低类之间的耦合</li><li>how: 尽量降低类和类之间的耦合</li><li>example：</li></ul><p>Boss 类只需要和 TeamLeader 打交道，而不需要和 course 打交道。</p><p><img src="http://image.shuiyujie.com/2019-09-21-21-32-36.png" alt="耦合"></p><p>修改之后如下所示：</p><p><img src="http://image.shuiyujie.com/2019-09-21-21-34-30.png" alt="修改之后"></p><p>迪米特原则的关键就是梳理出这个类应该和哪些类打交道，不应该和哪些类打交道，做到尽可能合理。</p><h1 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h1><h1 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h1>]]></content>
      
      
      <categories>
          
          <category> computer science </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux三剑客——Git</title>
      <link href="/post/fd2c899.html"/>
      <url>/post/fd2c899.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/git_command.png" alt="Git命令速查表"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP分片</title>
      <link href="/post/4a388439.html"/>
      <url>/post/4a388439.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/2019-10-01-17-17-04.png" alt="IP分片"></p><p>IP 数据报由首部和数据部分组成。数据部分存储我们要传输的数据，数据体积如果太大，就需要将其拆分开来，分成多次传输。这就是 <strong>IP 分片</strong>。</p><p>在 TCP/IP 分层中，数据链路层用MTU（Maximum Transmission Unit，最大传输单元）来限制所能传输的数据包大小，MTU是指一次传送的数据最大长度，不包括数据链路层数据帧的帧头，如以太网的MTU为1500字节，实际上数据帧的最大长度为1512字节，其中以太网数据帧的帧头为12字节。</p><p>当发送的IP数据报的大小超过了MTU时，IP层就需要对数据进行分片，否则数据将无法发送成功。</p><a id="more"></a><p>比如说上图中的数据大小为 3800 字节，将其分成三个数据包片：0~1399、1400~2799、2800~3799。</p><p>我们分片之后，我们还需要将其按照序号组装起来，如何组装就要通过 IP 数据报的首部来进行标记了。</p><p><img src="http://image.shuiyujie.com/2019-10-01-16-18-50.png" alt="IP协议"></p><p>在 IP 首部中有 4 个字节是和 IP 分片相关的：</p><ol><li>标识(identification) : 占 16 bit，其本质是一个计数器，用来产生数据报的标识，同一个数据报的各个分片的标识是一样的。</li><li>标志(flag)：占 3 bit，其中有1位用来表示是否有更多的分片，如果是最后一个分片，该标志位为0，否则为1<ol><li>R：目前只有后两个比特有意义。</li><li>DF：Don’t Fragment,“不分片”位，<code>DF=1</code>表示不分片；</li><li>MF：More Fragment,“更多的片”，除了最后一片外，其它每个组成数据报的片都要把比特置1</li></ol></li><li>片偏移：占13 bit，某片在原分组中的相对位置。片偏移以 8 个字节为偏移单位，所以要除以8</li></ol><p><strong>参考：</strong></p><p><a href="https://www.cnblogs.com/diegodu/p/4647644.html" target="_blank" rel="noopener">IP分片浅析</a></p><p><a href="https://blog.csdn.net/yusiguyuan/article/details/22782943" target="_blank" rel="noopener">TCP层的分段和IP层的分片之间的关系 &amp; MTU和MSS之间的关系</a></p>]]></content>
      
      
      <categories>
          
          <category> computer science </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
            <tag> tcp/ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP、IP协议</title>
      <link href="/post/f305b41d.html"/>
      <url>/post/f305b41d.html</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://shuiyujie.com/post/38134907.html">ISO/OSI参考模型</a>一文中介绍了 OSI 七层参考模型。</p><p>ISO/OSI参考模型有这样两个缺陷：</p><ol><li>有些功能在多个层次中多次出现</li></ol><p>没有任何一家公司按照七层模型开发，但</p><p>OSI七层模型的缺点：</p><p>TCP/IP 是为了解决异种计算机网络的通信联系</p><p>TCP/IP协议体系概述</p><ul><li>TCP/IP 协议是针对 Internet 开发的一种体系结构和协议标准</li><li>TCP/IP 协议是国际互联网 Internet 采用的协议标准</li><li>TCP/IP 是一组通信协议的代名词，是由一系列协议组成的协议簇</li></ul><p>TCP/IP 是指传输控制协议/网际协议，是针对 Internet 开发的一 种体系结构和协议标准，其目的在于<strong>解决异种计算机网络的通信问题</strong>，使得网络在互连时把技术细节隐藏起来，为用户提供 一种通用、一致的通信服务。通常所说的TCP/IP协议实际上包含了大量的协议和应用，并且由多个独立定义的协议组合在一起，因此更确切地说，TCP/IP 是一个协议族而不是一种协议</p><p>TCP/IP协议的特点</p><ul><li>TCP/IP是开放的协议标准</li><li>TCP/IP独立于特定的网络硬件，可以运行在局域网、广域网等各种网 络环境</li><li>TCP/IP使用统一的网络地址分配方案，使得整个TCP/IP设备在网络 中只有惟一的地址</li><li>TCP/IP是标准化的高层协议，可以提供多种可靠的用户服务</li></ul><h1 id="TCP-IP协议集的主要协议"><a href="#TCP-IP协议集的主要协议" class="headerlink" title="TCP/IP协议集的主要协议"></a>TCP/IP协议集的主要协议</h1><table><thead><tr><th>协议</th><th>全称</th><th>提供服务</th><th>相应 OSI 层</th></tr></thead><tbody><tr><td>IP</td><td>Internet Protocol<br>互联网报文协议</td><td>数据报服务</td><td>3</td></tr><tr><td>ICMP</td><td>Internet Control Message <br>互联网控制报文协议</td><td>差错和控制</td><td>3</td></tr><tr><td>ARP</td><td>Address Resolution Protocol<br>地址解析协议</td><td>互联网地址 -&gt; 物理地址</td><td>3</td></tr><tr><td>RARP</td><td>Reverse Address Resolution Protocol<br>反向地址解析协议</td><td>物理地址 -&gt; 互联网地址</td><td>3</td></tr><tr><td>TCP</td><td></td><td>可靠流服务</td><td>4</td></tr><tr><td>FTP</td><td></td><td>文件传送</td><td>5~7</td></tr><tr><td>TELENT</td><td></td><td>终端仿真</td><td>5~7</td></tr><tr><td>DNS</td><td></td><td>域名 -&gt; 互联网地址</td><td>5~7</td></tr></tbody></table><h1 id="网络接口层"><a href="#网络接口层" class="headerlink" title="网络接口层"></a>网络接口层</h1><p>IEEE 国际电气与电子协会 =》 研究局域网的概念和定义</p><p>MAC - 介质访问控制层</p><p>LLC - 逻辑链路控制层</p><p>在TCP/IP模型中，网络接口层对应ISO/OSI参考模型的物理层和数据链路层</p><p>链路层协议执行的主要任务：</p><ul><li><p>管理对所使用的任何联网介质的访问，称为介质访问控制（MAC）–与传输媒体有关</p></li><li><p>创建一对MAC层地址之间点到点的临时连接以传输数据，称为逻辑链路控制（LLC）</p></li></ul><p>为了使数据链路层更好的适应多种局域网，802 委员会就将局域网的数据链路层拆 成两个子层：</p><ul><li><p>MAC 子层的主要功能是：帧的封装和拆封，物理介质传输差错的检测，寻址，实现介质访问控 制协议</p></li><li><p>LLC 子层的主要功能是：连接管理（建立和释放链接），与高层的接口，帧的可靠，按序传输及流量控制</p></li></ul><p>局域网中使用网络接口层协议的代表</p><ul><li><p>以太网</p></li><li><p>令牌环</p></li><li><p>FDDI</p></li></ul><p>广域网中使用网络接口层协议的代表</p><ul><li><p>SLIP（串行链路网际协议）</p></li><li><p>PPP（点对点协议）</p></li></ul><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>LAN？？？</p><p>WAN？？</p><ul><li>IP协议</li><li>ARP（地址解析协议）</li><li>RARP（反向地址解析协议）</li><li>ICMP（互联网控制消息协议）</li></ul><h2 id="IP-协议"><a href="#IP-协议" class="headerlink" title="IP 协议"></a>IP 协议</h2><p>IP协议功能</p><ul><li>寻址和路由</li><li>传递服务<ul><li>不可靠，可靠性由上层协议提供</li><li>无连接</li></ul></li><li>数据报分段和重组</li></ul><p>寻址和路由：比如要从北京往南京发一封邮件，找到南京这个地方就叫寻址；北京到南京有好多条路线，选择走哪条路就叫路由。</p><p>传递服务：IP 协议是不可靠的，其可靠性由上层协议来保证，比如用 TCP 协议来保证。IP 协议就是尽最大努力来做事，不保证一定能做到。</p><p>数据报的分段是充足：从北京往南京发货物，货物比较大，一车装不下。那就要拆成好几个部分发送。到达目的地再把各个部件组合起来。</p><p><img src="http://image.shuiyujie.com/2019-10-01-16-18-50.png" alt="IP协议"></p><p>IP 数据报由首部和数据部分组成。</p><p>首部由固定部分(20bit)和可变部分组成  （20~60bit）</p><ul><li>版本——占 4 bit，指IP协议的版本。目前的 IP 协议版本号为 4 (即 IPv4)</li><li>首部长度——占 4 bit，可表示的最大数值是 15 个单位(一个单位为 4 字节)。因此 IP 的首部长度的最大值是60字节。</li><li>服务类型——占 8 bit，用来获得更好的服务。这个字段以前一直没有被人们使用</li><li>总长度——占 16 bit，首部长度 + 数据长度，单位为字节，因此数据报的最大长度为 2^16-1=65535 字节。总长度必须不超过最大传送单元 MTU。</li><li>标识(identification)占 16 bit，它是一个计数器，用来产生数据报的标识</li><li>标志(flag)——占 3 bit，目前只有后两个比特有意义。标志字段的最低位是 MF (More Fragment)。MF = 1 表示后面“还有分片”。MF = 0 表示最后一个分片。标志字段中间的一位是 DF (Don’t Fragment) 。只有当 DF = 0 时才允许分片。</li><li>片偏移(13 bit)指出：较长的分组在分片后，某片在原分组中的相对位置。片偏移以 8 个字节为偏移单位。</li><li>生存时间(8 bit)记为 TTL (Time To Live)，这是为了限制数据报在网络中的生存时间，其单位最初是秒，但为了方便，现在都用「跳数」作为 TTL 的单位。数据报每经过一个路由器，其 TTL 值就减 1。</li><li>协议(8 bit)字段指出此数据报携带的数据使用何种协议。以便目的主机的 IP 层将数据部分上交给哪个处理过程。</li><li>首部检验和(16 bit)字段只检验数据报的首部不包括数据部分。这里不采用 CRC 检验码而采用简单的计算方法。</li><li>源地址和目的地址都各占 4 字节。源地址就是我们发送数据的机器的 IP 地址，目的地址就是目标机器的 IP 地址。</li></ul><p>标识、标志、片偏移：运一批苹果，一次运不过要分开来运送。</p><p>好几趟火车我们运过去给火车做标记，就叫红富士苹果。这就是标识</p><p>标志，D=1标识不分批，M=1标识分批运</p><p>片偏移：第一辆火车出去，第二辆要多久能到。</p><p>IP分片</p><p>生存时间：在路由环路发生的时，会造成网络资源的浪费，就设置了一个 TTL 值，一般 windows 是 64。每次经过一个路由器，这个值就减小1，减到0的时候就把这个报文给干掉。</p><p>IP 数据报首部的可变部分</p><ul><li>IP 首部的可变部分就是一个选项字段，用来支持排错、测量以及安全 等措施，内容很丰富</li><li>选项字段的长度可变，从 1 个比特到 32个比特不等，取决于所选择 的项目</li><li>增加首部的可变部分是为了增加 IP 数据报的功能，但这同时也使得 IP 数据报的首部长度成为可变的。这就增加了每一个路由器处理数据报的开销</li><li>实际上这些选项很少被使用</li></ul><p>##ARP（地址解析协议） </p><h2 id="RARP（反向地址解析协议）"><a href="#RARP（反向地址解析协议）" class="headerlink" title="RARP（反向地址解析协议）"></a>RARP（反向地址解析协议）</h2><h2 id="ICMP（互联网控制消息协议）"><a href="#ICMP（互联网控制消息协议）" class="headerlink" title="ICMP（互联网控制消息协议）"></a>ICMP（互联网控制消息协议）</h2><h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1>]]></content>
      
      
      <categories>
          
          <category> computer science </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
            <tag> tcp/ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISO/OSI参考模型</title>
      <link href="/post/38134907.html"/>
      <url>/post/38134907.html</url>
      
        <content type="html"><![CDATA[<p>Open System Interconnection，简称 ISO/OSI RM 是一个逻辑结构，并非一个具体的计算机设备或网络。任何两个遵守协议的标准的系统都可以互连通信，描述的是通信软件的结构。</p><a id="more"></a><h1 id="ISO（国际标准化组织）"><a href="#ISO（国际标准化组织）" class="headerlink" title="ISO（国际标准化组织）"></a>ISO（国际标准化组织）</h1><p>ISO是一个代表了130个国家的标准组织的集体，它的总部设在瑞士 的日内瓦。ISO的目标是制定国际技术标准以促进全球信息交换和无 障碍贸易。</p><p>ISO的权威性不仅限于信息处理和通信工业，它还适用于纺织品业、 包装业、货物分发、能源生产和利用、造船业，以及银行业务和金融 服务。事实上，在ISO的大约12,000个标准中，仅有大约500个应用 于计算机相关的产品和功能中。国际电子与电气工程标准是由一个相 似的国际标准组织IEC（国际电子技术协会）单独制定的。ISO所有的 信息技术标准设计与IEC相一致。</p><h1 id="OSI-标准"><a href="#OSI-标准" class="headerlink" title="OSI 标准"></a>OSI 标准</h1><p>只要遵循 OSI 标准，一个系统就可以和位于世界上任何地方的 、也遵循这同一标准的其他任何系统进行通信。</p><p>在市场化方面 OSI 却失败了。</p><ul><li>OSI 的专家们在完成 OSI 标准时没有商业驱动力；</li><li>OSI 的协议实现起来过分复杂，且运行效率很低；</li><li>OSI 标准的制定周期太长，因而使得按 OSI 标准生产的设备无法及 时进入市场；</li><li>OSI 的层次划分并也不太合理，有些功能在多个层次中重复出现。</li></ul><h1 id="网络分层体系结构"><a href="#网络分层体系结构" class="headerlink" title="网络分层体系结构"></a>网络分层体系结构</h1><p><img src="http://image.shuiyujie.com/2019-09-26-23-31-00.png" alt="ISO/OSI七层（参考）模型"></p><ul><li>网络中的任何一个系统都 是按照层次结构来组织的</li><li>同一网络中，任意两个端 系统必须具有相同的层次</li><li>每层使用其下层提供的服 务，并向其上层提供服务</li><li>通信只在对等层间进行（ 间接的、逻辑的、虚拟的 ），非对等层之间不能互 相“通信”</li><li>实际的物理通信只在最底 层完成</li><li>Pn：第n层协议，即第 n 层对等实体间通信时必须 遵循的规则或约定</li></ul><p>OSI 七层模型的作用：</p><ul><li>应用层：提供应用程序运行的环境、负责管理和执行应用程序</li><li>表示层：数据传输前，对数据进行格式化、加密和压缩的规则</li><li>会话层：解除或建立对话双方的联系</li><li>传输层：<ol><li>传输层可以提供在不同系统之间的进程间数据交互的可靠服务，在网络内两个实体之间建立端到端的通信信道，用来传输信息或报文分组，本层提供两端点可靠、透明的数据传输</li><li>可以为会话层提供与网络类型无关的可靠信息传输机制，对会话层屏蔽了下层网络操作细节</li></ol></li><li>网络层：负责建立、保持和终止中间设备的连接，同时负责通信子网内路径选择和拥挤控制</li><li>数据链路层：<ol><li>如何将数据组装成帧，帧是数据链路层基本的传输单位</li><li>如何处理数据在传输过程中出现的差错</li><li>如何调节发送速率使之与接收方匹配</li><li>在两个网络实体之间提供数据链路的建立、维持和释放管理</li></ol></li><li>物理层：<ul><li>物理层包括设备之间物理接口和用户设备与网络终端设备之间的传输规则</li><li>物理层有四个重要的特性：<ul><li>机械特性：规定了物理连接时对插头和插座的几何尺寸、插针或插孔芯数及排列方式</li><li>电气特性：规定了信号状态的电压、电流的识别，最大传输速率等</li><li>功能特性：规定了接口信号的来源、作用及与其他信号之间的关系</li><li>过程特性：规定了使用交换电路进行数据交换的控制步骤，这些控制步骤应用便利比特流出阿叔得以顺利完成</li></ul></li></ul></li></ul><h1 id="OSI七层模型的使用"><a href="#OSI七层模型的使用" class="headerlink" title="OSI七层模型的使用"></a>OSI七层模型的使用</h1><p><img src="http://image.shuiyujie.com/2019-10-01-10-49-25.png" alt="OSI七层模型的使用"></p>]]></content>
      
      
      <categories>
          
          <category> computer science </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
            <tag> 通信协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通信协议的概念</title>
      <link href="/post/92ea9430.html"/>
      <url>/post/92ea9430.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.shuiyujie.com/2019-09-26-22-56-12.png" alt="通信协议经典例子"></p><p>占据两个山顶的蓝军与驻扎在这山谷的白军作战。力量对比是：一个山顶上的蓝军打不过白军，但两个山顶的蓝军协同作战就可战胜白军 。一个山顶上的蓝军拟于次日正午向白军发起攻击。于是发送电文给 另一山顶上的友军。但通信线路很不好，电文出错的可能性很大。因此要求收到电文的友军必须发送确认电文。但确认电文也可能出错。 试问能否设计出一种协议，使得蓝军能实现协同作战因而一定(即100 %)取得胜利？</p><a id="more"></a><p>这样无限循环下去，两边的蓝军都始终无法确认自己最后发出的电文对方是否已经收到。没有一种协议能够蓝军能 100% 获胜。</p><p>这个例子告诉我们，看似非常简单的协议，设计起来要考虑的问题还是比较多的。</p><h1 id="网络协议的比喻"><a href="#网络协议的比喻" class="headerlink" title="网络协议的比喻"></a>网络协议的比喻</h1><p>网络协议是比较抽象的概念，这里将其余军营中的职级对比着思考。小时候我爱玩军旗，军旗里面有军长、师长、旅长、团长、营长、连长、排长。</p><p><strong>Q: 为什么军营里面要分出这么多级别，也相当于网络中要分出这么多层？</strong></p><p>其实原因很直接，<strong>复杂的系统都要分层</strong>。军营是一个复杂的系统，不分层没法打仗；计算机的世界分层的思想无时不刻都在提现。所以，复杂的系统都要分层，计算机网络是一个复杂的结构，它需要分层。</p><p><strong>Q: 那么军营中的人是怎么沟通的？也相当于网络是怎么通信的？</strong></p><p>一般是这样的：</p><ul><li>军长和军长商量着办，也就是对等实体的相互通信；相当于网络中同一层之间通信</li><li>下一级为上一级服务的，比如说排长为连长服务，连长为营长服务；相当于网络中的下一层为上一层服务</li><li>军长和师长在哪儿商量军情，参谋部啊，参谋部就相当于网络中的 SPI（访问点）</li></ul><h1 id="网络协议的概念"><a href="#网络协议的概念" class="headerlink" title="网络协议的概念"></a>网络协议的概念</h1><ul><li>计算机网络协议<ul><li>负责在网络上建立通信通道和控制通过通道的信息流的规则</li><li>协议依赖于网络体系结构，由硬件和软件协同实现</li></ul></li></ul><p>计算机网络协议的组成</p><table><thead><tr><th>组成</th><th>说明</th><th>类比</th></tr></thead><tbody><tr><td>语法</td><td>用于确定协议元素的格式，即数据与控制信息的结构和格式</td><td>类似于主谓宾、定状补，按照一个规章来沟通</td></tr><tr><td>语义</td><td>用于确定协议元素的类型，即规定了通信双方需要发出何种控制信息，完成何种动作，以及做出何种应答</td><td>满足语法的条件下，说出来的话要有含义，不是疯言疯语</td></tr><tr><td>定时</td><td>用于确定通信速度的匹配和时序，即对事件实现顺序的详细说明</td><td>说话不能太快，也不能太难，这样别人才能听得清楚</td></tr></tbody></table><ul><li><p>协议必须将各种不利的条件事先都估计到，而不能假定一切情 况都是很理想和很顺利的。</p></li><li><p>必须非常仔细地检查所设计协议能否应付所有的不利情况。</p><ul><li>应当注意：事实上难免有极个别的不利情况在设计协议时并没有预计 到。在出现这种情况时，协议就会失败。因此实际上协议往往只能应付绝大多数的不利情况。</li></ul></li><li><p>协议的开发是一个很复杂的过程。这里涉及到：考虑数据通信 时的各种利弊条件、考虑数据在通信线路上传输的形式，并且 不能与现有的协议互相冲突、考虑协议不能过分冗余、协议不 能不安全，需要强加密，考虑硬件是否能够实现，考虑编程过 程中有哪些漏洞存在，是否适应现今的各种协议……</p></li><li><p>1974年，美国IBM公司宣布它研制的系统网络体系结构 SNA.DEC公司研制了他的数据网络体系结构DNA。俩种体系互相不兼容.不能通信.问题日益严重。新的结构开发千钧一发</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> computer science </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全球公共 DNS 解析服务推荐</title>
      <link href="/post/142fbc59.html"/>
      <url>/post/142fbc59.html</url>
      
        <content type="html"><![CDATA[<p>DNS （Domain Name System 的缩写）的作用非常简单，就是根据域名查出IP地址，你可以把它想象成一本巨大的电话本。原理可见下图：</p><p><img src="http://image.shuiyujie.com/2019-09-23-00-46-54.png" alt="DNS"></p><p>今天就给大家推荐一些优秀的 DNS 解析服务，方便在不同的场景中使用，<strong>解决无法上网的问题和起到加速 / 防劫持的作用</strong> 。?</p><p>以下列表中包含符号 「<strong>★</strong>」 的 DNS 服务较为优质。</p><blockquote><p><a href="https://medium.com/censorship/public-dns-servers-ip-collect-66beb622aea8" target="_blank" rel="noopener">https://medium.com/censorship/public-dns-servers-ip-collect-66beb622aea8</a></p></blockquote><a id="more"></a><h1 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h1><p>同一个 DNS 服务器在不同国家不同地区的表现并不完全相同，解析速度、响应时间等都有所区别，所以建议大家多多对比。</p><p><strong>★ DNSPod Public DNS+</strong></p><p>Public DNS+ 是属于 腾讯云旗下的公共 DNS 服务。拥有 80 多条国内线路和 4 条海外线路，有 BGP Anycast 技术，也是国内首家支持谷歌 ECS (edns-client-subnet) 协议的公共 DNS 解析服务。它只使用一个 IP，但有三地集群容灾和秒级自动故障切换，在国内大多数地方的测速数据都非常好，值得推荐。</p><blockquote><p>IPv4 地址</p><p>首选：119.29.29.29</p></blockquote><p><strong>★ AliDNS 阿里公共 DNS 解析服务</strong></p><p>阿里公共 DNS 是 阿里云 推出的免费 DNS 递归解析系统，宣称全球数百台服务器组成的集群，拥有充足的带宽资源，目标是成为国内互联网基础设施的组成部分，支持 BGP Anycast 以及 ECS 技术。</p><blockquote><p>IPv4 地址</p><p>首选：223.5.5.5</p><p>备用：223.6.6.6</p></blockquote><p><strong>★ 114 DNS</strong></p><p><strong>114 DNS</strong> 在国内的用户量相当巨大，其 DNS 解析成功率高，与 ISP 的 DNS 相比，能访问更多的国内外网站；号称纯净、无劫持、无需再忍受被强插广告或粗俗网站之痛苦；114DNS 做得比较早，有一定的技术积累，稳定性不错，尽管速度比前两者差一点点，但也都能让人满意。它还有一个特色，就是根据不同用途可以选择不同的 DNS 组。推荐，笔者正在是使用。</p><blockquote><p>常规公共 DNS (干净无劫持)</p><p>首选：114.114.114.114 </p><p>备选：114.114.115.115</p><p>拦截钓鱼病毒木马网站 (保护上网安全)</p><p>首选：114.114.114.119</p><p>备用：114.114.115.119</p><p>拦截色情网站 (保护儿童)</p><p>首选：114.114.114.110</p><p>备用：114.114.115.110</p></blockquote><p><strong>★ 百度 BaiduDNS</strong></p><p>百度 DNS 公共解析服务，支持 ipv4 和 ipv6。作为中国最大的搜索引擎，百度拥有一流的基础设施和强大技术实力，国内速度相当快！该服务快速稳定无劫持，智能拦截恶意网站，支持 BGP Anycast 和 ECS 技术。</p><blockquote><p>IPv4 地址：180.76.76.76</p><p>IPv6 地址：2400:da00::6666</p></blockquote><p><strong>360 DNS 派 （DNSpai Public DNS）</strong></p><p>DNS 派是由 360 出品的免费公众 DNS 解析服务。它可以让网上冲浪更加稳定、快速、安全；为家庭拦截钓鱼网站，过滤非法网站，建立一个绿色健康的网上环境；为域名拼写自动纠错等。</p><blockquote><p>首选（电信 / 移动 / 铁通）：101.226.4.6</p><p>备选（电信 / 移动 / 铁通）：218.30.118.6</p><p>首选（联通）：123.125.81.6</p><p>备选（联通）：140.207.198.6</p></blockquote><p><strong>CNNIC sDNS</strong></p><p>sDNS (SecureDNS，简称 sDNS) 是由中国互联网络信息中心 CNNIC 与国内外电信运营商合作推出的免费公共云解析服务，旨在为用户提供高速、安全、智能的上网接入解析服务。sDNS 递归云解析服务采用 IP Anycast+BGP 技术跨区域、跨运营商的分布式异构部署，比运营商提供的 DNS 更快更稳定。</p><blockquote><p>IPv4 地址</p><p>首选：1.2.4.8</p><p>备用：210.2.4.8</p></blockquote><p><strong>OneDNS</strong></p><p>OneDNS 是一个安全、快速、免费的小众 DNS 服务。它能屏蔽恶意网站、摆脱无良 ISP 的 DNS 污染与劫持。同时横跨南北的高速线路加速您的网络连接。</p><blockquote><p>IPv4 地址</p><p>首选：117.50.11.11</p><p>备用：117.50.22.22</p></blockquote><h1 id="国外"><a href="#国外" class="headerlink" title="国外"></a>国外</h1><p>顾名思义，国外的 DNS 当然是适合海外用户使用咯。而对于国内用户来说，尽管这些 DNS 服务器在国内访问速度不算快，但作用也不少，比如买了国外的 VPS 来搭建番 · 羽 · 土 · 啬相关的应用时，可以配置它使用国外的 DNS 等等。</p><p><strong>★ Google Public DNS (8.8.8.8)</strong></p><p>来自 Google 提供的免费全球公共 DNS 服务，主要为了改进网络浏览速度、改善网络用户的浏览体验。这个基本上不用多做什么介绍了，可能它也是目前全球范围内使用量最大的公共 DNS 了，老牌、稳定、技术强劲。</p><blockquote><p>IPv4 地址</p><p>首选：8.8.8.8</p><p>备用：8.8.4.4</p><p>IPv6 地址</p><p>首选：2001:4860:4860::8888</p><p>备用：2001:4860:4860::8844</p></blockquote><p><strong>★ CloudFlare DNS (1.1.1.1)</strong></p><p>CloudFlare DNS 是号称全球最快的 DNS 服务 (当然天朝不算在全球范围内&gt;_&lt;)， CloudFlare 是全球最大的 CDN / DDOS 防护服务提供商之一 (在国内与百度云加速合作)，其遍布全球的基础设施资源极其丰富，资金和技术实力相当雄厚。在国外实测速度相当强劲，目前我已将海外的 VPS 全部换到此 DNS，解析速度非常快，相当值得推荐！</p><blockquote><p>IPv4 地址</p><p>首选：1.1.1.1</p><p>备用：1.0.0.1</p><p>IPv6 地址：</p><p>首选：2606:4700:4700::1111</p><p>备用：2606:4700:4700::1001</p></blockquote><p><strong>IBM Quad9 (9.9.9.9)</strong></p><p>IBM 、Global Cyber Alliance 和 Packet Clearing House 合作推出的免费 Quad9 公共 DNS 服务 (9.9.9.9)，主打安全，它会智能屏蔽恶意网址、僵尸网络、钓鱼攻击和其它恶意主机相关联的域名，而且更注重隐私保护。对安全有需求的朋友可以使用这组 DNS。</p><blockquote><p>IPv4 地址</p><p>首选：9.9.9.9</p><p>备用：149.112.112.112</p><p>IPv6 地址</p><p>首选：2620:fe::fe</p><p>备用：2620:fe::9</p></blockquote><p><strong>Cisco OpenDNS</strong></p><p>OpenDNS 是一个老牌的免费公共 DNS 提供商，后来被 Cisco (思科) 全资收购。</p><blockquote><p>IPv4 地址</p><p>首选：208.67.222.222</p><p>备用：208.67.220.220</p><p>IPv6 地址</p><p>首选：2620:0:ccc::2</p><p>备用：2620:0:ccd::2</p></blockquote><p><strong>Hurricane Electric Public DNS （HE）</strong></p><blockquote><p>IPv4 地址</p><p>首选：74.82.42.42</p><p>备用：66.220.18.42</p><p>IPv6 地址</p><p>首选：2001:470:20::2</p><p>备用：2001:470:0:9d::2</p></blockquote><p><strong>科摩多 Comodo SecureDNS</strong></p><blockquote><p>IPv4 地址</p><p>首选：8.26.56.26</p><p>备用：8.20.247.20</p></blockquote><p><strong>Verisign Public DNS</strong></p><blockquote><p>IPv4 地址</p><p>首选：64.6.64.6</p><p>备用：64.6.65.6</p><p>IPv6 地址</p><p>首选：2620:74:1b::1:1</p><p>备用：2620:74:1c::2:2</p></blockquote><p><strong>Neustar Recursive DNS</strong></p><blockquote><p>IPv4 地址</p><p>首选：156.154.70.1</p><p>备用：156.154.71.1</p><p>IPv6 地址</p><p>首选：2610:a1:1018::1</p><p>备用：2610:a1:1019::1</p></blockquote><p><strong>ORACLE Dyn Public DNS</strong></p><blockquote><p>IPv4 地址</p><p>首选：216.146.36.36</p><p>备用：216.146.35.35</p></blockquote><p><strong>Level3 Public DNS</strong></p><blockquote><p>IPv4 地址</p><p>首选：209.244.0.3</p><p>备用：209.244.0.4</p></blockquote><p><strong>Alternate DNS</strong></p><blockquote><p>IPv4 地址</p><p>首选：23.253.163.53</p><p>备用：198.101.242.72</p></blockquote><p><strong>香港</strong></p><p><strong>香港宽频 / HKBN</strong></p><blockquote><p>IPv4 地址</p><p>首选：203.80.96.10</p></blockquote><p><strong>和记环球电讯 DNS</strong></p><blockquote><p>IPv4 地址</p><p>首选：202.45.84.58</p><p>备用：202.45.84.59</p></blockquote><p><strong>Pacific SuperNet DNS</strong></p><blockquote><p>IPv4 地址</p><p>首选：202.14.67.4</p><p>备用：202.14.67.14</p></blockquote><p><strong>台湾</strong></p><p><strong>中华电信 / HiNet</strong></p><blockquote><p>IPv4 地址</p><p>首选：168.95.1.1</p><p>备用：168.95.192.1</p></blockquote><blockquote><p>IPv6 地址</p><p>首选：2001:b000:168::1</p><p>备用：2001:b000:168::2</p></blockquote><p><strong>数位联合电信 / Seednet</strong></p><blockquote><p>IPv4 地址</p><p>首选：139.175.252.16</p><p>备用：139.175.55.244</p></blockquote><p><strong>台湾网路资讯 / TWNIC Quad101 Public DNS</strong></p><blockquote><p>IPv4 地址</p><p>首选：101.101.101.101</p><p>备用：101.102.103.104</p><p>IPv6 地址</p><p>首选：2001:de4::101</p><p>备用：2001:de4::102</p></blockquote><p><strong>韩国</strong></p><p><strong>KT olleh</strong></p><blockquote><p>IPv4 地址：</p><p>首选：168.126.63.1</p><p>备用：168.126.63.2</p></blockquote><p><strong>SK Broadband</strong></p><blockquote><p>首选：210.220.163.82</p><p>备用：219.250.36.130</p></blockquote><p><strong>LG U+</strong></p><blockquote><p>首选：164.124.101.2</p><p>备用：203.248.252.2</p><p>首选：164.124.107.9</p><p>备用：203.248.242.2</p></blockquote><p><strong>其他国家</strong></p><p><strong>俄罗斯 Yandex Public DNS</strong></p><blockquote><p>IPv4 地址</p><p>首选：77.88.8.8</p><p>备用：77.88.8.1</p><p>IPv6 地址</p><p>首选：2a02:6b8::feed:0ff</p><p>备用：2a02:6b8:0:1::feed:0ff</p></blockquote><p><strong>俄罗斯 SafeDNS</strong></p><blockquote><p>IPv4 地址</p><p>首选：195.46.39.39</p><p>备用：195.46.39.40</p></blockquote><p><strong>德国 DNS.WATCH Public DNS</strong></p><blockquote><p>IPv4 地址</p><p>首选：84.200.69.80</p><p>备用：84.200.70.40</p><p>IPv6 地址</p><p>首选：2001:1608:10:25::1c04:b12f</p><p>备用：2001:1608:10:25::9249:d69b</p></blockquote><p><strong>瑞士 xiala.net Public DNS</strong></p><blockquote><p>IPv4 地址</p><p>首选：77.109.148.136</p><p>备用：77.109.148.137</p><p>IPv6 地址</p><p>首选：2001:1620:2078:136::</p><p>备用：2001:1620:2078:137::</p></blockquote><p><strong>丹麦 UncensoredDNS</strong></p><blockquote><p>IPv4 地址</p><p>首选：91.239.100.100</p><p>备用：89.233.43.71</p><p>IPv6 地址</p><p>首选：2001:67c:28a4::</p><p>备用：2a01:3a0:53:53::</p></blockquote><p><strong>荷兰 Freenom World Public DNS</strong></p><blockquote><p>IPv4 地址</p><p>首选：80.80.80.80</p><p>备用：80.80.81.81</p></blockquote><p><strong>写在后面</strong></p><p>你可以在路由器上设置公共 DNS，这将应用到你全部的设备。也可以根据需要只在某台电脑、手机上独立进行设置。Win、macOS、Linux 等系统的配置方法可以很容易搜索得到。</p><p>而且不仅仅是电脑和手机，像 XBox、PS4 等游戏机或者任何网络设备，基本都可以设置 DNS 的。如果你玩游戏、下载游戏速度太慢太卡，也不妨试试更换一个 DNS 看看效果。</p>]]></content>
      
      
      <categories>
          
          <category> computer science </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
            <tag> dns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql版本升级</title>
      <link href="/post/813d855e.html"/>
      <url>/post/813d855e.html</url>
      
        <content type="html"><![CDATA[<ul><li>MySQL 升级要考虑什么？</li><li>如何进行升级？</li></ul><a id="more"></a><h1 id="MySQL-升级要考虑什么？"><a href="#MySQL-升级要考虑什么？" class="headerlink" title="MySQL 升级要考虑什么？"></a>MySQL 升级要考虑什么？</h1><blockquote><p>不能为了升级而升级，要有足够的理由。</p></blockquote><ul><li>在对 MySQL 进行升级前要考虑什么？<ul><li>升级可以给业务带来的益处<ul><li>是否可以解决业务上某一方面的痛点</li><li>是否可以解决运维上某一方面的痛点</li></ul></li><li>升级可能给业务带来的影响<ul><li>对原业务程序的支持是否有影响</li><li>对原业务程序的性能是否有影响</li></ul></li><li>数据库升级方案的制定<ul><li>评估受影响的业务系统</li><li>升级的详细步骤</li><li>升级后的数据库环境检查</li><li>升级后的业务检查</li></ul></li><li>升级失败的回滚方案<ul><li>升级失败回滚的步骤</li><li>回滚后的数据库环境检查</li><li>回滚后的业务检查</li></ul></li></ul></li></ul><h1 id="如何进行升级？"><a href="#如何进行升级？" class="headerlink" title="如何进行升级？"></a>如何进行升级？</h1><ul><li>MySQL 升级步骤？<ul><li>对待升级数据库进行备份</li><li>升级Slave服务器版本(关闭老版本，启动新版本)</li><li>手动进行主从切换</li><li>升级MASTER服务器版本</li><li>升级完成后进行业务检查</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql不同发行版的区别</title>
      <link href="/post/df0ea61.html"/>
      <url>/post/df0ea61.html</url>
      
        <content type="html"><![CDATA[<ul><li>MySQL 常见的发行版本<ul><li>MySQL 官方版本（社区版、企业版）</li><li>Percona MySQL：在 MySQL 官方发行版上进行二次开发</li><li>MariaDB</li></ul></li><li>各个发行版本之间的区别和优缺点</li></ul><table><thead><tr><th></th><th>MySQL</th><th>Percona MySQL</th><th>MariaDB</th></tr></thead><tbody><tr><td>服务器特性</td><td>开源</td><td>开源</td><td>开源</td></tr><tr><td></td><td>支持分区表</td><td>支持分区表</td><td>支持分区表</td></tr><tr><td></td><td>InnoDB</td><td>XtraDB</td><td>XtraDB</td></tr><tr><td></td><td>企业版监控工具<br>社区版不提供</td><td>Percon Monitor 工具</td><td>Monyog</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>高可用特性</td><td>基于日志点复制</td><td>基于日志点复制</td><td>基于日志点复制</td></tr><tr><td></td><td>基于 Gtid 复制</td><td>基于 Gtid 复制</td><td>基于 Gtid 复制，但 Gtid 同 MySQL 不兼容</td></tr><tr><td></td><td>MGR</td><td>MGR &amp; PXC</td><td>Galera Cluster</td></tr><tr><td></td><td>MySQL Router</td><td>Proxy SQL</td><td>MaxScale</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>安全特性</td><td>企业级防火墙</td><td>ProxySQL FireWall</td><td>MaxScale FireWall</td></tr><tr><td></td><td>企业版用户审计</td><td>审计日志</td><td>审计日志</td></tr><tr><td></td><td>用户密码生命周期</td><td>用户密码生命周期</td><td></td></tr><tr><td></td><td>sha256_password<br>caching_sha_password</td><td>sha256_password<br>caching_sha_pass_word</td><td>ed25519<br>sha256_password</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>开发及管理</td><td>窗口函数(8.0)</td><td>窗口函数(8.0)</td><td>窗口函数(10.2)</td></tr><tr><td></td><td>-</td><td>-</td><td>支持基于日志回滚</td></tr><tr><td></td><td>-</td><td>-</td><td>支持记在表中记录修改</td></tr><tr><td></td><td>Super read_only</td><td>Super read_only</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识 Docker</title>
      <link href="/post/2a772a2b.html"/>
      <url>/post/2a772a2b.html</url>
      
        <content type="html"><![CDATA[<p>Docker 是一种虚拟化容器技术。他主要解决了配置环境问题。软件部署环节的第一步就是配置环境，使软件能够在机器上流畅地运行。常常听到的一句话是：“我的电脑上能运行啊。”可是换到生产环境就不行了，又需要重新配置环境。最好的解决方式是能够将原始环境的配置一模一样地复制一份，大家就能够时刻保持在相同的环境下运行软件。</p><a id="more"></a><h1 id="认识-Docker"><a href="#认识-Docker" class="headerlink" title="认识 Docker"></a>认识 Docker</h1><p>Docker 是一种虚拟化容器技术。当我听到虚拟化容器最先想到的是虚拟机，docker 和虚拟机又有很大差别。</p><p>虚拟机可以在一种操作系统里面运行另一种操作系统，看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件可以随时删除。通过虚拟机我们可以在硬件上运行多个不同的操作系统，但是他有几个缺点：</p><ol><li>资源占用多:虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了;</li><li>冗余步骤多:虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录;</li><li>启动慢：启动操作系统需要多久，启动虚拟机就需要多久。</li></ol><p>Docker 最初基于 Linux 中的一种容器轻量级虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。LXC 则基于 Linux 内核调用 CGroups 和 Namespaces，同时提供用户态 API 接口。用户则可以通过 LXC 提供的资源限制和隔离功能，创建一套完整并且相互隔离的虚拟应用运行环境。</p><p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。所以 Docker 是进程级别的管理，相对于虚拟机他就有以下几个优点：</p><ol><li>启动快:容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。</li><li>资源占用少:容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。</li><li>体积小:容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。</li></ol><hr><h1 id="Docker-的历史"><a href="#Docker-的历史" class="headerlink" title="Docker 的历史"></a>Docker 的历史</h1><p>Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目， 它是基于 dotCloud 公司多年云服务技术的一次革新，并于 2013 年 3 月以 Apache 2.0 授权 协议开源，主要项目代码在 GitHub 上进行维护。Docker 项目后来还加入了 Linux 基金会， 并成立推动 开放容器联盟（OCI）。</p><p>Docker 自开源后受到广泛的关注和讨论，至今其 GitHub 项目已经超过 4 万 6 千个星标和一 万多个 fork。甚至由于 Docker 项目的火爆，在 2013 年底，dotCloud 公司决定改名为 Docker。Docker 最初是在 Ubuntu 12.04 上开发实现的；Red Hat 则从 RHEL 6.5 开始对 Docker 进行支持；Google 也在其 PaaS 产品中广泛应用 Docker。</p><p>Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容 器。最初实现是基于 LXC，从 0.7 版本以后开始去除 LXC，转而使用自行开发的 libcontainer，从 1.11 开始，则进一步演进为使用 runC 和 containerd。</p><hr><h1 id="Docker-的作用"><a href="#Docker-的作用" class="headerlink" title="Docker 的作用"></a>Docker 的作用</h1><p>Docker 带来了行业的变革。首先是解决了云平台之间标准规范不统一，无法相互兼容对接的问题，有了 Docker 屏蔽了硬件层的差异，提供了统一的用户应用层；其次推进了软件开发的流程，各个部门采用相同的数据镜像之后可以将精力进一步集中在产品本身；也简化了软件运行生命周期中软件的日志管理和监控管理，因为 Docker 拥有统一的数据规范和接口规范，不需要对每一款产品进行定制化开发。</p><p>具体来说 Docker 的作用归纳为以下几点：</p><ol><li><p>简化配置。将运行环境和配置放在代码中然后部署，同一个Docker的配置可以在不同的环境中使用，这样就降低了硬件要求和应用环境之间耦合度；</p></li><li><p>提供一次性的环境。通过作用一可以做到本地测试他人的软件、持续集成的时候提供单元测试和构建的环境；</p></li><li><p>代码流水线管理（Code Pipeline）。通过作用一，Docker给应用提供了一个从开发到上线均一致的环境，让代码的流水线变得简单不少；</p></li><li><p>快速部署。在虚拟机之前，引入新的硬件资源需要消耗几天的时间。虚拟化技术（Virtualization）将这个时间缩短到了分钟级别。Docker通过为进程创建一个容器而无需启动一个操作系统，将这个过程缩短到了秒级；</p></li><li><p>调试能力。Docker提供了很多的工具，包括可以为容器设置检查点、设置版本和查看两个容器之间的差别，这些特性可以帮助调试Bug；</p></li><li><p>隔离应用，组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构；</p></li><li><p>提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</p></li></ol><hr><h1 id="Docker-三个基本概念"><a href="#Docker-三个基本概念" class="headerlink" title="Docker 三个基本概念"></a>Docker 三个基本概念</h1><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>相比于传统的虚拟化中的 ISO 镜像，Docker 镜像要轻量化很多，<strong>它只是一个可定制的 rootfs。</strong>用户可以使用其他人创建的镜像，也可以通过 docker commit 这样的命令自己来创建镜像。</p><p>Docker 镜像是通过 Dockerfile 来创建，除了提供容器运行时所需的程序、库、资源、配置等文 件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><p>镜像基于联合文件系统的一种层式结构。<strong>镜像构建时，会一层层构建，前一层是后一层的基础。</strong>每一层构建完就不会再发生改变，后 一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除 前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看 到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>Docker 可以帮助我们构建和部署容器，只需要把应用程序或者服务打包放进容器即可，他们可以是 Web 服务器、数据库或者应用程序服务器等，docker 都用同样的方式将内容装载进容器中。我们就可以针对容器进行创建、启动、停止、删除、暂停等操作。</p><p>容器和镜像可以这样区别。<strong>镜像是 docker 生命周期中的构建和打包阶段，而容器则是启动和执行阶段。</strong>每个容器都包含一个软件镜像，而容器可以共享底层的只读镜像，通过写入自己特有的内容后添加新的镜像层，新增的镜像层和下层镜像一起又可以作为基础镜像被更上层的镜像使用。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来就好像是在一 个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安 全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p><p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p><p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>Docker Registry 用于存储和分发用户构建的镜像，可以分成公有私有两种。将镜像存储在仓库之中，就可以在其他服务器上使用这些镜像。</p><p>一个 Docker Registry 中可以包含多个仓库（ （ Tag ）；每个标签对应一个镜像。Repository）；每个仓库可以包含多个标签通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版 本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</p><h2 id="国外的仓库镜像"><a href="#国外的仓库镜像" class="headerlink" title="国外的仓库镜像"></a>国外的仓库镜像</h2><p><a href="https://hub.docker.com/" target="_blank" rel="noopener">官方、默认、高质量镜像</a></p><p><a href="https://quay.io/repository/" target="_blank" rel="noopener">CoreOS 的 Quay.io</a></p><p><a href="https://cloud.google.com/container-registry/" target="_blank" rel="noopener">Google 的镜像，Kubernetes 的镜像即此</a></p><h2 id="国内的仓库镜像"><a href="#国内的仓库镜像" class="headerlink" title="国内的仓库镜像"></a>国内的仓库镜像</h2><p><a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="noopener">阿里云加速器</a></p><p><a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">DaoCloud 加速器</a></p><p><a href="https://hub.tenxcloud.com/" target="_blank" rel="noopener">时速云镜像仓库</a></p><p><a href="https://c.163.com/#/m/library/" target="_blank" rel="noopener">网易镜像仓库</a></p><p><a href="https://hub.daocloud.io/" target="_blank" rel="noopener">DaoCloud 镜像市场</a></p><p><a href="https://cr.console.aliyun.com/#/imageList" target="_blank" rel="noopener">阿里云镜像库</a></p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/26772853/" target="_blank" rel="noopener">《Docker全攻略》</a><br><a href="https://book.douban.com/subject/26780404/" target="_blank" rel="noopener">《第一本Docker书》</a><br><a href="https://yeasy.gitbooks.io/docker_practice/" target="_blank" rel="noopener">《Docker技术入门与实战》</a><br><a href="https://book.douban.com/subject/26701218/" target="_blank" rel="noopener">《Docker进阶与实战》</a><br><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">Docker 入门教程</a><br><a href="http://dockone.io/article/126" target="_blank" rel="noopener">八个Docker的真实应用场景</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ 安装和使用</title>
      <link href="/post/29003c34.html"/>
      <url>/post/29003c34.html</url>
      
        <content type="html"><![CDATA[<p>RabbitMQ 是一个消息队列，主要是用来实现应用程序的异步和解耦，同时也能起到消息缓冲，消息分发的作用。本文介绍RabbitMQ 安装和使用。</p><a id="more"></a><p>RabbitMQ 是一个开源的<code>AMQP</code>实现，服务器端用<code>Erlang</code>语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。</p><p>可以把消息队列想象成邮局，你的笔友把信件投递到邮局，邮递员源源不断地进出邮局，把笔友的信送到你的手里。此时的笔友就是一个生产者（Product）,邮递员一次送信就是（Queue）,而你收信就像是消费者（Consumer）。</p><h2 id="AMQP"><a href="#AMQP" class="headerlink" title="AMQP"></a>AMQP</h2><p>AMQP（Advanced Message Queuing Protocol，高级消息队列协议）的原始用途只是为金融界提供一个可以彼此协作的消息协议，而现在的目标则是为通用消息队列架构提供通用构建工具。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向<strong>消息、队列、路由</strong>（包括点对点和发布/订阅）、可靠性、安全。</p><p>RabbitMQ 则是一个开源的 AMQP 实现。</p><h2 id="Rabbit-概念"><a href="#Rabbit-概念" class="headerlink" title="Rabbit 概念"></a>Rabbit 概念</h2><p>通常我们谈到队列服务, 会有三个概念： 发消息者、队列、收消息者，RabbitMQ 在这个基本概念之上, 多做了一层抽象, 在发消息者和 队列之间, 加入了交换器 (Exchange)。这样发消息者和队列就没有直接联系, 转而变成发消息者把消息给交换器, 交换器根据调度策略再把消息再给队列。</p><p>通过 <a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">RabbitMQ 官网</a> 的示例中看到 RabbitMQ 有六种模式。</p><p><img src="http://upload-images.jianshu.io/upload_images/2791079-4ea9ba91d680f1a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RabbitMQ 六种模式"></p><p>官网中有多种语言的实现，本文用 Java 来实现。采用 Springboot 集成 RabbitMQ。</p><hr><h1 id="CentOS-安装-RabbitMQ"><a href="#CentOS-安装-RabbitMQ" class="headerlink" title="CentOS 安装 RabbitMQ"></a>CentOS 安装 RabbitMQ</h1><h2 id="安装-Erlang、Elixir"><a href="#安装-Erlang、Elixir" class="headerlink" title="安装 Erlang、Elixir"></a>安装 Erlang、Elixir</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><blockquote><p>yum update</p><p>yum install epel-release</p><p>yum install gcc gcc-c++ glibc-devel make ncurses-devel openssl-devel autoconf java-1.8.0-openjdk-devel git wget wxBase.x86_64</p></blockquote><h3 id="安装-Erlang"><a href="#安装-Erlang" class="headerlink" title="安装 Erlang"></a>安装 Erlang</h3><blockquote><p>wget <a href="http://packages.erlang-solutions.com/erlang-solutions-1.0-1.noarch.rpm" target="_blank" rel="noopener">http://packages.erlang-solutions.com/erlang-solutions-1.0-1.noarch.rpm</a></p><p>rpm -Uvh erlang-solutions-1.0-1.noarch.rpm</p><p> yum update</p><p>yum install erlang</p></blockquote><p>验证是否安装成功，输入命令：<code>erl</code></p><h3 id="安装-Elixir"><a href="#安装-Elixir" class="headerlink" title="安装 Elixir"></a>安装 Elixir</h3><p>因为 EPEL 中的 Elixir 版本太老，所以下面是通过源码编译安装的过程：</p><blockquote><p>git clone <a href="https://github.com/elixir-lang/elixir.git" target="_blank" rel="noopener">https://github.com/elixir-lang/elixir.git</a></p><p>cd elixir/</p><p>make clean test</p><p>export PATH=”$PATH:/usr/local/elixir/bin”</p></blockquote><p>验证是否安装成功，输入命令：<code>iex</code></p><h2 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 RabbitMQ</h2><blockquote><p>wget <a href="https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.1/rabbitmq-server-3.6.1-1.noarch.rpm" target="_blank" rel="noopener">https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.1/rabbitmq-server-3.6.1-1.noarch.rpm</a></p><p>rpm –import <a href="https://www.rabbitmq.com/rabbitmq-signing-key-public.asc" target="_blank" rel="noopener">https://www.rabbitmq.com/rabbitmq-signing-key-public.asc</a></p><p>yum install rabbitmq-server-3.6.1-1.noarch.rpm</p></blockquote><h2 id="Rabitmq-管理"><a href="#Rabitmq-管理" class="headerlink" title="Rabitmq 管理"></a>Rabitmq 管理</h2><p>至此已经安装完成，下面介绍启动和自动开机启动命令和配置</p><p>启动：</p><blockquote><p>systemctl start rabbitmq-server</p></blockquote><p>开机自动启动：</p><blockquote><p>systemctl enable rabbitmq-server</p></blockquote><p>查看 rabbitmq-server 状态：</p><blockquote><p>rabbitmqctl status</p></blockquote><p>关闭：</p><blockquote><p>systemctl enable rabbitmq-server</p></blockquote><p>可以直接通过配置文件的访问进行管理，也可以通过Web的访问进行管理。</p><p>通过Web进行管理,开启 Web 管理:</p><blockquote><p>rabbitmq-plugins enable rabbitmq_management</p><p>chown -R rabbitmq:rabbitmq /var/lib/rabbitmq/</p></blockquote><p><em>注：先启动 RabbitMQ</em></p><p>访问：<code>http://192.168.2.223:15672/</code>，默认用户 guest ，密码 guest。</p><p>发现登录失败，由于账号guest具有所有的操作权限，并且又是默认账号，出于安全因素的考虑，guest用户只能通过localhost登陆使用。</p><p>我们新增一个用户：</p><blockquote><p>rabbitmqctl add_user admin  123456</p><p>rabbitmqctl set_user_tags admin administrator</p><p>rabbitmqctl set_permissions -p / admin “.<em>“ “.</em>“ “.*”</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/2791079-a0eac20af580be37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RabbitMQ 管理界面"></p><hr><h1 id="Springboot-集成-RabbitMQ"><a href="#Springboot-集成-RabbitMQ" class="headerlink" title="Springboot 集成 RabbitMQ"></a>Springboot 集成 RabbitMQ</h1><p>假设现在已经按照前面的步骤完成了 RabbitMQ 的安装，现在开始使用 Springboot 集成 RabbitMQ。</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>IDEA 先新建一个 maven 项目，在 pom 文件中添加相关依赖:</p><h3 id="pom-文件"><a href="#pom-文件" class="headerlink" title="pom 文件"></a>pom 文件</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.shuiyujie&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;pom&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;pom&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Spring Boot 启动父依赖 --&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.5.2.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- Spring Boot Test 依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- rabbitmq --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># rabbitmq 配置文件</span><br><span class="line">spring.rabbitmq.host=192.168.0.223</span><br><span class="line"># 默认端口</span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line">spring.rabbitmq.username=admin</span><br><span class="line">spring.rabbitmq.password=123456</span><br></pre></td></tr></table></figure><h2 id="“Hello-World”"><a href="#“Hello-World”" class="headerlink" title="“Hello World”"></a>“Hello World”</h2><p><img src="http://upload-images.jianshu.io/upload_images/2791079-16ad9e3ac29862a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HellowWorld.png"></p><p>现在我们的目标很简单就是创建一个生产者 P，和一个消费者 C，同时将 P 产生的消息放到队列中供 C 使用。</p><p><strong>Queue</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.amqp.core.Queue;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class RabbitConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue helloQueue() &#123;</span><br><span class="line">        return new Queue(&quot;hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HelloSender</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Controller</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        String context = <span class="hljs-string">"hello "</span> + <span class="hljs-keyword">new</span> Date();</span><br><span class="line">        System.out.println(<span class="hljs-string">"Sender : "</span> + context);</span><br><span class="line">        <span class="hljs-keyword">this</span>.rabbitTemplate.convertAndSend(<span class="hljs-string">"hello"</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HelloReceiver</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloReceiver</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@RabbitHandler</span></span><br><span class="line">    <span class="hljs-meta">@RabbitListener</span>(queues = <span class="hljs-string">"hello"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">(String hello)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"Receiver  : "</span> + hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="hljs-meta">@SpringBootTest</span>(classes = HelloApplication.class)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitmqApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> HelloSender helloSender;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Test</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        helloSender.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>成功接收到消息</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Receiver  : hello Thu Feb 01 22:21:39 CST 2018</span><br></pre></td></tr></table></figure><p><strong>注意：<code>HelloReceiver</code>的<code>@RabbitListener(queues = &quot;hello&quot;)</code>注解是方法级的，参照别的文章都是类级别的注解导致一直无法正常连接。</strong></p><h2 id="Work-Queues"><a href="#Work-Queues" class="headerlink" title="Work Queues"></a>Work Queues</h2><p><img src="http://upload-images.jianshu.io/upload_images/2791079-39907ff7eae4effb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Work Queues.png"></p><p><code>Work Queues</code> 模式在原来的基础上多增加了一个消费者。同理我们可以扩展三个、四个甚至更多的<code>consumer</code>。这样做的好处在于，当我们使用一个<code>consumer</code>的时候，当它收到一条消息进行处理的时候会发生阻塞。有多个<code>consumer</code>时，消息就可以分发给空闲的<code>consumer</code>进行处理。</p><p><strong>生产者</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Work 模式下的生产者</span></span><br><span class="line"><span class="hljs-comment"> * </span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shui</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2018-02-04</span></span><br><span class="line"><span class="hljs-comment"> **/</span></span><br><span class="line"><span class="hljs-meta">@Controller</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        String context = <span class="hljs-string">"work "</span>;</span><br><span class="line">        System.out.println(<span class="hljs-string">"Sender : "</span> + context + <span class="hljs-string">"*****"</span> + i);</span><br><span class="line">        <span class="hljs-keyword">this</span>.rabbitTemplate.convertAndSend(<span class="hljs-string">"work"</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Queue</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkConfig</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">workQueue</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">"work"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>两个消费者</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkReceicer1</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@RabbitHandler</span></span><br><span class="line">    <span class="hljs-meta">@RabbitListener</span>(queues = <span class="hljs-string">"work"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"Work Receiver1  : "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkReceicer2</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@RabbitHandler</span></span><br><span class="line">    <span class="hljs-meta">@RabbitListener</span>(queues = <span class="hljs-string">"work"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"Work Receiver2  : "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="hljs-meta">@SpringBootTest</span>(classes = Startup.class)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQDirectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> WorkSender workSender;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Test</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendWorkTest</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;</span><br><span class="line">            workSender.send(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Work Receiver1  : work </span><br><span class="line">Work Receiver2  : work </span><br><span class="line">Work Receiver2  : work </span><br><span class="line">Work Receiver1  : work </span><br><span class="line">Work Receiver2  : work </span><br><span class="line">Work Receiver1  : work </span><br><span class="line">Work Receiver2  : work </span><br><span class="line">Work Receiver1  : work </span><br><span class="line">Work Receiver1  : work </span><br><span class="line">Work Receiver2  : work </span><br><span class="line">Work Receiver2  : work </span><br><span class="line">Work Receiver1  : work </span><br><span class="line">Work Receiver2  : work </span><br><span class="line">Work Receiver1  : work </span><br><span class="line">Work Receiver1  : work </span><br><span class="line">Work Receiver2  : work </span><br><span class="line">Work Receiver1  : work </span><br><span class="line">Work Receiver2  : work </span><br><span class="line">Work Receiver2  : work </span><br><span class="line">Work Receiver1  : work</span><br></pre></td></tr></table></figure><p><em>发现消费得很平均，每个<code>consumer</code>处理一半的消息。</em></p><h2 id="public-subscribe"><a href="#public-subscribe" class="headerlink" title="public/subscribe"></a>public/subscribe</h2><p><img src="http://upload-images.jianshu.io/upload_images/2791079-4026a587dd2a63ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="public/subscribe.png"></p><p>从上面的两个例子我们看到<code>producer</code>产生的消息直接发送给<code>queue</code>，然后<code>queue</code>又直接将消息传给<code>consumer</code>。RabbitMQ 的亮点就在于改变了上面这种消息传递的方式，<code>producer</code>不会将消息直接传给<code>queue</code>而是传给<code>exchanges</code>再由<code>exchangers</code>传给<code>queue</code>。然而我们在前面的两个例子中并没有使用<code>exchanges</code>，那是因为 RabbitMQ 有默认的<code>exchanges</code>，只要我们传的参数是<code>&quot;&quot;</code>。在默认模式下，不需要将<code>exchanges</code>做任何绑定。除此之外<code>exchanges</code>有以下几种类型：</p><blockquote><ol><li>Direct：direct 类型的行为是”先匹配, 再投送”. 即在绑定时设定一个 routing_key, 消息的 routing_key 匹配时, 才会被交换器投送到绑定的队列中去.</li><li>Topic：按规则转发消息（最灵活）</li><li>Headers：设置header attribute参数类型的交换机</li><li>Fanout：转发消息到所有绑定队列</li></ol></blockquote><p><strong>Queue</strong></p><p>以下使用的是<code>Fanout Exchange</code>转发消息到所有绑定队列。这里要配置两个<code>queue</code>，并且配置<code>exchanges</code>，并把<code>queue</code>和<code>exchanges</code>绑定。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * public/subscribe 模式</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shui</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2018-02-04</span></span><br><span class="line"><span class="hljs-comment"> **/</span></span><br><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FanoutConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/************************************************************************</span></span><br><span class="line"><span class="hljs-comment">     * 新建队列 fanout.A 、fanout.B</span></span><br><span class="line"><span class="hljs-comment">************************************************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">AMessage</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">"fanout.A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">BMessage</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">"fanout.B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 建立一个交换机</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">FanoutExchange <span class="hljs-title">fanoutExchange</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FanoutExchange(<span class="hljs-string">"fanoutExchange"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/************************************************************************</span></span><br><span class="line"><span class="hljs-comment">     * 将 fanout.A 、 fanout.B 绑定到交换机 fanoutExchange 上</span></span><br><span class="line"><span class="hljs-comment">************************************************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">Binding <span class="hljs-title">bindingExchangeA</span><span class="hljs-params">(Queue AMessage, FanoutExchange fanoutExchange)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> BindingBuilder.bind(AMessage).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">Binding <span class="hljs-title">bindingExchangeB</span><span class="hljs-params">(Queue BMessage, FanoutExchange fanoutExchange)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> BindingBuilder.bind(BMessage).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>生产者</strong></p><p>在创建<code>producter</code>的时候，要将他和<code>exchanges</code>绑定。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Controller</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FanoutSender</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        String context = <span class="hljs-string">"hi, fanout msg "</span>;</span><br><span class="line">        System.out.println(<span class="hljs-string">"Sender : "</span> + context);</span><br><span class="line">        <span class="hljs-keyword">this</span>.rabbitTemplate.convertAndSend(<span class="hljs-string">"fanoutExchange"</span>,<span class="hljs-string">""</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>两个消费者</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FanoutReceiveA</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@RabbitHandler</span></span><br><span class="line">    <span class="hljs-meta">@RabbitListener</span>(queues = <span class="hljs-string">"fanout.A"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"fanout Receiver A  : "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FanoutReceiveB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@RabbitHandler</span></span><br><span class="line">    <span class="hljs-meta">@RabbitListener</span>(queues = <span class="hljs-string">"fanout.B"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"fanout Receiver B  : "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="hljs-meta">@SpringBootTest</span>(classes = Startup.class)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FanoutTest</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> FanoutSender fanoutSender;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Test</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFanoutSender</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        fanoutSender.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fanout Receiver B  : hi, fanout msg </span><br><span class="line">fanout Receiver A  : hi, fanout msg</span><br></pre></td></tr></table></figure><h2 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h2><p><img src="http://upload-images.jianshu.io/upload_images/2791079-a7a629c3ddd452a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="routing.png"></p><p>在前面的<code>Fanout</code>模式下，消息会直接<strong>广播</strong>给<code>queue</code>。如果我们想让<code>consumer</code>处理某些特定的消息，就要让他接收消息的队列中没有其他类型的消息，所以能不能让<code>queue</code>只接收某些消息，而不接收另一些消息呢？</p><p>RabbitMQ 中有一个 Routingkey 的概念。在队列与交换机的绑定过程中添加<code>Routingkey</code>表示<code>queue</code>接收的消息需要带有<code>Routingkey</code>。</p><h2 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h2><p><img src="http://upload-images.jianshu.io/upload_images/2791079-e6aa0a7f74c58d9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="topic.png"></p><p><code>Topic</code>模式和<code>Direct</code>模式类似，<code>Direct</code>模式需要<code>Routingkey</code>完全匹配而<code>Topic</code>模式更加灵活，可以通过通配符进行配置。</p><blockquote><ol><li>在这种交换机模式下：路由键必须是一串字符，用句号（.） 隔开，例如：topic.A</li><li>路由模式必须包含一个星号<code>*</code>，主要用于匹配路由键指定位置的一个单词，比如说，一个路由模式是这样子：agreements..b.*，那么就只能匹配路由键是这样子的：第一个单词是 agreements，第四个单词是 b。 井号（#）就表示相当于一个或者多个单词；例如一个匹配模式是agreements.eu.berlin.#，那么，以agreements.eu.berlin开头的路由键都是可以的。</li></ol></blockquote><p><strong>Queue and exchange</strong></p><p>另个队列分别为 topic.A,topic.B,将他们绑定到 topicExchange 上。并且设置了规则，topic.A 必须是完全匹配的也就是<code>Direct</code>模式，topic.B 使用<code>Topic</code>模式，只要是<code>Rouctingkey</code>为 topic 开头的都可以接收。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TopicConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String message = <span class="hljs-string">"topic.A"</span>;</span><br><span class="line">    <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String messages = <span class="hljs-string">"topic.B"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queueMessage</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(TopicConfig.message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queueMessages</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(TopicConfig.messages);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">TopicExchange <span class="hljs-title">exchange</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TopicExchange(<span class="hljs-string">"topicExchange"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">Binding <span class="hljs-title">bindingExchangeMessage</span><span class="hljs-params">(Queue queueMessage, TopicExchange exchange)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueMessage).to(exchange).with(<span class="hljs-string">"topic.message"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">Binding <span class="hljs-title">bindingExchangeMessages</span><span class="hljs-params">(Queue queueMessages, TopicExchange exchange)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueMessages).to(exchange).with(<span class="hljs-string">"topic.#"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>生产者</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Controller</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TopicSend</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        String context = <span class="hljs-string">"hi, i am message 0"</span>;</span><br><span class="line">        System.out.println(<span class="hljs-string">"Sender : "</span> + context);</span><br><span class="line">        <span class="hljs-keyword">this</span>.rabbitTemplate.convertAndSend(<span class="hljs-string">"topicExchange"</span>, <span class="hljs-string">"topic.1"</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send1</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        String context = <span class="hljs-string">"hi, i am message 1"</span>;</span><br><span class="line">        System.out.println(<span class="hljs-string">"Sender : "</span> + context);</span><br><span class="line">        <span class="hljs-keyword">this</span>.rabbitTemplate.convertAndSend(<span class="hljs-string">"topicExchange"</span>, <span class="hljs-string">"topic.message"</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send2</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        String context = <span class="hljs-string">"hi, i am messages 2"</span>;</span><br><span class="line">        System.out.println(<span class="hljs-string">"Sender : "</span> + context);</span><br><span class="line">        <span class="hljs-keyword">this</span>.rabbitTemplate.convertAndSend(<span class="hljs-string">"topicExchange"</span>, <span class="hljs-string">"topic.messages"</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消费者</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-meta">@RabbitListener</span>(queues = <span class="hljs-string">"topic.A"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TopicReceiver</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@RabbitHandler</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"Topic Receiver1  : "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-meta">@RabbitListener</span>(queues = <span class="hljs-string">"topic.B"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TopicReceiver2</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@RabbitHandler</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"Topic Receiver2  : "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="hljs-meta">@SpringBootTest</span>(classes = Startup.class)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TopicTest</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> TopicSend sender;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Test</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">topic</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        sender.send();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Test</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">topic1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        sender.send1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Test</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">topic2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        sender.send2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Sender : hi, i am message 1</span><br><span class="line">Sender : hi, i am messages 2</span><br><span class="line">Sender : hi, i am message 0</span><br><span class="line">Topic Receiver1  : hi, i am message 1</span><br><span class="line">Topic Receiver2  : hi, i am message 1</span><br><span class="line">Topic Receiver2  : hi, i am messages 2</span><br><span class="line">Topic Receiver2  : hi, i am message 0</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>掌握 RabbitMQ 的核心在于如何使用好<code>exchanges</code>，它有默认模式<code>&quot;&quot;</code> , <code>direct</code> , <code>topic</code> , <code>headers</code> 和 <code>fanout</code> 这几种模式。</p><p>通过 RabbitMQ 的 <code>routingkey</code> 可以过滤交换机传递给队列的消息。<code>fanout</code> 模式下，需要队列和交换机的<code>routingkey</code>完全匹配，而在<code>topic</code>模式下，可以通过通配符进行配置，变得更加灵活。</p><h2 id="安装参考："><a href="#安装参考：" class="headerlink" title="安装参考："></a>安装参考：</h2><p><a href="https://www.unixmen.com/install-rabbitmq-server-centos-7/" target="_blank" rel="noopener">Install RabbitMQ server in CentOS 7</a></p><p><a href="http://www.cnblogs.com/xueweihan/p/7099641.html" target="_blank" rel="noopener">CentOS 7 下安装 RabbitMQ</a></p><p><a href="https://www.unixmen.com/install-erlang-elixir-centos-7/" target="_blank" rel="noopener">Install Erlang and Elixir in CentOS 7</a></p><p><a href="https://my.oschina.net/hncscwc/blog/262246" target="_blank" rel="noopener">rabbitmq——用户管理</a></p><h2 id="Springboot-集成-RabbitMQ-参考"><a href="#Springboot-集成-RabbitMQ-参考" class="headerlink" title="Springboot 集成 RabbitMQ 参考"></a>Springboot 集成 RabbitMQ 参考</h2><p><a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">RabbitMQ Tutorials</a></p><p><a href="https://juejin.im/post/59f194e06fb9a0451329ec53" target="_blank" rel="noopener">Spring Boot 中使用 RabbitMQ</a></p><p><a href="https://www.cnblogs.com/xmzJava/p/8036591.html" target="_blank" rel="noopener">springboot rabbitmq整合</a></p><p><a href="https://zhuanlan.zhihu.com/p/25069044?refer=dreawer" target="_blank" rel="noopener">Spring Boot系列(八)：RabbitMQ详解</a></p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Protobuf 编译 Java</title>
      <link href="/post/7e6ba807.html"/>
      <url>/post/7e6ba807.html</url>
      
        <content type="html"><![CDATA[<p>Google Protocol Buffers 简称 Protobuf，它提供了一种灵活、高效、自动序列化结构数据的机制，可以联想 XML，但是比 XML 更小、更快、更简单。仅需要自定义一次你所需的数据格式，然后用户就可以使用 Protobuf 编译器自动生成各种语言的源码，方便的读写用户自定义的格式化的数据。与语言无关，与平台无关，还可以在不破坏原数据格式的基础上，依据老的数据格式，更新现有的数据格式。</p><a id="more"></a><p>官方下载地址：</p><blockquote><p><a href="https://github.com/google/protobuf/releases/tag/v2.6.1" target="_blank" rel="noopener">https://github.com/google/protobuf/releases/tag/v2.6.1</a></p></blockquote><p>protobuf-2.6.1 百度云盘：</p><blockquote><p>链接:<a href="http://pan.baidu.com/s/1hrK7m7a" target="_blank" rel="noopener">http://pan.baidu.com/s/1hrK7m7a</a>  密码:epnb</p></blockquote><p><strong>安装过程</strong></p><ul><li><p>解压文件</p><blockquote><p>unzip protobuf-2.6.1.zip</p></blockquote></li><li><p>进入目录</p><blockquote><p>cd protobuf-2.6.1</p></blockquote></li><li><p>自定义编译目录</p><blockquote><p>./configure –prefix= /Users/shui/company/protobuf</p></blockquote></li><li><p>安装</p><blockquote><p> make<br> mak install</p></blockquote></li><li><p>配置环境变量</p><blockquote><p>vim .bash_profile</p></blockquote></li><li><p>添加如下配置</p><blockquote><p>export PROTOBUF=/Users/shui/company/protobuf<br>export PATH=$PROTOBUF/bin:$PATH<code>`</code></p></blockquote></li><li><p>使配置生效</p><blockquote><p>source .bash_profile</p></blockquote></li><li><p>查看是否生效</p><blockquote><p>protoc –version</p></blockquote></li></ul><p><strong>安装结束，进行编译</strong></p><ul><li>指定需要进行编译的 proto 文件</li><li>指定编译产生的 java 文件存放的位置</li></ul><p>假设文件名为 file.proto,文件放置在 filedir 目录下；产生的java文件也位于 filedir 目录下，编译命令如下：</p><blockquote><p>protoc /filedir/file/proto –java_out=/filedir</p></blockquote><p>如果有很多需要编译的 proto 文件，可以进入项目目录</p><blockquote><p>protoc *.proto –java_out=/filedir</p></blockquote><p><strong>参考：</strong></p><blockquote><p><a href="https://github.com/google/protobuf/tree/master/java" target="_blank" rel="noopener">https://github.com/google/protobuf/tree/master/java</a><br><a href="http://blog.csdn.net/u013045971/article/details/50592998" target="_blank" rel="noopener">http://blog.csdn.net/u013045971/article/details/50592998</a><br><a href="http://my.oschina.NET/KingPan/blog/283881?fromerr=8vajR5S9" target="_blank" rel="noopener">http://my.oschina.NET/KingPan/blog/283881?fromerr=8vajR5S9</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> protobuf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署 RockerMQ 双 Master 模式</title>
      <link href="/post/6fc5439d.html"/>
      <url>/post/6fc5439d.html</url>
      
        <content type="html"><![CDATA[<p>本文介绍搭建双 master 的 RocektMQ 的集群。</p><a id="more"></a><h1 id="RocketMQ集群方式"><a href="#RocketMQ集群方式" class="headerlink" title="RocketMQ集群方式"></a>RocketMQ集群方式</h1><p>首先要部署一个 RocketMQ 的集群，以下集群方式摘自网络。</p><p>推荐的几种 Broker 集群部署方式，这里的 Slave 不可写但可读，类似于 Mysql 主备方式。</p><h2 id="单个-Master"><a href="#单个-Master" class="headerlink" title="单个 Master"></a>单个 Master</h2><p>这种方式风险较大，一旦Broker 重启或者宕机时，会导致整个服务不可用，不建议线上环境使用。</p><h2 id="多-Master-模式"><a href="#多-Master-模式" class="headerlink" title="多 Master 模式"></a>多 Master 模式</h2><p>一个集群无 Slave，全是 Master，例如 2 个 Master 或者 3 个 Master。</p><p><strong>优点</strong></p><p>配置简单，单个 Master 宕机或重启维护对应用无影响，在磁盘配置为 RAID10 时，即使机器宕机不可恢复情况下，由与 RAID10 磁盘非常可靠，消息也不会丢（异步刷盘丢失少量消息，同步刷盘一条不丢） 。性能最高。</p><p><strong>缺点</strong></p><p>单台机器宕机期间，这台机器上未被消费的消息在机器恢复之前不可订阅，消息实时性会受到受到影响。</p><p><strong>启动顺序</strong></p><ol><li>先启动 NameServer</li><li>再机器 A，启动第一个 Master</li><li>再机器 B，启动第二个 Master</li></ol><h2 id="多-Master-多-Slave-模式，异步复制"><a href="#多-Master-多-Slave-模式，异步复制" class="headerlink" title="多 Master 多 Slave 模式，异步复制"></a>多 Master 多 Slave 模式，异步复制</h2><p>每个 Master 配置一个 Slave，有多对Master-Slave，HA 采用异步复制方式，主备有短暂消息延迟，毫秒级。</p><p><strong>优点</strong></p><p>即使磁盘损坏，消息丢失的非常少，且消息实时性不会受影响，因为 Master 宕机后，消费者仍然可以从 Slave 消费，此过程对应用透明。不需要人工干预。性能同多 Master 模式几乎一样。 </p><p><strong>缺点</strong></p><p>Master 宕机，磁盘损坏情况，会丢失少量消息。</p><p><strong>启动顺序</strong></p><ol><li>启动 NameServer</li><li>机器 A，启动第一个 Master</li><li>机器 B，启动第二个 Master</li><li>机器 C，启动第一个 Slave </li><li>机器 D，启动第二个 Slave</li></ol><h2 id="多-Master-多-Slave-模式，同步双写"><a href="#多-Master-多-Slave-模式，同步双写" class="headerlink" title="多 Master 多 Slave 模式，同步双写"></a>多 Master 多 Slave 模式，同步双写</h2><p>每个 Master 配置一个 Slave，有多对Master-Slave，HA 采用同步双写方式，主备都写成功，向应用返回成功。</p><p><strong>优点</strong></p><p>数据与服务都无单点，Master宕机情况下，消息无延迟，服务可用性与 数据可用性都非常高 </p><p><strong>缺点</strong></p><p>性能比异步复制模式略低，大约低 10%左右，发送单个消息的 RT 会略高。目前主宕机后，备机不能自动切换为主机，后续会支持自动切换功能 。</p><p><strong>启动顺序</strong></p><ol><li>启动 NameServer</li><li>机器 A，启动第一个 Master</li><li>机器 B，启动第二个 Master</li><li>机器 C，启动第一个 Slave</li><li>机器 D，启动第二个 Slave</li></ol><div class="note info icon"><p>以上 Broker 与 Slave 配对是通过指定相同的brokerName 参数来配对，Master 的 BrokerId 必须是 0，Slave 的BrokerId 必须是大与 0 的数。另外一个 Master 下面可以挂载多个 Slave，同一 Master 下的多个 Slave通过指定不同的 BrokerId 来区分。</p></div><hr><h1 id="部署双-master-模式的集群"><a href="#部署双-master-模式的集群" class="headerlink" title="部署双 master 模式的集群"></a>部署双 master 模式的集群</h1><p>出于简单和可用的考虑，本文使用双 master 的方式部署 RocketMQ 集群。更多细节看上一篇文章<a href="http://shuiyujie.com/2018/01/21/RocketMQ-Start/#more">RocketMQ Start</a>，我们用上篇文章中相同的方式再部署一台主机。</p><h2 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h2><table><thead><tr><th>序号</th><th>IP</th><th>用户名</th><th>角色</th><th>模式</th></tr></thead><tbody><tr><td>1</td><td>192.168.0.222</td><td>root</td><td>nameService1,brokerServer1</td><td>Master</td></tr><tr><td>2</td><td>192.168.0.255</td><td>Root</td><td>nameService2,brokerServer2</td><td>Master2</td></tr></tbody></table><h2 id="修改-hosts"><a href="#修改-hosts" class="headerlink" title="修改 hosts"></a>修改 hosts</h2><blockquote><p>vi /etc/hosts</p></blockquote><table><thead><tr><th>IP</th><th>Name</th></tr></thead><tbody><tr><td>192.168.0.222</td><td>rocketmq-nameserver1</td></tr><tr><td>192.168.0.222</td><td>rocketmq-master1</td></tr><tr><td>192.168.0.225</td><td>rocketmq-nameserver2</td></tr><tr><td>192.168.0.225</td><td>rocketmq-master2</td></tr></tbody></table><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>修改目标文件：</p><blockquote><p>/usr/local/rocketmq/conf/2m-noslave</p></blockquote><p>该目录下有两个文件,分别修改一个，与下面的配置文件的 <code>brokerName</code> 对应</p><blockquote><p>broker-a.properties  broker-b.properties</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#所属集群名字 </span><br><span class="line">brokerClusterName=rocketmq-cluster </span><br><span class="line">#broker名字，注意此处不同的配置文件填写的不一样</span><br><span class="line">brokerName=broker-a|broker-b</span><br><span class="line">#0 表示 Master，&gt;0 表示 Slave </span><br><span class="line">brokerId=0 </span><br><span class="line">#nameServer地址，分号分割</span><br><span class="line">namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876 </span><br><span class="line">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span><br><span class="line">defaultTopicQueueNums=4 </span><br><span class="line">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span><br><span class="line">autoCreateTopicEnable=true </span><br><span class="line">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span><br><span class="line">autoCreateSubscriptionGroup=true </span><br><span class="line">#Broker 对外服务的监听端口 </span><br><span class="line">listenPort=10911 </span><br><span class="line">#删除文件时间点，默认凌晨 4点 </span><br><span class="line">deleteWhen=04 </span><br><span class="line">#文件保留时间，默认 48 小时</span><br><span class="line">fileReservedTime=120</span><br><span class="line">#commitLog每个文件的大小默认1G</span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span><br><span class="line">mapedFileSizeConsumeQueue=300000</span><br><span class="line">#destroyMapedFileIntervalForcibly=120000</span><br><span class="line">#redeleteHangedFileInterval=120000</span><br><span class="line">#检测物理文件磁盘空间</span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line"></span><br><span class="line">#存储路径 </span><br><span class="line">storePathRootDir=/usr/local/rocketmq/store </span><br><span class="line">#commitLog 存储路径 </span><br><span class="line">storePathCommitLog=/usr/local/rocketmq/store/commitlog </span><br><span class="line">#消费队列存储路径存储路径</span><br><span class="line">storePathConsumeQueue=/usr/local/rocketmq/store/consumequeue</span><br><span class="line">#消息索引存储路径</span><br><span class="line">storePathIndex=/usr/local/rocketmq/store/index</span><br><span class="line">#checkpoint 文件存储路径</span><br><span class="line">storeCheckpoint=/usr/local/rocketmq/store/checkpoint</span><br><span class="line">#abort 文件存储路径</span><br><span class="line">abortFile=/usr/local/rocketmq/store/abort</span><br><span class="line">#限制的消息大小i</span><br><span class="line">maxMessageSize=65536</span><br><span class="line"></span><br><span class="line">#flushCommitLogLeastPages=4 </span><br><span class="line">#flushConsumeQueueLeastPages=2 </span><br><span class="line">#flushCommitLogThoroughInterval=10000 </span><br><span class="line">#flushConsumeQueueThoroughInterval=60000</span><br><span class="line"></span><br><span class="line">#Broker 的角色 </span><br><span class="line">#- ASYNC_MASTER 异步复制Master </span><br><span class="line">#- SYNC_MASTER 同步双写Master </span><br><span class="line">#- SLAVE </span><br><span class="line">brokerRole=ASYNC_MASTER</span><br><span class="line"></span><br><span class="line">#刷盘方式 </span><br><span class="line">#- ASYNC_FLUSH 异步刷盘 </span><br><span class="line">#- SYNC_FLUSH 同步刷盘 </span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br><span class="line"></span><br><span class="line">#checkTransactionMessageEnable=false</span><br><span class="line"></span><br><span class="line">#发消息线程池数量 </span><br><span class="line">#sendMessageThreadPoolNums=128 </span><br><span class="line">#拉消息线程池数量 </span><br><span class="line">#pullMessageThreadPoolNums=128</span><br></pre></td></tr></table></figure><h2 id="配置存储路径"><a href="#配置存储路径" class="headerlink" title="配置存储路径"></a>配置存储路径</h2><p>从配置文件中可以看到需要配置一些文件的存储位置，只要文件中配置的目录存在即可</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#存储路径 </span><br><span class="line">storePathRootDir=/usr/local/rocketmq/store </span><br><span class="line">#commitLog 存储路径 </span><br><span class="line">storePathCommitLog=/usr/local/rocketmq/store/commitlog </span><br><span class="line">#消费队列存储路径存储路径</span><br><span class="line">storePathConsumeQueue=/usr/local/rocketmq/store/consumequeue</span><br><span class="line">#消息索引存储路径</span><br><span class="line">storePathIndex=/usr/local/rocketmq/store/index</span><br><span class="line">#checkpoint 文件存储路径</span><br><span class="line">storeCheckpoint=/usr/local/rocketmq/store/checkpoint</span><br><span class="line">#abort 文件存储路径</span><br><span class="line">abortFile=/usr/local/rocketmq/store/abort</span><br></pre></td></tr></table></figure><h2 id="分别修改日志配置文件"><a href="#分别修改日志配置文件" class="headerlink" title="分别修改日志配置文件"></a>分别修改日志配置文件</h2><blockquote><p>mkdir -p /usr/local/rocketmq/logs<br>cd /usr/local/rocketmq/conf &amp;&amp; sed -i ‘s#${user.home}#/usr/local/rocketmq#g’ *.xml</p></blockquote><h2 id="修改-JVM-参数"><a href="#修改-JVM-参数" class="headerlink" title="修改 JVM 参数"></a>修改 JVM 参数</h2><p>runserver.sh</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br><span class="line"></span><br><span class="line">改成</span><br><span class="line"></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m -XX:PermSize=128m -XX:MaxPermSize=320m&quot;</span><br></pre></td></tr></table></figure><p>runbroker.sh</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms8g -Xmx8g -Xmn4g&quot;</span><br><span class="line"></span><br><span class="line">改成：</span><br><span class="line"></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m&quot;</span><br></pre></td></tr></table></figure><p>tools.sh</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms1g -Xmx1g -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=128m&quot;</span><br><span class="line"></span><br><span class="line">改成</span><br><span class="line"></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m -XX:PermSize=128m -XX:MaxPermSize=128m&quot;</span><br></pre></td></tr></table></figure><h2 id="启动两台主机的-NameServer"><a href="#启动两台主机的-NameServer" class="headerlink" title="启动两台主机的 NameServer"></a>启动两台主机的 NameServer</h2><blockquote><p>cd /usr/local/rocketmq/bin<br>nohup sh mqnamesrv &amp;</p></blockquote><h2 id="启动BrokerServer-A"><a href="#启动BrokerServer-A" class="headerlink" title="启动BrokerServer A"></a>启动BrokerServer A</h2><blockquote><p>nohup sh mqbroker -c /usr/local/rocketmq/conf/2m-noslave/broker-a.properties &gt;/dev/null 2&gt;&amp;1 &amp;<br>netstat -ntlp<br>tail -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/broker.log<br>tail -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/namesrv.log</p></blockquote><h2 id="启动BrokerServer-A-1"><a href="#启动BrokerServer-A-1" class="headerlink" title="启动BrokerServer A"></a>启动BrokerServer A</h2><blockquote><p>nohup sh mqbroker -c /usr/local/rocketmq/conf/2m-noslave/broker-b.properties &gt;/dev/null 2&gt;&amp;1 &amp;<br>netstat -ntlp<br>tail -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/broker.log<br>tail -f -n 500 /usr/local/rocketmq/logs/rocketmqlogs/namesrv.log</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/2791079-93906a9fdf4db672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动成功"></p><h2 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/rocketmq/bin </span><br><span class="line">sh mqshutdown broker</span><br><span class="line">sh mqshutdown namesrv</span><br><span class="line"></span><br><span class="line">*等待停止 *</span><br><span class="line"></span><br><span class="line">rm -rf /usr/local/rocketmq/store</span><br><span class="line">mkdir /usr/local/rocketmq/store</span><br><span class="line">mkdir /usr/local/rocketmq/store/commitlog</span><br><span class="line">mkdir /usr/local/rocketmq/store/consumequeue </span><br><span class="line">mkdir /usr/local/rocketmq/store/index</span><br><span class="line"></span><br><span class="line">*重复以上步骤重启NameServer与BrokerServer*</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> RocketMQ </tag>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux中几种常用的文件传输方式</title>
      <link href="/post/a6fc1711.html"/>
      <url>/post/a6fc1711.html</url>
      
        <content type="html"><![CDATA[<p>整理<code>scp</code>,<code>wget</code>,<code>ftp</code>以及其他Linux中常用的文件传输方式的介绍。</p><a id="more"></a><h1 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h1><p>当没有安装<code>web server</code>和<code>ftp server</code>的时候或感觉上面的方法比较麻烦，那么用<code>scp</code>命令就会排上用场。</p><h2 id="scp是什么？"><a href="#scp是什么？" class="headerlink" title="scp是什么？"></a>scp是什么？</h2><p><code>scp</code>是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有<code>cp</code>，不过<code>cp</code>只是在本机进行拷贝不能跨服务器，而且<code>scp</code>传输是加密的。可能会稍微影响一下速度。</p><h2 id="scp有什么用？"><a href="#scp有什么用？" class="headerlink" title="scp有什么用？"></a>scp有什么用？</h2><p>1、我们需要获得远程服务器上的某个文件，远程服务器既没有配置ftp服务器，没有开启web服务器，也没有做共享，无法通过常规途径获得文件时，只需要通过scp命令便可轻松的达到目的。</p><p>2、我们需要将本机上的文件上传到远程服务器上，远程服务器没有开启ftp服务器或共享，无法通过常规途径上传是，只需要通过scp命令便可以轻松的达到目的。</p><h2 id="scp使用方法"><a href="#scp使用方法" class="headerlink" title="scp使用方法"></a>scp使用方法</h2><p><strong>获取远程服务器上的文件</strong></p><blockquote><p>scp <a href="mailto:root@192.168.0.223" target="_blank" rel="noopener">root@192.168.0.223</a>:/apps/test/a.md /Users/shui/Desktop/b.md</p></blockquote><ul><li><p><a href="mailto:root@192.168.0.223" target="_blank" rel="noopener">root@192.168.0.223</a> : 使用root用户登录服务器192.168.0.223</p></li><li><p>/apps/test/a.md:本机要传递过去的文件</p></li><li><p>/Users/shui/Desktop/b.md：远程主机目录</p></li></ul><p><strong>获取远程服务器上的目录</strong></p><blockquote><p>scp -r <a href="mailto:root@192.168.0.223" target="_blank" rel="noopener">root@192.168.0.223</a>:/apps/test/a /Users/shui/Desktop/b</p></blockquote><p><strong>将本地文件上传到服务器上</strong></p><blockquote><p>scp test.txt <a href="mailto:root@192.168.0.223" target="_blank" rel="noopener">root@192.168.0.223</a>:/apps/test/a.txt</p></blockquote><ul><li><a href="mailto:root@192.168.0.223" target="_blank" rel="noopener">root@192.168.0.223</a> : 使用root用户登录远程服务器192.168.0.223</li><li>test.txt:本机要传递过去的文件</li><li>/apps/test/a.txt：远程主机目录和文件名</li></ul><p><strong>将本地目录上传到服务器上</strong></p><blockquote><p>scp -r dir1 <a href="mailto:root@192.168.0.223" target="_blank" rel="noopener">root@192.168.0.223</a>:/apps/test/a</p></blockquote><p><strong>当 scp 指定端口时</strong></p><blockquote><p>scp -P 2222 -r dir1 <a href="mailto:root@192.168.0.223" target="_blank" rel="noopener">root@192.168.0.223</a>:/apps/test/a</p></blockquote><p><strong>可能有用的几个参数</strong></p><p>-v 和大多数 linux 命令中的 -v 意思一样 , 用来显示进度 . 可以用来查看连接 , 认证 , 或是配置错误 .<br>-C 使能压缩选项 .<br>-4 强行使用 IPV4 地址 .<br>-6 强行使用 IPV6 地址 .</p><p>参考：<a href="http://www.runoob.com/linux/linux-comm-scp.html" target="_blank" rel="noopener">scp 命令</a></p><hr><h1 id="Wget"><a href="#Wget" class="headerlink" title="Wget"></a>Wget</h1><blockquote><p>Linux系统中的wget是一个下载文件的工具，它用在命令行下。对于Linux用户是必不可少的工具，我们经常要下载一些软件或从远程服务器恢复备份到本地服务器。wget支持HTTP，HTTPS和FTP协议，可以使用HTTP代理。所谓的自动下载是指，wget可以在用户退出系统的之后在后台执行。这意味这你可以登录系统，启动一个wget下载任务，然后退出系统，wget将在后台执行直到任务完成，相对于其它大部分浏览器在下载大量数据时需要用户一直的参与，这省去了极大的麻烦。</p></blockquote><blockquote><p>wget 可以跟踪HTML页面上的链接依次下载来创建远程服务器的本地版本，完全重建原始站点的目录结构。这又常被称作”递归下载”。在递归下载的时候，wget 遵循Robot Exclusion标准(/robots.txt). wget可以在下载的同时，将链接转换成指向本地文件，以方便离线浏览。</p></blockquote><blockquote><p>wget 非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性.如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。</p></blockquote><p><strong>下载单个文件</strong></p><blockquote><p>wget <a href="http://www.minjieren.com/wordpress-3.1-zh_CN.zip" target="_blank" rel="noopener">http://www.minjieren.com/wordpress-3.1-zh_CN.zip</a></p></blockquote><p><strong>下载并以不同的文件名保存</strong></p><blockquote><p>wget -O tomcat.tar.gz <a href="http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.24/bin/apache-tomcat-8.5.24.tar.gz" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.24/bin/apache-tomcat-8.5.24.tar.gz</a></p></blockquote><p><strong>后台下载</strong> </p><blockquote><p>wget -b <a href="http://mirrors.hust.edu.cn/apache/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gz" target="_blank" rel="noopener">http://mirrors.hust.edu.cn/apache/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gz</a></p></blockquote><p>参考：<a href="http://www.cnblogs.com/peida/archive/2013/03/18/2965369.html" target="_blank" rel="noopener">每天一个linux命令（61）：wget命令</a></p><hr><h1 id="Ftp"><a href="#Ftp" class="headerlink" title="Ftp"></a>Ftp</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><blockquote><p>ftp 命令使用文件传输协议（File Transfer Protocol, FTP）在本地主机和远程主机之间或者在两个远程主机之间进行文件传输。</p></blockquote><blockquote><p>FTP 协议允许数据在不同文件系统的主机之间传输。尽管这个协议在传输数据上提供了高适应性，但是它并没有尝试去保留一个特定文件系统上的文件属性（例如一个文件的保护模式或者修改次数）。而且 FTP 协议很少对一个文件系统的整体结构作假定，也不提供这样的功能，比如递归的拷贝子目录。在使用 ftp 命令时，需要注意 FTP 协议的这些特性。当需要保留文件属性或者需要递归的拷贝子目录时，可以使用 rcp/scp 等命令。</p></blockquote><p><strong>语法</strong></p><blockquote><p>ftp [-dignv][主机名称或IP地址]</p></blockquote><p><strong>参数：</strong></p><p>-d 详细显示指令执行过程，便于排错或分析程序执行的情形。<br>-i 关闭互动模式，不询问任何问题。<br>-g 关闭本地主机文件名称支持特殊字符的扩充特性。<br>-n 不使用自动登陆。<br>-v 显示指令执行过程。</p><p><a href="http://www.runoob.com/linux/linux-comm-ftp.html" target="_blank" rel="noopener">Linux ftp命令</a></p><hr><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>摘自：<a href="https://www.ibm.com/developerworks/cn/linux/l-cn-filetransfer/" target="_blank" rel="noopener">Linux 上的常用文件传输方式介绍与比较</a></p><p><strong>综上所述</strong><br>各种文件传输方式的特征表现各有千秋，我们从以下几个方面综合对比，更深入地了解它们各自的特性。</p><p><strong>传输性能</strong><br>wget 通过支持后台执行及断点续传提高文件传输效率 ； rsync 则以其高效的传输及压缩算法达到快传输的目的。</p><p><strong>配置难度</strong><br>rcp 只需进行简单的配置，创建 .rhost 文件以及设置 /etc/hosts 文件中主机名与 IP 地址列表； wget 设置设置方便简单，只需在客户端指定参数执行命令即可； rsync 在使用前需要对服务端 /etc/rsyncd.conf 进行参数设定，配置内容相对复杂。</p><p><strong>安全性能</strong><br>ftp、rcp 不保证传输的安全性，scp、rsync 则均可基于 ssh 认证进行传输，提供了较强的安全保障。 wget 也可通过指定安全协议做到安全传输。</p><p><strong>通过上述的对比不难发现，每种文件传输方法基于其自身的特点与优势均有其典型的适用场景：</strong></p><ul><li>ftp 作为最常用的入门式的文件传输方法，使用简单，易于理解，并且可以实现脚本自动化；</li><li>rcp 相对于 ftp 可以保留文件属性并可递归的拷贝子目录；</li><li>scp 利用 ssh 传输数据，并使用与 ssh 相同的认证模式，相对于 rcp 提供更强的安全保障；</li><li>wget，实现递归下载，可跟踪 HTML 页面上的链接依次下载来创建远程服务器的本地版本，完全重建原始站点的目录结构，适合实现远程网站的镜像；</li><li>curl 则适合用来进行自动的文件传输或操作序列，是一个很好的模拟用户在网页浏览器上的行为的工具；</li><li>rsync 更适用于大数据量的每日同步，拷贝的速度很快，相对 wget 来说速度快且安全高效。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ Start</title>
      <link href="/post/20e9366a.html"/>
      <url>/post/20e9366a.html</url>
      
        <content type="html"><![CDATA[<p>RocketMQ 是一款分布式、队列模型的消息中间件，具有以下特点：</p><ol><li>能够保证严格的消息顺序 </li><li>提供丰富的消息拉取模式 </li><li>高效的订阅者水平扩展能力 </li><li>实时的消息订阅机制 </li><li>亿级消息堆积能力</li></ol><p>今天开始试着理解她。</p><a id="more"></a><hr><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ol><li>64bit OS, Linux/Unix/Mac is recommended;</li><li>64bit JDK 1.8+;</li><li>Maven 3.2.x</li><li>Git</li></ol><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>下载安装包 <a href="https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.2.0/rocketmq-all-4.2.0-source-release.zip" target="_blank" rel="noopener">here</a> 到服务器中，本文使用的是<code>rocketmq-all-4.2.0</code>。</p><blockquote><p>unzip rocketmq-all-4.2.0-source-release.zip<br>cd rocketmq-all-4.2.0/<br>mvn -Prelease-all -DskipTests clean install -U</p></blockquote><div class="note danger"><p>没有注意环境，maven 版本为 3.0.5，升级 maven 到 3.5.2</p></div><blockquote><p>cd distribution/target/apache-rocketmq</p></blockquote><p>启动 Name Server </p><blockquote><p>nohup sh bin/mqnamesrv &amp;<br>tail -f ~/logs/rocketmqlogs/namesrv.log<br>The Name Server boot success…</p></blockquote><p>启动 Broker</p><blockquote><p>nohup sh bin/mqbroker -n localhost:9876 &amp;<br>tail -f ~/logs/rocketmqlogs/broker.log </p></blockquote><div class="note danger"><p>错误：启动不成功，看错误日志</p></div><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class="line"># Native memory allocation (mmap) failed to map 8589934592 bytes for committing reserved memory.</span><br><span class="line"># Possible reasons:</span><br><span class="line">#   The system is out of physical RAM or swap space</span><br><span class="line">#   In 32 bit mode, the process size limit was hit</span><br><span class="line"># Possible solutions:</span><br><span class="line">#   Reduce memory load on the system</span><br><span class="line">#   Increase physical memory or swap space</span><br><span class="line">#   Check if swap backing store is full</span><br><span class="line">#   Use 64 bit Java on a 64 bit OS</span><br><span class="line">#   Decrease Java heap size (-Xmx/-Xms)</span><br><span class="line">#   Decrease number of Java threads</span><br><span class="line">#   Decrease Java thread stack sizes (-Xss)</span><br><span class="line">#   Set larger code cache with -XX:ReservedCodeCacheSize=</span><br><span class="line"># This output file may be truncated or incomplete.</span><br><span class="line">#</span><br><span class="line">#  Out of Memory Error (os_linux.cpp:2640), pid=3437, tid=0x00007f378a5c2700</span><br><span class="line">#</span><br><span class="line"># JRE version:  (8.0_151-b12) (build )</span><br><span class="line"># Java VM: Java HotSpot(TM) 64-Bit Server VM (25.151-b12 mixed mode linux-amd64 compressed oops)</span><br><span class="line"># Core dump written. Default location: /apps/rocketmq-all-4.2.0/distribution/core or core.3437</span><br><span class="line">#</span><br></pre></td></tr></table></figure><div class="note info"><p>原因：rocketmq默认jvm配置较高，导致内存不足<br></p></div><p>runserver.sh</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br><span class="line"></span><br><span class="line">改成</span><br><span class="line"></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m -XX:PermSize=128m -XX:MaxPermSize=320m&quot;</span><br></pre></td></tr></table></figure><p>runbroker.sh</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms8g -Xmx8g -Xmn4g&quot;</span><br><span class="line"></span><br><span class="line">改成：</span><br><span class="line"></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m&quot;</span><br></pre></td></tr></table></figure><p>tools.sh</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms1g -Xmx1g -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=128m&quot;</span><br><span class="line"></span><br><span class="line">改成</span><br><span class="line"></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m -XX:PermSize=128m -XX:MaxPermSize=128m&quot;</span><br></pre></td></tr></table></figure><p>再次启动 Broker 成功</p><blockquote><p>The broker[main, 192.168.0.222:10911] boot success. serializeType=JSON and name server is localhost:9876</p></blockquote><p>查看一下服务 Jps</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@main apache-rocketmq]# jps</span><br><span class="line">4419 BrokerStartup</span><br><span class="line">4636 Jps</span><br><span class="line">4077 NamesrvStartup</span><br></pre></td></tr></table></figure><p>发送接收消息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; export NAMESRV_ADDR=localhost:9876</span><br><span class="line">&gt; sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId= ...</span><br><span class="line"></span><br><span class="line">&gt; sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br><span class="line">ConsumeMessageThread_%d Receive New Messages: [MessageExt...</span><br></pre></td></tr></table></figure><p>停止服务</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh bin/mqshutdown broker</span><br><span class="line">sh bin/mqshutdown namesrv</span><br></pre></td></tr></table></figure><hr><h1 id="使用-RocketMQ-Console-监控"><a href="#使用-RocketMQ-Console-监控" class="headerlink" title="使用 RocketMQ Console 监控"></a>使用 RocketMQ Console 监控</h1><p>在 Tomcat 中部署 RocketMQ Console，可以看到 RocketMQ 的运行情况。</p><p><a href="https://github.com/apache/rocketmq-externals" target="_blank" rel="noopener">RocketMQ 扩展项目地址</a>将项目 clone 到本地，进入<code>rocketmq-console</code>，参考项目文档编译。</p><p>修改<code>application.properties</code>文件</p><blockquote><p>rocketmq.config.namesrvAddr= 192.168.0.222:9876</p></blockquote><p>编译运行文件</p><blockquote><p>mvn clean package -Dmaven.test.skip=true<br>java -jar target/rocketmq-console-ng-1.0.0.jar</p></blockquote><p>在浏览器访问<code>192.168.0.222:8080</code>即可访问监控界面，就能看到 RocketMQ 的基本信息。</p><hr><h1 id="客户端访问"><a href="#客户端访问" class="headerlink" title="客户端访问"></a>客户端访问</h1><p><code>NameService</code> 和 <code>BrokerService</code>已经启动，现在单机模式下用客户端来实现消息的订阅和发送。</p><h2 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestProducer</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class="line">        DefaultMQProducer producer = <span class="hljs-keyword">new</span> DefaultMQProducer(<span class="hljs-string">"DefaultCluster"</span>);</span><br><span class="line">        producer.setNamesrvAddr(<span class="hljs-string">"192.168.0.222:9876"</span>);</span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;</span><br><span class="line">            <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                &#123;</span><br><span class="line">                    Message msg = <span class="hljs-keyword">new</span> Message(<span class="hljs-string">"TopicTest1"</span>,</span><br><span class="line">                            <span class="hljs-string">"TagA"</span>,</span><br><span class="line">                            <span class="hljs-string">"key113"</span>,</span><br><span class="line">                            <span class="hljs-string">"Hello world"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">                    SendResult sendResult = producer.send(msg);</span><br><span class="line">                    System.out.printf(<span class="hljs-string">"%s%n"</span>, sendResult);</span><br><span class="line"></span><br><span class="line">                    QueryResult queryMessage =</span><br><span class="line">                            producer.queryMessage(<span class="hljs-string">"TopicTest1"</span>, <span class="hljs-string">"key113"</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, System.currentTimeMillis());</span><br><span class="line">                    <span class="hljs-keyword">for</span> (MessageExt m : queryMessage.getMessageList()) &#123;</span><br><span class="line">                        System.out.printf(<span class="hljs-string">"%s%n"</span>, m);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PullConsumer</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;MessageQueue, Long&gt; OFFSE_TABLE = <span class="hljs-keyword">new</span> HashMap&lt;MessageQueue, Long&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException </span>&#123;</span><br><span class="line">        DefaultMQPullConsumer consumer = <span class="hljs-keyword">new</span> DefaultMQPullConsumer(<span class="hljs-string">"DefaultCluster"</span>);</span><br><span class="line">        consumer.setNamesrvAddr(<span class="hljs-string">"192.168.0.222:9876"</span>);</span><br><span class="line"></span><br><span class="line">        consumer.start();</span><br><span class="line"></span><br><span class="line">        Set&lt;MessageQueue&gt; mqs = consumer.fetchSubscribeMessageQueues(<span class="hljs-string">"TopicTest1"</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span> (MessageQueue mq : mqs) &#123;</span><br><span class="line">            System.out.printf(<span class="hljs-string">"Consume from the queue: %s%n"</span>, mq);</span><br><span class="line">            SINGLE_MQ:</span><br><span class="line">            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;</span><br><span class="line">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                    PullResult pullResult =</span><br><span class="line">                            consumer.pullBlockIfNotFound(mq, <span class="hljs-keyword">null</span>, getMessageQueueOffset(mq), <span class="hljs-number">32</span>);</span><br><span class="line">                    System.out.printf(<span class="hljs-string">"%s%n"</span>, pullResult);</span><br><span class="line">                    putMessageQueueOffset(mq, pullResult.getNextBeginOffset());</span><br><span class="line">                    <span class="hljs-keyword">switch</span> (pullResult.getPullStatus()) &#123;</span><br><span class="line">                        <span class="hljs-keyword">case</span> FOUND:</span><br><span class="line">                            <span class="hljs-keyword">break</span>;</span><br><span class="line">                        <span class="hljs-keyword">case</span> NO_MATCHED_MSG:</span><br><span class="line">                            <span class="hljs-keyword">break</span>;</span><br><span class="line">                        <span class="hljs-keyword">case</span> NO_NEW_MSG:</span><br><span class="line">                            <span class="hljs-keyword">break</span> SINGLE_MQ;</span><br><span class="line">                        <span class="hljs-keyword">case</span> OFFSET_ILLEGAL:</span><br><span class="line">                            <span class="hljs-keyword">break</span>;</span><br><span class="line">                        <span class="hljs-keyword">default</span>:</span><br><span class="line">                            <span class="hljs-keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        consumer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getMessageQueueOffset</span><span class="hljs-params">(MessageQueue mq)</span> </span>&#123;</span><br><span class="line">        Long offset = OFFSE_TABLE.get(mq);</span><br><span class="line">        <span class="hljs-keyword">if</span> (offset != <span class="hljs-keyword">null</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> offset;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putMessageQueueOffset</span><span class="hljs-params">(MessageQueue mq, <span class="hljs-keyword">long</span> offset)</span> </span>&#123;</span><br><span class="line">        OFFSE_TABLE.put(mq, offset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/2791079-927f52581cf3151d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="集群信息"></p><p>从控制台可以看到集群的基本信息，包括消息的产生和消费数量等。</p><div class="note info"><p> RocketMQ 单机模式跑通，接下来使用双 master 模式。</p></div><p><a href="http://shuiyujie.com/2018/01/25/%E9%83%A8%E7%BD%B2-RockerMQ-%E5%8F%8C-Master-%E6%A8%A1%E5%BC%8F/#more">部署 RockerMQ 双 Master 模式</a></p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://rocketmq.apache.org/docs/quick-start/" target="_blank" rel="noopener">Apache RocketMQ</a><br><a href="https://github.com/apache/rocketmq-externals/tree/master/rocketmq-console" target="_blank" rel="noopener">Rocket-Externals</a><br><a href="http://www.cnblogs.com/quchunhui/p/7284752.html" target="_blank" rel="noopener">安装rocketmq-console</a><br><a href="https://stackoverflow.com/questions/7532928/how-do-i-install-maven-with-yum" target="_blank" rel="noopener">Maven 升级</a></p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现 SSH 免密登录</title>
      <link href="/post/ea055f0d.html"/>
      <url>/post/ea055f0d.html</url>
      
        <content type="html"><![CDATA[<p>SSH (Secure Shell的) 是一种网络协议，用于计算机之间的加密登录。</p><p>通过使用SSH，你可以把所有传输的数据进行加密更加安全可靠。使用SSH，还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。SSH 有很多功能，它既可以代替 Telnet，又可以为FTP、Pop、甚至为 PPP 提供一个安全的”通道”。</p><p><img src="http://image.shuiyujie.com/2019-05-09-23-08-57.png" alt="SSH"></p><a id="more"></a><p>主机之间通过 SSH 进行连接的时候需要输入密码进行校验。在部署分布式应用时，主机间要建立良好的通信，首先要做的就是配置 SSH 免密登录。</p><p><em>以下演示在<code>centos 7</code>中配置免密登录。</em></p><h1 id="配置主机间的免密登录"><a href="#配置主机间的免密登录" class="headerlink" title="配置主机间的免密登录"></a>配置主机间的免密登录</h1><h2 id="配置免密登录"><a href="#配置免密登录" class="headerlink" title="配置免密登录"></a>配置免密登录</h2><p>什么是免密登录呢？</p><p>通常我们登录 SSH 是通过账号和免密来登录的，输入<code>ssh username@ip-server</code>然后输入密码。</p><p>如果每次都输入密码会很麻烦，而且要对多台主机进行自动化管理，每次都要输入密码不现实。我们可以配置公钥和密钥进行免密登录。<strong>免密登录做的事情其实就是通过 SSH 的公钥和密钥来校验身份信息。</strong></p><p>首先你要知道每台主机有一份公钥和一份私钥。我们要做的事情可以用一张图来表示：</p><p><img src="http://upload-images.jianshu.io/upload_images/2791079-5f9ccb0e655e4206.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ssh 免密登录"></p><p>1.生成密匙对</p><blockquote><p>ssh-keygen</p></blockquote><p>之后可以在<code>/root/.ssh</code>中看到生成的密匙对</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@main /]# cd /root/.ssh/</span><br><span class="line">[root@main .ssh]# ls</span><br><span class="line">id_rsa id_rsa.pub</span><br></pre></td></tr></table></figure><p>2.拷贝一份 A 的公钥给 B</p><blockquote><p>ssh-copy-id 192.168.0.10<br>输入密码</p></blockquote><p>此时在 B 的<code>authorized_keys</code>中就会有一份 A 的<code>id_rsa.pub</code>公钥信息。</p><p>注：第二步操作的做的事情其实就是一个拷贝密钥的工作，也可以手动拷贝，但是用上面的命令更方便。</p><p>3.最后我们就可以免密登录,也就是不输入密码 A 就可以登录 B</p><blockquote><p>ssh <a href="mailto:root@192.168.0.10" target="_blank" rel="noopener">root@192.168.0.10</a></p></blockquote><p><em>192.168.0.10 为 B 的 ip 地址</em></p><p>如果要退出登录，输入<code>exit</code>即可。</p><h2 id="给主机起一个别名"><a href="#给主机起一个别名" class="headerlink" title="给主机起一个别名"></a>给主机起一个别名</h2><p>192.168.0.10 是 ip 地址，也就是说登录的时候我们还要输入一次 ip。我们可以给每个主机配置一个别名，用<code>ssh ip-server</code>的方式登录。</p><p>就像人有身份证也有名字一样，我们可以通过 ip 来辨识主机。给他一个别名就是给一个<code>hostname</code>。</p><p>可以用<code>hostname</code>来查看你的主机名，要改主机名改他的配置文件</p><blockquote><p>vi /etc/hostname<br>在其中替换为你要改的名字，比如 main</p></blockquote><p>重启生效</p><blockquote><p>reboot</p></blockquote><p>这样主机名已经改掉了，还差一步。我们要让主机名和我们的 ip 关联在一起，修改<code>/etc/hosts</code>文件</p><blockquote><p>vi /etc/hosts<br>添加上 ip 和 hostname 的键值对</p></blockquote><p>例如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.0.11 main</span><br><span class="line">192.168.0.10 slave</span><br></pre></td></tr></table></figure><p>两边都配置完成可以用<code>ssh slave</code>直接连接<code>slave</code>。如果你想自己免密连接自己那就按照上面的步骤给自己配置一份密匙就行了，动手试试吧。</p><h1 id="SSH-协议是什么以及更多参考"><a href="#SSH-协议是什么以及更多参考" class="headerlink" title="SSH 协议是什么以及更多参考"></a>SSH 协议是什么以及更多参考</h1><p><a href="http://blog.csdn.net/macrossdzh/article/details/5691924" target="_blank" rel="noopener">SSH 协议介绍</a></p><p><a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="noopener">数字签名是什么</a></p><p><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">SSH原理与运用（一）：远程登录</a></p><p><a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="noopener">SSH原理与运用（二）：远程操作与端口转发</a></p><p><a href="http://www.jianshu.com/p/39d7000dfa47" target="_blank" rel="noopener">如何在CentOS 7上修改主机名</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ssh </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy 小结</title>
      <link href="/post/a404f4e2.html"/>
      <url>/post/a404f4e2.html</url>
      
        <content type="html"><![CDATA[<p>NumPy 是 Python 语言的一个扩充程序库。支持高级大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库，也是学习 python 必学的一个库。</p><p><img src="http://image.shuiyujie.com/2019-05-09-23-07-28.png" alt="numpy"></p><a id="more"></a><h1 id="1-读取文件"><a href="#1-读取文件" class="headerlink" title="1. 读取文件"></a>1. 读取文件</h1><p><strong>numpy.genfromtxt() 用于读取 txt 文件</strong>，其中传入的参数依次为：</p><ol><li>需要读取的 txt 文件位置，此处文件与程序位于同一目录下</li><li>分割的标记</li><li>转换类型，如果文件中既有文本类型也有数字类型，就先转成文本类型</li></ol><p><strong>help(numpy.genfromtxt)用于查看帮助文档：</strong><br>如果不想看 API 可以启动一个程序用 help 查看指令的详细用法</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line">world_alcohol = numpy.genfromtxt(<span class="hljs-string">"world_alcohol.txt"</span>, delimiter=<span class="hljs-string">","</span>,dtype=str)</span><br><span class="line">print(type(world_alcohol))</span><br><span class="line">print(world_alcohol)</span><br><span class="line">print(help(numpy.genfromtxt))</span><br></pre></td></tr></table></figure><h1 id="2-构造-ndarray"><a href="#2-构造-ndarray" class="headerlink" title="2. 构造 ndarray"></a>2. 构造 ndarray</h1><h2 id="numpy-array-构造-ndarray"><a href="#numpy-array-构造-ndarray" class="headerlink" title="numpy.array()构造 ndarray"></a>numpy.array()构造 ndarray</h2><p><strong>numpy.array()</strong>中传入数组参数，可以是一维的也可以是二维三维的。numpy 会将其转变成 ndarray 的结构。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector = numpy.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])</span><br><span class="line">matrix = numpy.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])</span><br></pre></td></tr></table></figure><p><strong>传入的参数必须是同一结构,不是同一结构将发生转换。</strong></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector = numpy.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])</span><br><span class="line"></span><br><span class="line">array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])</span><br></pre></td></tr></table></figure><p><em>均为 int 类型</em></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector = numpy.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4.0</span>])</span><br><span class="line"></span><br><span class="line">array([ <span class="hljs-number">1.</span>,  <span class="hljs-number">2.</span>,  <span class="hljs-number">3.</span>,  <span class="hljs-number">4.</span>])</span><br></pre></td></tr></table></figure><p><em>转为浮点数类型</em></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector = numpy.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">'3'</span>,<span class="hljs-number">4</span>])</span><br><span class="line"></span><br><span class="line">array([<span class="hljs-string">'1'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'4'</span>],dtype=<span class="hljs-string">'&lt;U21'</span>)</span><br></pre></td></tr></table></figure><p><em>转为字符类型</em></p><h2 id="利用-shape-查看结构"><a href="#利用-shape-查看结构" class="headerlink" title="利用 .shape 查看结构"></a>利用 .shape 查看结构</h2><p>能够了解 array 的结构，debug 时通过查看结构能够更好地了解程序运行的过程。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(vector.shape)</span><br><span class="line">print(matrix.shape)</span><br><span class="line">(<span class="hljs-number">4</span>,)</span><br><span class="line">(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="利用-dtype-查看类型"><a href="#利用-dtype-查看类型" class="headerlink" title="利用 dtype 查看类型"></a>利用 dtype 查看类型</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector = numpy.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])</span><br><span class="line">vector.dtype</span><br><span class="line"></span><br><span class="line">dtype(<span class="hljs-string">'int64'</span>)</span><br></pre></td></tr></table></figure><h2 id="ndim-查看维度"><a href="#ndim-查看维度" class="headerlink" title="ndim 查看维度"></a>ndim 查看维度</h2><p>一维</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector = numpy.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])</span><br><span class="line">vector.ndim</span><br><span class="line"></span><br><span class="line"><span class="hljs-number">1</span></span><br></pre></td></tr></table></figure><p>二维</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">matrix = numpy.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],</span><br><span class="line">                      [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],</span><br><span class="line">                     [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]])</span><br><span class="line">matrix.ndim</span><br><span class="line"></span><br><span class="line"><span class="hljs-number">2</span></span><br></pre></td></tr></table></figure><h2 id="size-查看元素数量"><a href="#size-查看元素数量" class="headerlink" title="size 查看元素数量"></a>size 查看元素数量</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">matrix.size</span><br><span class="line"><span class="hljs-number">9</span></span><br></pre></td></tr></table></figure><h1 id="3-获取与计算"><a href="#3-获取与计算" class="headerlink" title="3. 获取与计算"></a>3. 获取与计算</h1><h2 id="numpy-能使用切片获取数据"><a href="#numpy-能使用切片获取数据" class="headerlink" title="numpy 能使用切片获取数据"></a>numpy 能使用切片获取数据</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">matrix = numpy.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],</span><br><span class="line">                      [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],</span><br><span class="line">                     [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]])</span><br></pre></td></tr></table></figure><h2 id="根据条件获取"><a href="#根据条件获取" class="headerlink" title="根据条件获取"></a>根据条件获取</h2><p>numpy 能够依次比较 vector 和元素之间是否相同</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector = numpy.array([<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>])</span><br><span class="line">vector == <span class="hljs-number">10</span></span><br><span class="line"></span><br><span class="line">array([<span class="hljs-keyword">False</span>,  <span class="hljs-keyword">True</span>, <span class="hljs-keyword">False</span>, <span class="hljs-keyword">False</span>], dtype=bool)</span><br></pre></td></tr></table></figure><p>根据返回值获取元素</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vector = numpy.array([<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>])</span><br><span class="line">equal_to_ten = (vector == <span class="hljs-number">10</span>)</span><br><span class="line">print(equal_to_ten)</span><br><span class="line">print(vector[equal_to_ten])</span><br><span class="line"></span><br><span class="line">[<span class="hljs-keyword">False</span>  <span class="hljs-keyword">True</span> <span class="hljs-keyword">False</span> <span class="hljs-keyword">False</span>]</span><br><span class="line">[<span class="hljs-number">10</span>]</span><br></pre></td></tr></table></figure><p>进行运算之后获取</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector = numpy.array([<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>])</span><br><span class="line">equal_to_ten_and_five = (vector == <span class="hljs-number">10</span>) &amp; (vector == <span class="hljs-number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector = numpy.array([<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>])</span><br><span class="line">equal_to_ten_or_five = (vector == <span class="hljs-number">10</span>) | (vector == <span class="hljs-number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>将整体类型进行转换</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vector = numpy.array([<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>])</span><br><span class="line">print(vector.dtype)</span><br><span class="line">vector = vector.astype(str)</span><br><span class="line">print(vector.dtype)</span><br><span class="line"></span><br><span class="line">int64</span><br><span class="line">&lt;U21</span><br></pre></td></tr></table></figure><h2 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h2><p>sum() 能够对 ndarray 进行各种求和操作，比如分别按行按列进行求和</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">matrix = numpy.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],</span><br><span class="line">                      [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],</span><br><span class="line">                     [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]])</span><br><span class="line">print(matrix.sum())</span><br><span class="line">print(matrix.sum(<span class="hljs-number">1</span>))</span><br><span class="line">print(matrix.sum(<span class="hljs-number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="hljs-number">45</span></span><br><span class="line">[ <span class="hljs-number">6</span> <span class="hljs-number">15</span> <span class="hljs-number">24</span>]</span><br><span class="line">[<span class="hljs-number">12</span> <span class="hljs-number">15</span> <span class="hljs-number">18</span>]</span><br></pre></td></tr></table></figure><p><em>sum(1) 是 sum(axis=1)) 的缩写，1表示按照 x轴方向求和，0表示按照y轴方向求和</em></p><h1 id="4-常用函数"><a href="#4-常用函数" class="headerlink" title="4. 常用函数"></a>4. 常用函数</h1><h2 id="reshape"><a href="#reshape" class="headerlink" title="reshape"></a>reshape</h2><p>生成从 0-14 的 15 个数字，使用 reshape(3,5) 将其构造成一个三行五列的 array。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line">arr = np.arange(<span class="hljs-number">15</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)</span><br><span class="line">arr</span><br><span class="line"></span><br><span class="line">array([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>],</span><br><span class="line">       [ <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],</span><br><span class="line">       [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>]])</span><br></pre></td></tr></table></figure><h2 id="zeros"><a href="#zeros" class="headerlink" title="zeros"></a>zeros</h2><p>生成指定结构的默认为 0. 的 array</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">np.zeros ((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))</span><br><span class="line"></span><br><span class="line">array([[ <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>],</span><br><span class="line">       [ <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>],</span><br><span class="line">       [ <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>]])</span><br></pre></td></tr></table></figure><h2 id="ones"><a href="#ones" class="headerlink" title="ones"></a>ones</h2><p>生成一个三维的 array,通过 dtype 指定类型</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">np.ones( (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>), dtype=np.int32 )</span><br><span class="line"></span><br><span class="line">array([[[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],</span><br><span class="line">        [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],</span><br><span class="line">        [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],</span><br><span class="line">        [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],</span><br><span class="line">        [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]]])</span><br></pre></td></tr></table></figure><h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><p>指定范围和数值间的间隔生成 array，<em>注意范围包左不包右</em></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">array([<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>])</span><br></pre></td></tr></table></figure><h2 id="random-随机数"><a href="#random-随机数" class="headerlink" title="random 随机数"></a>random 随机数</h2><p>生成指定结构的随机数，可以用于生成随机权重</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.random.random((<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))</span><br><span class="line"></span><br><span class="line">array([[ <span class="hljs-number">0.86166627</span>,  <span class="hljs-number">0.37756207</span>,  <span class="hljs-number">0.94265883</span>],</span><br><span class="line">       [ <span class="hljs-number">0.9768257</span> ,  <span class="hljs-number">0.96915312</span>,  <span class="hljs-number">0.33495431</span>]])</span><br></pre></td></tr></table></figure><h1 id="5-ndarray-运算"><a href="#5-ndarray-运算" class="headerlink" title="5. ndarray 运算"></a>5. ndarray 运算</h1><p>元素之间依次相减相减</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>])</span><br><span class="line">b = np.array(<span class="hljs-number">4</span>)</span><br><span class="line"></span><br><span class="line">a - b</span><br><span class="line">array([ <span class="hljs-number">6</span>, <span class="hljs-number">16</span>, <span class="hljs-number">26</span>, <span class="hljs-number">36</span>])</span><br></pre></td></tr></table></figure><p>乘方<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a**<span class="hljs-number">2</span></span><br><span class="line">array([ <span class="hljs-number">100</span>,  <span class="hljs-number">400</span>,  <span class="hljs-number">900</span>, <span class="hljs-number">1600</span>])</span><br></pre></td></tr></table></figure></p><p>开根号</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.sqrt(B)</span><br><span class="line"></span><br><span class="line">array([[ <span class="hljs-number">1.41421356</span>,  <span class="hljs-number">0.</span>        ],</span><br><span class="line">       [ <span class="hljs-number">1.73205081</span>,  <span class="hljs-number">2.</span>        ]])</span><br></pre></td></tr></table></figure><p>e 求方</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.exp(B)</span><br><span class="line"></span><br><span class="line">array([[  <span class="hljs-number">7.3890561</span> ,   <span class="hljs-number">1.</span>        ],</span><br><span class="line">       [ <span class="hljs-number">20.08553692</span>,  <span class="hljs-number">54.59815003</span>]])</span><br></pre></td></tr></table></figure><p>向下取整</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = np.floor(<span class="hljs-number">10</span>*np.random.random((<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)))</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line">array([[ <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>],</span><br><span class="line">       [ <span class="hljs-number">3.</span>,  <span class="hljs-number">6.</span>]])</span><br></pre></td></tr></table></figure><p>行列变换</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.T</span><br><span class="line"></span><br><span class="line">array([[ <span class="hljs-number">0.</span>,  <span class="hljs-number">3.</span>],</span><br><span class="line">       [ <span class="hljs-number">0.</span>,  <span class="hljs-number">6.</span>]])</span><br></pre></td></tr></table></figure><p>变换结构</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.resize(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>)</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line">array([[ <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">3.</span>,  <span class="hljs-number">6.</span>]])</span><br></pre></td></tr></table></figure><h2 id="6-矩阵运算"><a href="#6-矩阵运算" class="headerlink" title="6. 矩阵运算"></a>6. 矩阵运算</h2><p>矩阵之间的运算</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A = np.array( [[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],</span><br><span class="line">               [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]] )</span><br><span class="line">B = np.array( [[<span class="hljs-number">2</span>,<span class="hljs-number">0</span>],</span><br><span class="line">               [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]] )</span><br></pre></td></tr></table></figure><p>对应位置一次相乘</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A*B</span><br><span class="line"></span><br><span class="line">array([[<span class="hljs-number">2</span>, <span class="hljs-number">0</span>],</span><br><span class="line">       [<span class="hljs-number">0</span>, <span class="hljs-number">4</span>]])</span><br></pre></td></tr></table></figure><p>矩阵乘法</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">print</span> (A.dot(B))</span><br><span class="line">print(np.dot(A,B))</span><br><span class="line"></span><br><span class="line">[[<span class="hljs-number">5</span> <span class="hljs-number">4</span>]</span><br><span class="line"> [<span class="hljs-number">3</span> <span class="hljs-number">4</span>]]</span><br></pre></td></tr></table></figure><p>横向相加</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = np.floor(<span class="hljs-number">10</span>*np.random.random((<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)))</span><br><span class="line">b = np.floor(<span class="hljs-number">10</span>*np.random.random((<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)))</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(np.hstack((a,b)))</span><br><span class="line"></span><br><span class="line">[[ <span class="hljs-number">2.</span>  <span class="hljs-number">3.</span>]</span><br><span class="line"> [ <span class="hljs-number">9.</span>  <span class="hljs-number">3.</span>]]</span><br><span class="line">[[ <span class="hljs-number">8.</span>  <span class="hljs-number">1.</span>]</span><br><span class="line"> [ <span class="hljs-number">0.</span>  <span class="hljs-number">0.</span>]]</span><br><span class="line">[[ <span class="hljs-number">2.</span>  <span class="hljs-number">3.</span>  <span class="hljs-number">8.</span>  <span class="hljs-number">1.</span>]</span><br><span class="line"> [ <span class="hljs-number">9.</span>  <span class="hljs-number">3.</span>  <span class="hljs-number">0.</span>  <span class="hljs-number">0.</span>]]</span><br></pre></td></tr></table></figure><p>纵向相加</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(np.vstack((a,b)))</span><br><span class="line"></span><br><span class="line">[[ <span class="hljs-number">2.</span>  <span class="hljs-number">3.</span>]</span><br><span class="line"> [ <span class="hljs-number">9.</span>  <span class="hljs-number">3.</span>]</span><br><span class="line"> [ <span class="hljs-number">8.</span>  <span class="hljs-number">1.</span>]</span><br><span class="line"> [ <span class="hljs-number">0.</span>  <span class="hljs-number">0.</span>]]</span><br></pre></td></tr></table></figure><p>矩阵分割</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#横向分割</span></span><br><span class="line">print( np.hsplit(a,<span class="hljs-number">3</span>))</span><br><span class="line"><span class="hljs-comment">#纵向风格</span></span><br><span class="line">print(np.vsplit(a,<span class="hljs-number">3</span>))</span><br></pre></td></tr></table></figure><h1 id="7-复制的区别"><a href="#7-复制的区别" class="headerlink" title="7. 复制的区别"></a>7. 复制的区别</h1><h2 id="地址复制"><a href="#地址复制" class="headerlink" title="地址复制"></a>地址复制</h2><p>通过 b = a 复制 a 的值，b 与 a 指向同一地址，改变 b 同时也改变 a。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="hljs-number">12</span>)</span><br><span class="line">b = a</span><br><span class="line">print(a <span class="hljs-keyword">is</span> b)</span><br><span class="line"></span><br><span class="line">print(a.shape)</span><br><span class="line">print(b.shape)</span><br><span class="line">b.shape = (<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)</span><br><span class="line">print(a.shape)</span><br><span class="line">print(b.shape)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">True</span></span><br><span class="line">(<span class="hljs-number">12</span>,)</span><br><span class="line">(<span class="hljs-number">12</span>,)</span><br><span class="line">(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)</span><br><span class="line">(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)</span><br></pre></td></tr></table></figure><h2 id="复制值"><a href="#复制值" class="headerlink" title="复制值"></a>复制值</h2><p>通过 a.view() 仅复制值，当对 c 值进行改变会改变 a 的对应的值，而改变 c 的 shape 不改变 a 的 shape</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="hljs-number">12</span>)</span><br><span class="line">c = a.view()</span><br><span class="line">print(c <span class="hljs-keyword">is</span> a)</span><br><span class="line"></span><br><span class="line">c.shape = <span class="hljs-number">2</span>,<span class="hljs-number">6</span></span><br><span class="line">c[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>] = <span class="hljs-number">9999</span></span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">False</span></span><br><span class="line">[<span class="hljs-number">9999</span>    <span class="hljs-number">1</span>    <span class="hljs-number">2</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span>    <span class="hljs-number">5</span>    <span class="hljs-number">6</span>    <span class="hljs-number">7</span>    <span class="hljs-number">8</span>    <span class="hljs-number">9</span>   <span class="hljs-number">10</span>   <span class="hljs-number">11</span>]</span><br><span class="line">[[<span class="hljs-number">9999</span>    <span class="hljs-number">1</span>    <span class="hljs-number">2</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span>    <span class="hljs-number">5</span>]</span><br><span class="line"> [   <span class="hljs-number">6</span>    <span class="hljs-number">7</span>    <span class="hljs-number">8</span>    <span class="hljs-number">9</span>   <span class="hljs-number">10</span>   <span class="hljs-number">11</span>]]</span><br></pre></td></tr></table></figure><h2 id="完整拷贝"><a href="#完整拷贝" class="headerlink" title="完整拷贝"></a>完整拷贝</h2><p>a.copy() 进行的完整的拷贝，产生一份完全相同的独立的复制</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="hljs-number">12</span>)</span><br><span class="line">c = a.copy()</span><br><span class="line">print(c <span class="hljs-keyword">is</span> a)</span><br><span class="line"></span><br><span class="line">c.shape = <span class="hljs-number">2</span>,<span class="hljs-number">6</span></span><br><span class="line">c[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>] = <span class="hljs-number">9999</span></span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">False</span></span><br><span class="line">[ <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>]</span><br><span class="line">[[<span class="hljs-number">9999</span>    <span class="hljs-number">1</span>    <span class="hljs-number">2</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span>    <span class="hljs-number">5</span>]</span><br><span class="line"> [   <span class="hljs-number">6</span>    <span class="hljs-number">7</span>    <span class="hljs-number">8</span>    <span class="hljs-number">9</span>   <span class="hljs-number">10</span>   <span class="hljs-number">11</span>]]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven实战</title>
      <link href="/post/cfedc026.html"/>
      <url>/post/cfedc026.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2791079-303273c132c0e2c2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Maven"></p><p>Maven 是跨平台的项目管理工具，主要服务于基于Java平台的项目构建、依赖管理和项目信息管理。Maven 的主要思想是<strong>约定优于配置。</strong>通过将约定项目的目录结构，抽象项目的生命周期的方式，将程序员从繁琐的项目构建中解放出来。</p><a id="more"></a><p>本文是《Maven 实战》的笔记归纳，找到一本好书就像发现一座宝藏，让人获益匪浅。</p><p><em>注：本文用的是 maven-3.5.0 版本。</em></p><h1 id="Maven-优点和作用"><a href="#Maven-优点和作用" class="headerlink" title="Maven 优点和作用"></a>Maven 优点和作用</h1><p>日常工作除了编写源代码，每天有相当一部分时间花在了项目构建中，他们包括项目的编译、运行单元测试、生成文档、打包和部署等烦琐且不起眼的工作。</p><p><img src="http://upload-images.jianshu.io/upload_images/2791079-859c04701c2ddf04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建过程"></p><p><strong>项目自动化构建。</strong>Maven 提供一套规范以及一系列脚本，从清理、编译、测试到生成报告，再到打包和部署实现自动化构建。还提供了插件扩展的方式，进一步简化构建的过程。Maven 还能对项目进行编译、测试、打包，并且将项目生成的构建部署到仓库中。</p><p><strong>Maven 是跨平台的。</strong>对外提供了一致的操作接口，无论在 windows 平台、Linux 平台还是 Mac 上都能用相同的命令进行操作。同时，Maven 项目目录结构、测试用例命名方式等内容都有既定的规则，只要遵循了这些成熟的规则，用户在项目间切换的时候就免去了额外的学习成本。</p><p><strong>Maven 是依赖管理工具。</strong>Java 项目需要依赖许多的 jar 包，随着依赖的增多，版本不一致、版本冲突、依赖臃肿等问题都会接踵而来。Maven 通过<code>仓库</code>统一存储这些 jar 包，并通过 <code>pom 文件</code>来管理这些依赖。</p><p><strong>Maven 是项目配置工具。</strong>Maven能帮助我们管理原本分散在项目中各个角落的项目信息，包括项目描述、开发者列表、版本控制系统地址、许可证、缺陷管理系统地址等。</p><h1 id="Maven-的仓库"><a href="#Maven-的仓库" class="headerlink" title="Maven 的仓库"></a>Maven 的仓库</h1><p><img src="http://upload-images.jianshu.io/upload_images/2791079-d20d3311a6127928.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="maven 概念模型"></p><p>以上是 Maven 的概念模型，前面说过 Maven 能管理众多的 jar 包，并且梳理他们之间的依赖关系。Maven 通过 <code>pom 文件</code>和<code>仓库</code>进行实现。</p><h2 id="仓库的作用"><a href="#仓库的作用" class="headerlink" title="仓库的作用"></a>仓库的作用</h2><p>如果没有 maven 我们要使用一个 jar 包要从项目的官网寻找下载 jar 到本地，然后再将 jar 包导入到项目中。这样存在几个问题：</p><ol><li>去相应的网站寻找 jar 包费精力</li><li>下载之后当需要用到某一个 jar 包的时候还要在本地找 jar 包</li><li>依赖的 jar 包有多个版本要怎么管理<br>…</li></ol><p><strong>最好的解决方式就是将这些 jar 包统一管理，每次只要去一个地方找就可以了。</strong></p><p>Maven 就帮我们做了这样一件事情，他提供一个免费的<code>中央仓库http://repo1.maven.org/maven2</code>,该中央仓库包含了世界上大部分流行的开源项目。</p><p>我们可以从中央仓库下载需要的 jar 包，从<code>中央仓库</code>下载的 jar 包会统一保存在 maven 的<code>本地仓库</code>中。<code>本地仓库</code>在本机的<code>.m2</code>文件夹中。</p><p><code>本地仓库更多相关信息可以去搜索 maven 的安装教程。</code></p><h2 id="更多种类的仓库"><a href="#更多种类的仓库" class="headerlink" title="更多种类的仓库"></a>更多种类的仓库</h2><p><img src="http://upload-images.jianshu.io/upload_images/2791079-8a4b71d47412944c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Maven 仓库"></p><p><strong>远程仓库除了中央仓库还有私服和其他公共仓库。</strong></p><h3 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h3><p><strong>私服是一种特殊的远程仓库</strong>，它是架设在局域网内的仓库服务，私服代理广域网上的远程仓库，供局域网内的Maven用户使用。</p><p><img src="http://upload-images.jianshu.io/upload_images/2791079-8400377310b692db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Maven 私服"></p><p>上图是搭建私服的示意图。私服会将其他公共仓库的 jar 缓存到搭建的服务器上，局域网内的用户还可以将构建的项目直接放到私服上供其他开发人员使用。</p><p>架设私服是 Maven 推荐的做法，私服减少中央服务器的压力。如果没有私服，每次请求都需要向中央服务器请求，有了私服之后通过私服的服务器向中央仓库请求，局域网内的用户只需要向私服请求即可。</p><h3 id="其他公共仓库"><a href="#其他公共仓库" class="headerlink" title="其他公共仓库"></a>其他公共仓库</h3><p>比如 Maven 的中央仓库部署在国外，国内访问外网速度不够，我们可以在国内架设 Maven 的公共仓库。</p><p>如果仓库 X 可以提供仓库 Y 存储的所有内容，那么就可以认为 X 是 Y 的一个镜像，显然在国内我们需要一个中央仓库的镜像。<code>http://maven.net.cn/content/groups/public/</code>是中央仓库，<code>http://repo1.maven.org/maven2/</code>在中国的镜像。</p><p>Maven 默认是从中央仓库下载文件的，想要让其从其他地方下载文件就要进行配置，这里就需要操作 maven 的 <code>setting.xml</code> 文件了。</p><h1 id="setting-文件"><a href="#setting-文件" class="headerlink" title="setting 文件"></a>setting 文件</h1><p>在安装好 maven 的基础上，进入 maven 的安装目录，可以看到如下的目录结构：</p><p><img src="http://upload-images.jianshu.io/upload_images/2791079-e21ac5953d467484.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Maven 目录"></p><ul><li>bin : mvn 的一些脚本文件</li><li>boot : 含有 plexus-classworlds 类加载器框架</li><li>conf : 配置文件</li><li>lib : maven 所使用的 jar 包（maven 基于 java 开发）</li></ul><p><code>setting.xml</code> 文件就在<code>conf</code>目录中。<strong>这里的<code>setting.xml</code>是 maven 全局的配置文件，不建议修改。</strong>修改之后会影响 maven 的升级等操作。常用的做法是拷贝一份<code>setting.xml</code>到 maven 本地仓库的同一目录下，而本地仓库配置在用户目录的<code>.m2</code>文件夹中，此时的<code>setting.xml</code>就是用户级别的配置文件。</p><p><strong>强烈建议遵循以上规范，避免不必要的麻烦。</strong></p><h2 id="自定义本地仓库位置"><a href="#自定义本地仓库位置" class="headerlink" title="自定义本地仓库位置"></a>自定义本地仓库位置</h2><p>接下来就来看<code>setting.xml</code>的一些配置了。</p><p>首先<code>localRepository</code>定义本地仓库位置，默认在用户目录下的<code>.m2/repository</code>中。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="line"></span><br><span class="line">&lt;localRepository&gt;</span><br><span class="line">    /path/to/local/repo</span><br><span class="line">&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure><h2 id="配置多个远程仓库"><a href="#配置多个远程仓库" class="headerlink" title="配置多个远程仓库"></a>配置多个远程仓库</h2><p>前面讲过有中央仓库和其他远程仓库，配置远程仓库就在<code>repositories</code>中配置。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">             &lt;id&gt;jboss&lt;/id&gt;</span><br><span class="line">             &lt;name&gt;JBoss Repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://repository.jboss.com/maven2/&lt;/url&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">               &lt;updatePolicy&gt;daily&lt;/updatePolicy&gt;</span><br><span class="line">            &lt;/releases&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                 &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">                 &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;</span><br><span class="line">           &lt;/snapshots&gt;</span><br><span class="line">             &lt;layout&gt;default&lt;/layout&gt;</span><br><span class="line">      &lt;/repository&gt;</span><br><span class="line">&lt;/repositories&gt;</span><br></pre></td></tr></table></figure><p>在repositories元素下，可以使用repository子 元素声明一个或者多个远程仓库。</p><h2 id="配置中央仓库镜像"><a href="#配置中央仓库镜像" class="headerlink" title="配置中央仓库镜像"></a>配置中央仓库镜像</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">＜settings＞ …… </span><br><span class="line">＜mirrors＞ </span><br><span class="line">＜mirror＞ </span><br><span class="line">＜id＞maven.net.cn＜/id＞ </span><br><span class="line">＜name＞one of the central mirrors in China ＜/name＞</span><br><span class="line">＜url＞ http://maven.net.cn/content/groups/public/ ＜/url＞ </span><br><span class="line">＜mirrorOf＞central＜/mirrorOf＞ ＜/mirror＞ ＜/mirrors＞ …… </span><br><span class="line">＜/settings＞</span><br></pre></td></tr></table></figure><h2 id="配置私服作为镜像"><a href="#配置私服作为镜像" class="headerlink" title="配置私服作为镜像"></a>配置私服作为镜像</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">     &lt;mirror&gt;</span><br><span class="line">       &lt;id&gt;maven.oschina.net&lt;/id&gt;</span><br><span class="line">       &lt;name&gt;maven mirror in China&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;</span><br><span class="line">       &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">&lt;/mirrors&gt;</span><br></pre></td></tr></table></figure><h2 id="仓库搜索服务"><a href="#仓库搜索服务" class="headerlink" title="仓库搜索服务"></a>仓库搜索服务</h2><p>以下网站提供 Maven 仓库搜索功能。</p><ul><li>Sonatype Nexus地址：<a href="http://repository.sonatype.org/" target="_blank" rel="noopener">http://repository.sonatype.org/</a></li><li>MVNrepository地址：<a href="http://mvnrepository.com/" target="_blank" rel="noopener">http://mvnrepository.com/</a></li></ul><p><em>一般我就用最后一个搜索。</em></p><h1 id="Maven-坐标"><a href="#Maven-坐标" class="headerlink" title="Maven 坐标"></a>Maven 坐标</h1><p>现在有了仓库统一保管这些 jar 包，剩下的问题就是怎么取了。</p><p>不知道你有没有取快递的经验。我们可以这些 jar 包想象成是快递，仓库中保管着这些快递。我们去认领快递需要依靠快递单来确定，一张快递单上会有单号、我们的姓名、手机号等信息。依靠这些信息就不会领错快递了。</p><p>这里的快递单就像 Maven 中的 <code>pom 文件</code>，单子上的信息就像是 <code>pom 文件中的坐标系</code>。</p><p><img src="http://upload-images.jianshu.io/upload_images/2791079-7c2a3316cd5dd610.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pom.xml"></p><p>Maven 项目规定的项目结构是这样的：</p><ul><li>src/main/java —— 存放项目的.java文件</li><li>src/main/resources —— 存放项目资源文件，如spring, hibernate配置文件</li><li>src/test/java —— 存放所有测试.java文件，如JUnit测试类</li><li>src/test/resources —— 测试资源文件</li><li>target —— 项目输出位置</li><li>pom.xml——maven项目核心配置文件</li></ul><p>每个 maven 项目都有 <code>pom.xml</code> 文件。Maven坐标为各种构件引入了秩序，任何一个构件都必须明确定义自己的坐标。</p><p><img src="http://upload-images.jianshu.io/upload_images/2791079-52d19a7fec46bf6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="坐标系"></p><p>一组 Maven坐标是通过一些元素定义的，它们是 groupId、artifactId、version、packaging、 classifier：</p><ul><li><p>groupId：定义当前Maven项目隶属的实际项目，通常为域名反写</p></li><li><p>artifactId：该元素定义实际项目中的一个 Maven项目（模块），推荐的做法是使用实际项目名称作为artifactId的前缀。</p></li><li><p>version：该元素定义Maven项目当前所处的 版本，</p></li><li><p>packaging：该元素定义Maven项目的打包方 式。当不定义packaging的时候，Maven会使用默认值jar。</p></li><li><p>classifier：该元素用来帮助定义构建输出的一些附属构件。</p></li></ul><p>通过坐标系我们来保证项目在 Maven 仓库中的唯一性，每次取也不会取错了。</p><h1 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h1><p>我们自己项目需要用别人的 jar 包，比如 spring。这就是我们的项目依赖于 spring，因此我们通过 pom 来配置这样的依赖关系，这样就能让项目有清晰的结构。</p><p>依赖的关系用用<code>&lt;dependecy&gt;</code>标签来表示依赖：</p><p><img src="http://upload-images.jianshu.io/upload_images/2791079-a7711a8aa8b04871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dependencies"></p><p><em>上图说明该项目依赖了 hibernate 等</em></p><h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2><p>现在来考虑一种情况，我们在项目开发的过程中用到了 junit 进行测试，也就是说我们的项目依赖于 junit。在项目构建的过程中我们会把 junit 也打包在项目中。但是在生产环境中完全没有必要用到 junit，我们并不想将它发布到生产环境中。</p><p>我们可以每次在发布项目之前把他删除了对么？那如果依赖 servlet-api，我们只有在编译和测试项目的时候需要该依赖，但在运行项目的时候，由于容器已经提供，也不需要 Maven 重复地引入一遍。</p><p><strong>所以最好是在编译、测试、运行的过程中需要用到什么 jar 包，就让 Maven 去打包什么。</strong></p><p>maven 为此提供了<code>scope</code>标签表示<code>依赖范围</code>，表示该 jar 包在什么时候需要被使用。</p><p><img src="http://upload-images.jianshu.io/upload_images/2791079-65d7decfb178a767.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="依赖范围"></p><ul><li>compile：编译依赖范围，使用此依赖范围对于编译、测试、运行三种classpath都有效，即在编译、测试和运行时都要使用该依赖jar包；</li><li>test：测试依赖范围，只对测试有效，表明只在测试的时候需要，在编译和运行时将无法使用该类依赖，如 junit；</li><li>provided：已提供依赖范围。编译和测试有效，运行无效。如servlet-api，在项目运行时，tomcat等容器已经提供，无需Maven重复引入；</li><li>runtime：运行时依赖范围。测试和运行有效，编译无效。如 jdbc 驱动实现，编译时只需接口，测试或运行时才需要具体的 jdbc 驱动实现；</li><li>system：系统依赖范围，使用system范围的依赖时必须通过systemPath元素显示地指定依赖文件的路径，不依赖Maven仓库解析，所以可能会造成建构的不可移植，谨慎使用。</li></ul><h2 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h2><p>依赖范围除了控制classpath，还会对依赖传递产生影响。如果A依赖B，B依赖C，则A对于B是第一直接依赖。B对于C是第二直接依赖。A对于C是传递性依赖。结论是：第一直接依赖的范围和第二直接依赖的范围决定了传递性依赖的范围。</p><p><img src="http://upload-images.jianshu.io/upload_images/2791079-2a80f29f531ca8c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="依赖传递"></p><p>第一列是第一直接依赖，第一行是第二直接依赖，中间表示传递性依赖范围。</p><p>此外 maven 还提供了<code>option</code>和<code>exclusions</code>来进一步管理依赖，分别称为<code>可选依赖</code>和<code>排除依赖</code>。</p><p><img src="http://upload-images.jianshu.io/upload_images/2791079-1bb963176649ce15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="可选依赖"></p><p><em>在依赖中添加 <optional> true/false <optional> 表示是否向下传递。</optional></optional></em></p><p>如上图所示，B 依赖于 X,Y 而 A 依赖于 B，如果 B 不希望将依赖传递给 A 则可以配置 B 中的 X,Y 依赖的<code>optional</code>为 true 来阻止依赖的传递。</p><p><img src="http://upload-images.jianshu.io/upload_images/2791079-ebe51ef3d448eb65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="排除依赖"></p><p>再来看一种情况，A 依赖于 B，且 B 将他的依赖 C 传递给了 A。但是 A 依赖了 C 的另一个版本。这个时候 A 可以主动排除 B 给的 C 依赖，转而使用自己需要的版本，这就用到了<code>exclusions</code>标签。</p><p>用exclusions元素声明排除依赖，exclusions可以包 含一个或者多个exclusion子元素，因此可以排除一个或者多个传递性依赖。</p><p><strong>所以我用主动和被动的方式来区分他们。</strong></p><h2 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h2><p>接上面的问题，如果 A 和 B 依赖 C 的不同版本，而且既没有配置<code>可选依赖</code>也没有配置<code>排除依赖</code>。两个版本都被解析显然是不对的，因为那会造成依赖重复，因此必须选择一个。</p><p><strong>路径最近者优先。</strong>如果直接与间接依赖中包含有同一个坐标不同版本的资源依赖，以直接依赖的版本为准。</p><p><strong>第一声明者优先。</strong>在依赖路径长度相等的前 提下，在POM中依赖声明的顺序决定了谁会被解析使用，顺序最靠前的那个依赖优胜。</p><p>上面例子中,A -&gt; C(1.10) 和 A -&gt; B -&gt; C(?),C(1.10)的路径短所以用它。</p><h1 id="Maven-生命周期"><a href="#Maven-生命周期" class="headerlink" title="Maven 生命周期"></a>Maven 生命周期</h1><p>Maven的生命周期就是为了对所有的构建过程进行抽象和统一。这个生命周期包含了项目的 清理、初始化、编译、测试、打包、集成测试、 验证、部署和站点生成等几乎所有构建步骤。</p><p>初学者往往会以为Maven的生命周期是一个整体，其实不然。Maven拥有三套相互独立的生命周期，它们分别为clean、default和site。clean生命周期的目的是清理项目，default生命周期的目的是构建项目，而site生命周期的目的是建立项目站点。</p><h2 id="clean-生命周期。"><a href="#clean-生命周期。" class="headerlink" title="clean 生命周期。"></a>clean 生命周期。</h2><p>clean生命周期的目的是清理项目，它包含三个阶段：</p><ul><li>pre-clean 执行一些需要在clean之前完成的工作 </li><li>clean 移除所有上一次构建生成的文件 </li><li>post-clean 执行一些需要在clean之后立刻完成的工作 </li></ul><p>mvn clean 中的clean就是上面的clean，在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行，也就是说，mvn clean 等同于 mvn pre-clean clean ，如果我们运行 mvn post-clean ，那么 pre-clean，clean 都会被运行。这是Maven很重要的一个规则，可以大大简化命令行的输入。</p><h2 id="default生命周期"><a href="#default生命周期" class="headerlink" title="default生命周期"></a>default生命周期</h2><p>default生命周期定义了真正构建时所需要执 行的所有步骤，它是所有生命周期中最核心的部分，其包含的阶段如下：</p><ul><li>validate </li><li>generate-sources </li><li>process-sources </li><li>generate-resources </li><li>process-resources 复制并处理资源文件，至目标目录，准备打包。 </li><li>compile 编译项目的源代码。 </li><li>process-classes </li><li>generate-test-sources </li><li>process-test-sources </li><li>generate-test-resources </li><li>process-test-resources 复制并处理资源文件，至目标测试目录。 </li><li>test-compile 编译测试源代码。 </li><li>process-test-classes </li><li>test 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。 </li><li>prepare-package </li><li>package 接受编译好的代码，打包成可发布的格式，如 JAR 。 </li><li>pre-integration-test </li><li>integration-test </li><li>post-integration-test </li><li>verify </li><li>install 将包安装至本地仓库，以让其它项目依赖。 </li><li>deploy 将最终的包复制到远程的仓库，以让其它开发人员与项目共享。 </li></ul><p>运行任何一个阶段的时候，它前面的所有阶段都会被运行，这也就是为什么我们运行mvn install 的时候，代码会被编译，测试，打包。此外，Maven的插件机制是完全依赖Maven的生命周期的，因此理解生命周期至关重要。 </p><h2 id="site生命周期"><a href="#site生命周期" class="headerlink" title="site生命周期"></a>site生命周期</h2><p>site生命周期的目的是建立和发布项目站点，Maven能够基于POM所包含的信息，自动生成一个友好的站点，方便团队交流和发布项目信息。</p><ul><li>pre-site 执行一些需要在生成站点文档之前完成的工作<br>site 生成项目的站点文档 </li><li>post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备 </li><li>site-deploy 将生成的站点文档部署到特定的服务器上 </li></ul><p>这里经常用到的是site阶段和site-deploy阶段，用以生成和发布Maven站点，这可是Maven相当强大的功能，Manager比较喜欢，文档及统计数据自动生成，很好看。 </p><h2 id="命令与生命周期"><a href="#命令与生命周期" class="headerlink" title="命令与生命周期"></a>命令与生命周期</h2><p>mvn clean：该命令调用clean生命周期的clean阶段。实际执行的阶段为clean生命周期的 pre-clean和clean阶段。</p><p>mvn test：该命令调用default生命周期的test阶段。实际执行的阶段为default生命周期的 validate、initialize等，直到test的所有阶段。这也解释了为什么在执行测试的时候，项目的代码能够自动得以编译。</p><p>mvn clean install：该命令调用clean生命周期 的clean阶段和default生命周期的install阶段。</p><p>mvn clean deploy site-deploy：该命令调用 clean生命周期的clean阶段、default生命周期的 deploy阶段，以及site生命周期的site-deploy阶段。</p><h1 id="聚合与继承"><a href="#聚合与继承" class="headerlink" title="聚合与继承"></a>聚合与继承</h1><p>软件设计人员往往会采用各种方式对软件划分模块，以得到更清晰的设计及更高的重用性。当把Maven应用到实际项目中的时候，也需要将<strong>项目分成不同的模块。</strong></p><p>简单的说就是有 A,B 两个模块，现在想要将他们统一管理。<strong>Maven 的聚合特性</strong>能够把项目的各个模块聚合在一起构建，而<strong>Maven的继承特性</strong>则能帮助抽取各模块相同的依赖和插件等配置，在简化POM的同时，还能促进各个模块配置的一致性。</p><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>两个子模块希望同时构建。这时，一个简单的需求就会自然而然地显现出来：我们会想要一次构建两个项目，而不是到两个模块的目录下分别执行mvn命令。Maven聚合（或者称为多模块）这一特性就是为该需求服务的。</p><p><img src="http://upload-images.jianshu.io/upload_images/2791079-fc655f8309d1609a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目结构"></p><p>上图所示<code>api</code>是一个模块，<code>cmd</code>是一个模块他们都有各自的 pom 文件，其实每一个包都是一个子模块，而最底下的 pom 文件则是统一管理这些子模块。</p><p><strong>他们的配置很简单，我们最好遵循规范。</strong></p><p><strong>api 的 pom.xml</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.shuiyujie.fu&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;sop&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;artifactId&gt;api&lt;/artifactId&gt;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><strong>cmd 的 pom.xml</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.shuiyujie.fu&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;sop&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;artifactId&gt;cmd&lt;/artifactId&gt;</span><br></pre></td></tr></table></figure><p><strong>聚合 pom.xml</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;groupId&gt;com.shuiyujie.fu&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;pom&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;sop&lt;/packaging&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;sop&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line">    ...    </span><br><span class="line">        &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;base&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;core&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;server&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;persist&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;api&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;impl&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;cmd&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>观察上面的三个代码清单可以聚合 pom 文件中定义了 <code>&lt;modules&gt;</code> 标签，标签中包含的就是各个子模块，并且用子模块的<code>artifactId</code>来标记他们。</p><p><em>注意：聚合 pom 文件的打包方式，即 <code>packaging</code> 必须为 pom。</em></p><p>这样只需要构建聚合 pom 文件即可同时构建在其管理下的多个子模块。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>消除重复。在面向对象世界中，程序员可以使用类继承在一定程度上消除重复，在Maven的世界 中，也有类似的机制能让我们抽取出重复的配 置，这就是POM的继承。</p><p>任然看上面的三个 pom.xml 代码清单，子模块都有一个<code>parent</code>标签，这就表明他们继承了一个 pom 文件，而<code>parent</code>标签下的其他标签就是一个<code>坐标系</code>，通过一个坐标系就能定位一个唯一的项目。</p><p>比如上面的子模块继承自<code>聚合 pom 文件</code>，所以此时<code>聚合 pom 文件</code>也是<code>父类 pom 文件</code>。</p><h2 id="排除父类的依赖"><a href="#排除父类的依赖" class="headerlink" title="排除父类的依赖"></a>排除父类的依赖</h2><p>在继承的过程中我们考虑一种情形，我们希望在父类中统一控制 spring 的版本，然后子类继承自父类就可以使用统一版本的 spring 依赖了。但是有些子模块不需要依赖 spring，并不需要从父类继承 spring 的依赖。</p><p><strong>我们可以使用<code>dependencyManagement</code> 标签。</strong></p><p><strong>父类 pom.xml</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;!-- 模块间依赖 start --&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;$&#123;project.groupId&#125;&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;core&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;$&#123;project.groupId&#125;&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;persist&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;$&#123;project.groupId&#125;&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;api&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;$&#123;project.groupId&#125;&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;impl&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;$&#123;project.groupId&#125;&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;server&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;$&#123;project.groupId&#125;&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;cmd&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;!-- 模块间依赖 end --&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure><p>父类<code>dependencyManagement</code>中声明了各个子模块，子模块之间有的会需要相互引用，有的却并不需要。所以在父类中统一配置各个子模块的<code>groupId</code>,<code>artifactId</code>,<code>version</code>等基本信息。</p><p><strong>在<code>dependencyManagement</code>中声明的依赖不会在当前pom中引入依赖，也不会再继承他的pom中引入依赖，他的作用只是声明了可能要引入依赖的一些通用信息。</strong></p><p>如果要使用一个子模块要使用其他子模块就可以另外声明，但是不需要指定版本等通用信息，这样就可以减少依赖冲突的发生，代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.shuiyujie.fu&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;sop&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;artifactId&gt;api&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;$&#123;project.parent.groupId&#125;&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fu-persist&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h1 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h1><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mvn -v //查看版本 </span><br><span class="line">mvn archetype:create //创建 Maven 项目 </span><br><span class="line">mvn compile //编译源代码 </span><br><span class="line">mvn test-compile //编译测试代码 </span><br><span class="line">mvn test //运行应用程序中的单元测试 </span><br><span class="line">mvn site //生成项目相关信息的网站 </span><br><span class="line">mvn package //依据项目生成 jar 文件 </span><br><span class="line">mvn install //在本地 Repository 中安装 jar </span><br><span class="line">mvn -Dmaven.test.skip=true //忽略测试文档编译 </span><br><span class="line">mvn clean //清除目标目录中的生成结果 </span><br><span class="line">mvn clean compile //将.java类编译为.class文件 </span><br><span class="line">mvn clean package //进行打包 </span><br><span class="line">mvn clean test //执行单元测试 </span><br><span class="line">mvn clean deploy //部署到版本仓库 </span><br><span class="line">mvn clean install //使其他项目使用这个jar,会安装到maven本地仓库中 </span><br><span class="line">mvn archetype:generate //创建项目架构 </span><br><span class="line">mvn dependency:list //查看已解析依赖 </span><br><span class="line">mvn dependency:tree //看到依赖树 </span><br><span class="line">mvn dependency:analyze //查看依赖的工具 </span><br><span class="line">mvn help:system //从中央仓库下载文件至本地仓库 </span><br><span class="line">mvn help:active-profiles //查看当前激活的profiles </span><br><span class="line">mvn help:all-profiles //查看所有profiles </span><br><span class="line">mvn help:effective -pom //查看完整的pom信息</span><br></pre></td></tr></table></figure><h1 id="总结：Maven-的思想"><a href="#总结：Maven-的思想" class="headerlink" title="总结：Maven 的思想"></a>总结：Maven 的思想</h1><p><strong>Maven 的核心思想是约定优于配置。</strong></p><p>首先，Maven 约定了项目的结构，我们不需要配置 Maven 编译、打包等操作时文件的位置。统一的项目结构降低了学习的成本，让我能将精力集中到了项目本身。</p><p>其次，Maven 抽象了项目构建的过程，将其分成一个个生命周期进行管理。通过命令和插件的形式进一步简化操作，又让我们从繁琐的操作解放出来。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://book.douban.com/subject/5345682/" target="_blank" rel="noopener">《Maven 实战》</a></p><p><a href="http://www.jianshu.com/p/94b060e016a2" target="_blank" rel="noopener">Maven远程仓库的各种配置</a></p><blockquote><p>本文大部分内容来自于《Maven 实战》一书，想要了解一手信息强烈建议阅读。网上的其他文章基本上都是摘抄《Maven 实战》的部分内容。</p><p>所以还想说一遍：发现一本好书就像发现了一座宝藏。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反射和动态代理</title>
      <link href="/post/e0acc964.html"/>
      <url>/post/e0acc964.html</url>
      
        <content type="html"><![CDATA[<p>反射提供了一种机制——用来检测可用的方法，并返回方法名。通过类名我们就能获取 Class 对象，并通过 Class 对象获取对象相关的一些属性和方法等。</p><p>最常见到的地方就是在各种配置文件中的应用，它的使用就像<strong>传入一个字符串，然后字符串去获取了相应的对象。</strong></p><a id="more"></a><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>在了解反射之前要知道组成 Java 程序的是一个个类，每一个类都有一个 <code>Class 对象</code>，他对应一个<code>.class</code>文件。</p><p>所有的类都是在被第一次被调用的时候加载到 JVM 中的，并且一个类的也不是一次性加载完成，是在用到某一部分的时候才加载的。比如一个类被加载的时候一定会先加载静态变量，所以我们把常量定义为静态的。</p><p><em>注：以上内容整理自《Java 编程思想》。</em></p><p>我们用反射的第一步就是要获取<code>Class 对象</code>，再去获取他的其他属性。可以使用<code>Class.forName()</code>方法获取。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyReflect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> String className = <span class="hljs-keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"rawtypes"</span>)</span><br><span class="line">    <span class="hljs-keyword">public</span> Class dogClass = <span class="hljs-keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 反射获取 Dog 类</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Before</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        className = <span class="hljs-string">"com.shuiyujie.reflection.Dog"</span>;</span><br><span class="line">        dogClass = Class.forName(className);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>获取<code>Class 对象</code>之后，我们可以通过它创建一个实例对象</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 获得对象实例，调用无参构造</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Test</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">newInstance</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        System.out.println(dogClass.newInstance());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>还可以通过它获取对象的构造方法、成员变量、成员方法等，方法又有公有和非公有之分，非公有的如果我们要强制获取要消除他的类型校验，<strong>这就是反射 API 要知道的大部分内容了</strong>，示例代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">    * 获取公共的成员变量</span></span><br><span class="line"><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">   <span class="hljs-meta">@SuppressWarnings</span>(&#123; <span class="hljs-string">"rawtypes"</span>, <span class="hljs-string">"unchecked"</span> &#125;)</span><br><span class="line">   <span class="hljs-meta">@Test</span></span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getPublicParams</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       Constructor constructor = dogClass.getConstructor(Long.class,String.class);</span><br><span class="line">       Object obj = constructor.newInstance(<span class="hljs-number">1L</span>, <span class="hljs-string">"Lucky"</span>);</span><br><span class="line"></span><br><span class="line">       Field field = dogClass.getField(<span class="hljs-string">"name"</span>);</span><br><span class="line">       field.set(obj,<span class="hljs-string">"Lucy"</span>);</span><br><span class="line">       System.out.println(field.get(obj));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">    * 获取非公共的成员变量</span></span><br><span class="line"><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">   <span class="hljs-meta">@SuppressWarnings</span>(&#123; <span class="hljs-string">"rawtypes"</span>, <span class="hljs-string">"unchecked"</span> &#125;)</span><br><span class="line">   <span class="hljs-meta">@Test</span></span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUnPublicParams</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       Constructor constructor = dogClass.getConstructor(Long.class,String.class);</span><br><span class="line">       Object obj = constructor.newInstance(<span class="hljs-number">1L</span>, <span class="hljs-string">"Lucky"</span>);</span><br><span class="line"></span><br><span class="line">       Field field = dogClass.getDeclaredField(<span class="hljs-string">"id"</span>);</span><br><span class="line">       field.setAccessible(<span class="hljs-keyword">true</span>);</span><br><span class="line">       field.set(obj,<span class="hljs-number">3L</span>);</span><br><span class="line">       System.out.println(field.get(obj));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">    * 获取公共的成员方法</span></span><br><span class="line"><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">   <span class="hljs-meta">@SuppressWarnings</span>(&#123; <span class="hljs-string">"rawtypes"</span>, <span class="hljs-string">"unchecked"</span> &#125;)</span><br><span class="line">   <span class="hljs-meta">@Test</span></span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getPublicMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       System.out.println(dogClass.getMethod(<span class="hljs-string">"toString"</span>));</span><br><span class="line">       Object obj = dogClass.newInstance();</span><br><span class="line">       Method method = dogClass.getMethod(<span class="hljs-string">"brak"</span>);</span><br><span class="line">       method.invoke(obj);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">    * 获取非公共的成员方法</span></span><br><span class="line"><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">   <span class="hljs-meta">@SuppressWarnings</span>(&#123; <span class="hljs-string">"rawtypes"</span>, <span class="hljs-string">"unchecked"</span> &#125;)</span><br><span class="line">   <span class="hljs-meta">@Test</span></span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUnPublicMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       Object obj = dogClass.newInstance();</span><br><span class="line">       Method method = dogClass.getDeclaredMethod(<span class="hljs-string">"dogBrak"</span>);</span><br><span class="line">       method.setAccessible(<span class="hljs-keyword">true</span>);</span><br><span class="line">       method.invoke(obj);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>此外他还有一些其他方法示例，更多可以参考 Class 类的 API</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Test</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">otherMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//当前加载这个class文件的那个类加载器对象</span></span><br><span class="line">        System.out.println(dogClass.getClassLoader());</span><br><span class="line">        <span class="hljs-comment">//获取某个类实现的所有接口</span></span><br><span class="line">        Class[] interfaces = dogClass.getInterfaces();</span><br><span class="line">        <span class="hljs-keyword">for</span> (Class class1 : interfaces) &#123;</span><br><span class="line">            System.out.println(class1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//反射当前这个类的直接父类</span></span><br><span class="line">        System.out.println(dogClass.getGenericSuperclass());</span><br><span class="line">        <span class="hljs-comment">//判断当前的Class对象表示是否是数组</span></span><br><span class="line">        System.out.println(dogClass.isArray());</span><br><span class="line">        System.out.println(<span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>].getClass().isArray());</span><br><span class="line">        <span class="hljs-comment">//判断当前的Class对象表示是否是枚举类</span></span><br><span class="line">        System.out.println(dogClass.isEnum());</span><br><span class="line">        System.out.println(Class.forName(<span class="hljs-string">"com.shuiyujie.reflection.Animal"</span>).isEnum());</span><br><span class="line">        <span class="hljs-comment">//判断当前的Class对象表示是否是接口</span></span><br><span class="line">        System.out.println(dogClass.isInterface());</span><br><span class="line">        System.out.println(Class.forName(<span class="hljs-string">"com.shuiyujie.reflection.AnimalInterface"</span>).isInterface());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p>动态代理指的是在不修改原业务的基础上，基于原业务方法，进行重新的扩展，实现新的业务。实现动态代理的核心就是反射机制。</p><p>用一个场景来描述动态代理。比如一个订单系统，有一个生成订单的 service，当我们要搞活动进行促销的时候，生成订单的价格根据活动降低价格。</p><p>修改原有的生成订单的方法无疑是不可行的，因为系统的其他模块可能也调用了这个方法，甚至活动有多种的优惠方式只改一个也不够。<strong>这里就可以用动态代理来代理订单生成的方法。</strong></p><p>代理我们也可以叫他中介，比如房产中介就是在客户之间起桥梁作用，动态代理就是在调用发和被调用方中间介入。</p><p>首先要有订单的接口和实现：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IOrderService</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getClothOrder</span><span class="hljs-params">(String size)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IOrderService</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> clothPrize = <span class="hljs-number">500</span>;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getClothOrder</span><span class="hljs-params">(String size)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"衣服的尺码为"</span> + size);</span><br><span class="line">        <span class="hljs-keyword">return</span> clothPrize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用一个 Controller 调用他获得价格：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderController</span> </span>&#123; </span><br><span class="line">    <span class="hljs-meta">@Test</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getOrder</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        IOrderService orderService = <span class="hljs-keyword">new</span> OrderServiceImpl();</span><br><span class="line">        <span class="hljs-keyword">int</span> price = orderService.getClothOrder(<span class="hljs-string">"L"</span>);</span><br><span class="line">        System.out.println(<span class="hljs-string">"价格为"</span> + price + <span class="hljs-string">"元"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">衣服的尺码为L</span><br><span class="line">价格为500元</span><br></pre></td></tr></table></figure><p>在<code>IOrderService</code>和<code>OrderServiceImpl</code>不变的情况下通过<code>IOrderService</code>来实现打折的效果，就要用到动态代理了。</p><p><strong>动态代理类：</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyCharge</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getProxy</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> discountCoupon,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">                                 <span class="hljs-keyword">final</span> Class&lt;?&gt; interfaceClass, <span class="hljs-keyword">final</span> Class&lt;?&gt; implementsClass)</span></span></span><br><span class="line"><span class="hljs-function">            <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> (T) Proxy.newProxyInstance(interfaceClass.getClassLoader(),</span><br><span class="line">                <span class="hljs-keyword">new</span> Class[]&#123;interfaceClass&#125;, (proxy, method, args) -&gt; &#123;</span><br><span class="line">                    Integer returnValue = (Integer) method.invoke(</span><br><span class="line">                            implementsClass.newInstance(), args);</span><br><span class="line">                    <span class="hljs-keyword">return</span> returnValue - discountCoupon;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键是通过<code>Proxy.newProxyInstance()</code>获取一个原来<code>OrderServiceImpl</code>的代理对象。我们需要传入借口对象和实现对象。</p><p>获取代理对象之后可以使用反射中的<code>invoke()</code>调用原先方法，也能进行自己扩展。</p><p><strong>代理方法调用：</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Test</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getChargeOrder</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    IOrderService proxyService = ProxyCharge.getProxy(<span class="hljs-number">200</span>,IOrderService.class,OrderServiceImpl.class);</span><br><span class="line">    <span class="hljs-keyword">int</span> price = proxyService.getClothOrder(<span class="hljs-string">"L"</span>);</span><br><span class="line">    System.out.println(<span class="hljs-string">"价格为"</span> + price + <span class="hljs-string">"元"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">衣服的尺码为L</span><br><span class="line">价格为<span class="hljs-number">300</span>元</span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>反射允许更加动态的编程风格，动态代理可以动态地获取代理对象并动态地处理对所代理对象的调用。</p><p>动态代理听上去很复杂但是他的实现方式是基本固定的，以上的示例代码是最简单的实现。同时动态代理是实现 RPC 框架不可或缺的一部分，现在温习一下为实现一个 RPC 框架做准备。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/post/2f57a694.html"/>
      <url>/post/2f57a694.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html" target="_blank" rel="noopener">最全的常用正则表达式大全——包括校验数字、字符、一些特殊的需求等等</a></p><p><a href="https://www.jianshu.com/p/e7bb97218946" target="_blank" rel="noopener">知道这20个正则表达式，能让你少写1,000行代码</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis 配置和使用</title>
      <link href="/post/5ed7ab06.html"/>
      <url>/post/5ed7ab06.html</url>
      
        <content type="html"><![CDATA[<p>MyBatis 是一款一流的支持自定义 SQL、存储过程和高级映射的持久化框架。MyBatis 几乎消除了所有的 JDBC 代码，也基本不需要手工去设置参数和获取检索结果。MyBatis 能够使用简单的 XML 格式或者注解进行来配置，能够映射基本数据元素、Map 接口和 POJOs（普通 java 对象）到数据库中的记录。</p><p><strong>简而言之：Mybatis 是一个半自动化的持久化框架，帮助我们简化对数据库的操作。</strong></p><a id="more"></a><h1 id="封装-SqlSession"><a href="#封装-SqlSession" class="headerlink" title="封装 SqlSession"></a>封装 SqlSession</h1><p>Mybatis 使用 SqlSession 调用他封装的一系列方法，而 SqlSession 则交由 SqlSessionFactory 进行管理。</p><h2 id="注入-SqlSession"><a href="#注入-SqlSession" class="headerlink" title="注入 SqlSession"></a>注入 SqlSession</h2><p>第一步就是配置 SqlSessionFactory 和 SqlSession。用 spring 和容易就能实现，在 spring 的配置文件<code>mybatis-spring.xml</code>中注入 bean:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:mapper/*.xml&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;</span><br><span class="line">        &lt;constructor-arg index=&quot;0&quot; ref=&quot;sqlSessionFactory&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>其中<code>configLocation</code>指向 mybatis 的配置文件，我们使用配置文件可以配置别名，别名可以用来指向一个实体类：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;!-- 指定包名 --&gt;</span><br><span class="line">        &lt;package name=&quot;com.shuiyujie.persist&quot;/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;!-- 指定类名 --&gt;</span><br><span class="line">        &lt;typeAlias alias=&quot;city&quot; type=&quot;com.shuiyujie.persist.City&quot;/&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>其中<code>mapperLocations</code>指定了 mybatis 的 Mapper 文件，配置之后会扫描指定包下的 XML 文件。<code>dataSource</code>指向配置的数据源。</p><h2 id="封装-SqlSession-1"><a href="#封装-SqlSession-1" class="headerlink" title="封装 SqlSession"></a>封装 SqlSession</h2><p>SqlSession 可以调用 mybatis 为我们封装的一系列增删改查操作，具体可以看<a href="http://www.mybatis.org/mybatis-3/java-api.html" target="_blank" rel="noopener">参考文档</a>。</p><p>我们可以将它封装一下变得更加友好。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DaoRouter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IDaoRouter</span></span>&#123;</span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 普通查询</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> statement sql语句定义的id</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parameters 参数</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">query</span><span class="hljs-params">(String statement, Object parameters)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> sqlSession.selectList(statement, parameters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 分页查询，注意此处不需要在sql语句中定义startRow和endRow，如果定义，那就用上面的普通查询即可。</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> statement</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parameters</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> offset</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> limit</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">query</span><span class="hljs-params">(String statement, Object parameters, <span class="hljs-keyword">int</span> offset, <span class="hljs-keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> sqlSession.selectList(statement, parameters,<span class="hljs-keyword">new</span> RowBounds(offset,limit));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 返回第一条记录查询结果，如果没有就返回null</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> statementName</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parameters</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">queryForObject</span><span class="hljs-params">(String statementName, Object parameters)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> sqlSession.selectOne(statementName, parameters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 更新数据</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> statement</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parameters</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(String statement, Object parameters)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> sqlSession.update(statement, parameters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 删除</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> statement</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parameters</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">delete</span><span class="hljs-params">(String statement, Object parameters)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> sqlSession.delete(statement, parameters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 新增数据，建议在定义sql语句的时候，使用selectKey保证可以返回新增后的主键</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> statement</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parameters</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(String statement, Object parameters)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> sqlSession.insert(statement, parameters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 批量删除</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> statementName</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataList</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteBatch</span><span class="hljs-params">(String statementName, Collection&lt;?&gt; dataList)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (Object data : dataList) &#123;</span><br><span class="line">            <span class="hljs-keyword">this</span>.delete(statementName, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 批量新增</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> statementName</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataList</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertBatch</span><span class="hljs-params">(String statementName, Collection&lt;?&gt; dataList)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (Object data : dataList) &#123;</span><br><span class="line">            <span class="hljs-keyword">this</span>.insert(statementName, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 批量修改</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> statementName</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataList</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateBatch</span><span class="hljs-params">(String statementName, Collection&lt;?&gt; dataList)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (Object data : dataList) &#123;</span><br><span class="line">            <span class="hljs-keyword">this</span>.update(statementName, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> SqlSession sqlSession;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>首先创建两个实体类省和市，他们之间为一对多的关系。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Province</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> List&lt;City&gt; cityList;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">City</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> Long provinceId;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> String cityName;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> Province province;</span><br></pre></td></tr></table></figure><h2 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h2><p>现在要查询一个城市，同时查询出该城市所在的省。也就是获取 City 对象的时候，同时返回他的 province 成员变量。我们要使用<code>resultMap</code>中的<code>association</code>元素。</p><p>采用关联查询的方式，sql 语句如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">        from city c</span><br><span class="line">        LEFT JOIN province p ON c.province_id = p.id</span><br></pre></td></tr></table></figure><p>这种情况下有可能是关联查询一整个对象，比如 province 的所有变量；也有可能只想查询 province 的少数变量，比如说查个名字。</p><p><strong>提供有两种解决方案。</strong></p><h3 id="association-关联一个对象查询"><a href="#association-关联一个对象查询" class="headerlink" title="association 关联一个对象查询"></a>association 关联一个对象查询</h3><p>关联查询时在查出 city 表中的结果集时也会查出 province 表的结果集，得到两个结果集之后要做的事情就是将他们各自映射到各自的对象中，mybatis 采用在<code>resultMap</code>中指定<code>association</code>的方式来实现以上效果。</p><p><em>注：字段名出现重复的现象可以为其指定唯一的别名</em></p><p><strong>City.java</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">City</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Id</span></span><br><span class="line">    <span class="hljs-meta">@GeneratedValue</span></span><br><span class="line">    <span class="hljs-keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-meta">@Column</span>(nullable = <span class="hljs-keyword">false</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> Long provinceId;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Column</span>(nullable = <span class="hljs-keyword">false</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> String cityName;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> Province province;</span><br></pre></td></tr></table></figure><p><code>private Province province;</code>在 Ctiy 中加一个 Province 对象，查询 City 时也查询 Province。</p><p><strong>CityMapper.xml</strong></p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"BaseResultMap"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"city"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> /&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"province_id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"provinceId"</span> /&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"city_name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"cityName"</span> /&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"description"</span> /&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"province"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"province_id"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"province"</span></span></span><br><span class="line"><span class="hljs-tag">                     <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"Province.provinceResult"</span>/&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"loadCity"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"BaseResultMap"</span> &gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from city c</span><br><span class="line">        LEFT JOIN province p ON c.province_id = p.id</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>ProvinceMapper.xml</strong></p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"loadProvinceAndCity"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"provinceResult"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"Long"</span>&gt;</span></span><br><span class="line">        SELECT * FROM province</span><br><span class="line">        WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重点来看<code>CityMapper.xml</code>的<code>association</code></p><ul><li>property：表示变零名称，即 City 对象中的 province 属性</li><li>column：关联的字段</li><li>javaType:关联对象的类型</li><li>resultMap:关联对象的结果集</li></ul><h3 id="扩展-ResultMap-来扩展字段"><a href="#扩展-ResultMap-来扩展字段" class="headerlink" title="扩展 ResultMap 来扩展字段"></a>扩展 ResultMap 来扩展字段</h3><p>这次不查整个 Province 只是查询 Province 的一个 name，可以不用<code>association</code>。</p><p><strong>CityVO.java</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CityVO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">City</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> String provinceName;</span><br></pre></td></tr></table></figure><p>给<code>City.java</code>一个包装类，添加成员变量 provinceName。</p><p><strong>扩展 ResultMap:</strong></p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cityResultMap"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"city"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> /&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"province_id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"provinceId"</span> /&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"city_name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"cityName"</span> /&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"description"</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cityProvinceResultMap"</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">"cityResultMap"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"cityVO"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"provinceName"</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意<code>cityProvinceResultMap</code>:</p><ul><li>extends:表示继承关系，是被继承 ResultMap 的扩展</li><li>column: sql 语句查询出来的需要映射的字段名称</li><li>property: 实体类中对应的成员变量的名称</li></ul><p><strong>XML 查询语句:</strong></p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"loadCityAndProvinceName"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"cityProvinceResultMap"</span> &gt;</span></span><br><span class="line">        select c.*,p.name</span><br><span class="line">        from city c</span><br><span class="line">        LEFT JOIN province p ON c.province_id = p.id</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="集合嵌套查询"><a href="#集合嵌套查询" class="headerlink" title="集合嵌套查询"></a>集合嵌套查询</h2><p>现在要在查询省的时候，返回该省下市的信息。也就是获取 Province 对象的时候，同时返回他的 cityList 成员变量。我们要使用<code>resultMap</code>中的<code>collection</code>元素。</p><p><strong>ProvinceMapper.xml</strong></p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"Province"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"provinceResult"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"province"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span>/&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"description"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"cityList"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"ArrayList"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">"city"</span></span></span><br><span class="line"><span class="hljs-tag">                    <span class="hljs-attr">select</span>=<span class="hljs-string">"City.loadCityForProvince"</span>/&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"loadProvinceAndCity"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"provinceResult"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"Long"</span>&gt;</span></span><br><span class="line">        SELECT * FROM province</span><br><span class="line">        WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>CityMapper.xml</strong></p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"City"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"loadCityForProvince"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"city"</span>&gt;</span></span><br><span class="line">        select * from city</span><br><span class="line">        WHERE province_id = #&#123;id&#125;;</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重点关注<code>ProvinceMapper.xml</code>的<code>collection</code>部分，他表示返回集合类型</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"cityList"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"ArrayList"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">"city"</span></span></span><br><span class="line"><span class="hljs-tag">                    <span class="hljs-attr">select</span>=<span class="hljs-string">"City.loadCityForProvince"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>property:匹配的属性名称，也就是<code>Province</code>中的<code>cityList</code>成员变量</li><li>javaType：集合的类型(可以省略)</li><li>column:关联的字段</li><li>ofType:集合中包含元素的类型，这里用了别名</li><li>select：关联查询的方法</li></ul><h2 id="集合迭代器查询"><a href="#集合迭代器查询" class="headerlink" title="集合迭代器查询"></a>集合迭代器查询</h2><p>比如想查询几个省中的市，可以传入一个包含省数据的 list，然后使用 mybatis 迭代遍历这个 list 集合查询获取所有下属的市。</p><p>要用到一个动态 sql 的标签<code>&lt;foreach&gt;</code>,XML 如下：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"loadCityByProvinceList"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"city"</span>&gt;</span></span><br><span class="line">        select * from city</span><br><span class="line">        WHERE province_id IN</span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">item</span>=<span class="hljs-string">"item"</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"index"</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">"list"</span></span></span><br><span class="line"><span class="hljs-tag">                 <span class="hljs-attr">open</span>=<span class="hljs-string">"("</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">","</span> <span class="hljs-attr">close</span>=<span class="hljs-string">")"</span>&gt;</span></span><br><span class="line">            #&#123;item&#125;</span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><h2 id="插入设置主键自增"><a href="#插入设置主键自增" class="headerlink" title="插入设置主键自增"></a>插入设置主键自增</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insertXXX&quot; parameterType=&quot;fileNameVO&quot;</span><br><span class="line">            useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;</span><br><span class="line">        INSERT INTO file_name (</span><br><span class="line">            ...</span><br><span class="line">        )VALUES(</span><br><span class="line">            ...</span><br><span class="line">        )</span><br><span class="line">    &lt;/insert&gt;</span><br></pre></td></tr></table></figure><ul><li>useGeneratedKeys：是否自增</li><li>keyProperty：主键名称</li></ul><h1 id="注解方式调用-sql"><a href="#注解方式调用-sql" class="headerlink" title="注解方式调用 sql"></a>注解方式调用 sql</h1><p>注解方式开发</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> org.mybatis.example;</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BlogMapper</span> </span>&#123; </span><br><span class="line">    <span class="hljs-meta">@Select</span>(<span class="hljs-string">"SELECT * FROM blog WHERE id = #&#123;id&#125;”) </span></span><br><span class="line"><span class="hljs-string">    Blog selectBlog(int id); </span></span><br><span class="line"><span class="hljs-string">&#125;</span></span><br></pre></td></tr></table></figure><p>简单的 sql 语句可以用注解，但是复杂的不适宜用注解开发的方式。一般采用 XML 方式进行开发，有必要知道有注解开发这种方式。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多线程基础知识</title>
      <link href="/post/1d67cce0.html"/>
      <url>/post/1d67cce0.html</url>
      
        <content type="html"><![CDATA[<p>计算机发明之初，单个 CPU 在同一时间点只能执行单个任务，也就是单任务阶段。紧接着发展为多任务阶段，在单个 CPU 上能执行多个进程，但是此处的并行执行并不是指在同一时间执行多个任务，而是指由系统对进程进行调度轮流使用 CPU。</p><p>接着发展到现在的多线程阶段，一个程序内部能够运行多个线程，每个线程都可以被看做运行在一个 CPU 上，此时计算机真正做到了在同一时间点能够执行多个任务。</p><a id="more"></a><h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><p>进程和线程怎么界定？一个进程包含着一个或多个线程。</p><p>当我们启动一个应用程序的时候，操作系统将加载这个应用程序并为当前程序<strong>开辟一块独立的内存空间</strong>，这片空间就专门用来负责这个程序的运行。这就是一个进程，我们可以把它想象成一个车间。</p><p>假设我们启动的程序是微信，我们可以使用微信和多个人聊天并且互不干扰。同时和不同的人聊天就是将进程划分成多个区域，每个区域就是一个线程。如果把进程比作车间，线程就像车间中的工人，工人们各司其职维持车间的正常运转。</p><h1 id="多线程运行原理"><a href="#多线程运行原理" class="headerlink" title="多线程运行原理"></a>多线程运行原理</h1><p>多线程就是在一个进程中开启多个线程，让多个线程去实现不同功能。多线程最常见的就是 GUI 程序，比如说使用 IDE 运行程序的同时我们还能用 IDE 继续写代码，这就用到了多线程。</p><p>多线程运行则是利用 CPU 在线程中做时间片切换。CPU 负责运行程序且一次只能运行一个程序，<strong>多线程的实现依靠 CPU 在线程间快速切换，</strong>由于切换的时间很快就像同时运行多个线程一样。</p><p>多线程切换过程中，它需要先存储当前线程的本地的数据，程序指针等，然后载入另一个线程的本地数据，程序指针等，最后才开始执行。所以多线程一般能提高程序运行效率，但也不能无节制地开启线程。</p><h1 id="Java-实现多线程的两种方式"><a href="#Java-实现多线程的两种方式" class="headerlink" title="Java 实现多线程的两种方式"></a>Java 实现多线程的两种方式</h1><p>多线程的两种创建方式分别为继承 Thread 类以及实现 Runnable 接口。一般用实现 Runnable 接口的方式。</p><p>我们通过调用线程的 <code>start()</code> 方法新建一个线程并启动它，下面是两种主要实现方式的示例。</p><h2 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承 Thread 类"></a>继承 Thread 类</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">5</span>; i &gt; <span class="hljs-number">0</span> &amp;&amp; count&gt;<span class="hljs-number">0</span>; i--,count--) &#123;</span><br><span class="line">            System.out.println(<span class="hljs-string">"count----"</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">new</span> MyThread1().start();</span><br><span class="line">        <span class="hljs-keyword">new</span> MyThread1().start();</span><br><span class="line">        <span class="hljs-keyword">new</span> MyThread1().start(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以创建一个实例直接 <code>start()</code>，因为 Thread 类中定义了 <code>start()</code> 方法。</p><h2 id="实现-Runnable-接口"><a href="#实现-Runnable-接口" class="headerlink" title="实现 Runnable 接口"></a>实现 Runnable 接口</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">5</span>; i &gt; <span class="hljs-number">0</span> &amp;&amp; count&gt;<span class="hljs-number">0</span>; i--,count--) &#123;</span><br><span class="line">            System.out.println(<span class="hljs-string">"count----"</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread2 myThread2 = <span class="hljs-keyword">new</span> MyThread2();</span><br><span class="line">        <span class="hljs-keyword">new</span> Thread(myThread2).start();</span><br><span class="line">        <span class="hljs-keyword">new</span> Thread(myThread2).start();</span><br><span class="line">        <span class="hljs-keyword">new</span> Thread(myThread2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是他无法直接创建实例之后直接 <code>start()</code>,查看源码可以看到 Runnable 接口只有一个 <code>run()</code> 方法没有 <code>start()</code>方法，所以他必须由 Thread 来启动。</p><h2 id="两者优缺点比较"><a href="#两者优缺点比较" class="headerlink" title="两者优缺点比较"></a>两者优缺点比较</h2><h3 id="实现-Runable-避免由于-Java-的单继承特性而带来的局限"><a href="#实现-Runable-避免由于-Java-的单继承特性而带来的局限" class="headerlink" title="实现 Runable() 避免由于 Java 的单继承特性而带来的局限"></a>实现 Runable() 避免由于 Java 的单继承特性而带来的局限</h3><p>Java 使用 extends 关键字实现继承，可以理解成全盘接受了父类的特性。使用 implents 关键字实现接口，对类的功能进行拓展。<strong>要注意的是 Java 的继承是单继承，也就是只能继承一个父类。但是每个类都能实现多个接口。</strong></p><p>当一个类需要实现多线程的时候，如果他已经继承了其他的父类则不能再继承 Thread 类，但是即使他实现了其他接口，他任然能实现 Runable 接口创建多线程。</p><p>但是当我们访问当前线程时需要使用<code>Thread.currentThread()</code>方法。</p><h3 id="继承-Thread-类编写简单，方便理解"><a href="#继承-Thread-类编写简单，方便理解" class="headerlink" title="继承 Thread 类编写简单，方便理解"></a>继承 Thread 类编写简单，方便理解</h3><p>通过继承 Thread 类的方法实现多线程，调用当前类只需要使用 <code>this</code> 关键字即可进行访问。但是使用这种方式之后就不能继承其他父类。</p><p><strong>因此一般都是用实现 Runable() 接口的形式。本篇中使用显示创建线程的方式，而创建线程更好的方式是使用线程池。</strong></p><h1 id="多线程-run-和-start-的区别"><a href="#多线程-run-和-start-的区别" class="headerlink" title="多线程 run() 和 start() 的区别"></a>多线程 run() 和 start() 的区别</h1><p>通过运行<code>run()</code>方法和<code>start()</code>方法，看看输出结果有什么区别。</p><h2 id="run-方法"><a href="#run-方法" class="headerlink" title="run() 方法"></a>run() 方法</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">5</span>; i &gt; <span class="hljs-number">0</span> &amp;&amp; count&gt;<span class="hljs-number">0</span>; i--,count--) &#123;</span><br><span class="line">            System.out.println(<span class="hljs-keyword">this</span>.currentThread().getName() + <span class="hljs-string">"----count----"</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyThread3 myThread1 = <span class="hljs-keyword">new</span> MyThread3();</span><br><span class="line">        myThread1.setName(<span class="hljs-string">"Thread1"</span>);</span><br><span class="line">        myThread1.run();</span><br><span class="line"></span><br><span class="line">        MyThread3 myThread2 = <span class="hljs-keyword">new</span> MyThread3();</span><br><span class="line">        myThread2.setName(<span class="hljs-string">"Thread2"</span>);</span><br><span class="line">        myThread2.run();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">thread1----count----5</span><br><span class="line">thread1----count----4</span><br><span class="line">thread1----count----3</span><br><span class="line">thread1----count----2</span><br><span class="line">thread1----count----1</span><br><span class="line">thread2----count----5</span><br><span class="line">thread2----count----4</span><br><span class="line">thread2----count----3</span><br><span class="line">thread2----count----2</span><br><span class="line">thread2----count----1</span><br></pre></td></tr></table></figure><p><strong>Thread1 和 Thead2 只是在主线程上顺序执行，并没有开启新的线程。</strong></p><h2 id="start-方法"><a href="#start-方法" class="headerlink" title="start() 方法"></a>start() 方法</h2><p>如果将 <code>run()</code> 改成 <code>start()</code>输出结果为:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">thread2---count----5</span><br><span class="line">thread3---count----5</span><br><span class="line">thread1---count----5</span><br><span class="line">thread3---count----3</span><br><span class="line">thread3---count----1</span><br><span class="line">thread2---count----4</span><br><span class="line">thread1---count----2</span><br></pre></td></tr></table></figure><p>可以看到两个线程在抢占资源，成功创建了两个线程。</p><h2 id="结果对比"><a href="#结果对比" class="headerlink" title="结果对比"></a>结果对比</h2><p>创建了两个相同的线程对象，但是结果有明显的差异。<code>run()</code> 的运行结果始终是顺次递减，线程1执行完之后再执行线程2，表明他们是在主线程上顺序运行，并没有开启新的线程。</p><p>但是使用<code>start()</code>方法则可以看到线程1和线程2在竞争资源，说明成功开启了两个线程。</p><h1 id="线程-start-和-run-的区别"><a href="#线程-start-和-run-的区别" class="headerlink" title="线程 start() 和 run() 的区别"></a>线程 start() 和 run() 的区别</h1><p><strong>先看一下 Runnable 接口</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中只有一个 run() 方法，注释是这么写的：</p><blockquote><p>When an object implementing interface <code>Runnable</code> is used to create a thread</p></blockquote><p><em>所以用于实现了 run() 方法的对象可以被用于创建一个线程</em></p><p><strong>再看 Thread 类</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Thread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">/* What will be run. */</span></span><br><span class="line">    <span class="hljs-keyword">private</span> Runnable target;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (target != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            target.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Thread 实现了 Runable 的接口,可以传入一个 Runnable，执行 Runnable 的 run() 方法,他说:</p><blockquote><p>If this thread was constructed using a separate <code>Runnable</code> run object, then that <code>Runnable</code> object’s <code>run</code> method is called; otherwise, this method does nothing and returns.</p></blockquote><p>说明 Thread 类的作用就是用于运行 Runable 的实例，将实现了 Runable 方法的实例传入 Thread 类就可以运行该实例的<code>run()</code>方法</p><p>再看<code>start()</code> 方法的说明：</p><p>使用 <code>start()</code> 让线程会调用<code>run()</code>之后在虚拟机上执行</p><blockquote><p>Causes this thread to begin execution; the Java Virtual Machine calls the <code>run</code> method of this thread.</p></blockquote><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (threadStatus != <span class="hljs-number">0</span>)</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalThreadStateException();</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-comment">/*把线程加到线程组中，表示这个线程将会被执行*/</span></span><br><span class="line">        group.add(<span class="hljs-keyword">this</span>);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>run() 只是在当前线程中启动，start() 才是真正新建一个线程并启动。</strong></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank" rel="noopener">进程与线程的一个简单解释</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper 的安装和配置</title>
      <link href="/post/530b5399.html"/>
      <url>/post/530b5399.html</url>
      
        <content type="html"><![CDATA[<p>ZooKeeper 是一个分布式协调服务。其本身就是一个高可用的分布式程序，只需半数以上节点存活即可继续使用，所以使用中往往配置奇数台主机。他主要能提供主从协调、服务器节点动态上下线、统一配置管理、分布式共享锁、统一名称服务等。</p><p>本文演示在 CentOS 7 虚拟机部署和配置 zookeeper。</p><a id="more"></a><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>首先需要下载安装包。前去<a href="http://www.apache.org/dyn/closer.cgi/zookeeper/" target="_blank" rel="noopener">下载地址</a>下载安装包，本文使用的 zookeeper 版本是<code>zookeeper-3.4.10</code>。</p><p>下载完成之后将安装包传到服务器，我将其传到 apps 目录下：</p><blockquote><p>scp zookeeper-3.4.10.tar.gz <a href="mailto:root@192.168.2.222" target="_blank" rel="noopener">root@192.168.2.222</a>:/apps/</p></blockquote><p>解压安装包</p><blockquote><p>sudo tar -zxvf zookeeper-3.4.10.tar.gz -C /apps/</p></blockquote><p>重命名解压文件</p><blockquote><p>sudo mv zookeeper-3.4.10 zookeeper</p></blockquote><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p>修改配置文件</p><blockquote><p>vi /etc/profile<br>添加如下内容：<br># zookeeper<br>export ZOOKEEPER_HOME=/apps/zookeeper<br>export PATH=\$PATH:$ZOOKEEPER_HOME/bin</p></blockquote><p><em>注：ZOOKEEPER_HOME 为你自己的文件位置。</em></p><p>手动加载配置文件：</p><blockquote><p>source /etc/profile</p></blockquote><h1 id="修改-zookeeper-配置文件"><a href="#修改-zookeeper-配置文件" class="headerlink" title="修改 zookeeper 配置文件"></a>修改 zookeeper 配置文件</h1><p>配置文件放置在 <code>zookeeper/conf</code> 目录下，查看目录文件有三个，其中<code>zoo_sample.cfg</code>是范例配置文件：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ls</span><br><span class="line">configuration.xsl  log4j.properties  zoo_sample.cfg</span><br></pre></td></tr></table></figure><p>复制<code>zoo_sample.cfg</code>并重命名<code>zoo.cfg</code>,<code>zoo.cfg</code>就是需要的配置文件：</p><blockquote><p>cp zoo_sample.cfg zoo.cfg<br>vi zoo.cfg</p></blockquote><p>配置文件中添加或修改如下内容：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 数据目录</span><br><span class="line">dataDir=/home/hadoop/zookeeper/data</span><br><span class="line"># 日志目录</span><br><span class="line">dataLogDir=/home/hadoop/zookeeper/log</span><br><span class="line"># 包括自己在内的所有主机名称</span><br><span class="line">server.1=slave1:2888:3888 (主机名, 心跳端口、数据端口)</span><br><span class="line">server.2=slave2:2888:3888</span><br><span class="line">server.3=slave3:2888:3888</span><br></pre></td></tr></table></figure><p><em>注意：slave1、slave2、slave3 是主机名即 hostname。所以需要配置主机名和 ip 的映射。</em></p><p>新建对应的文件夹:</p><blockquote><p>mkdir -m 755 zookeeper/data<br>mkdir -m 755 zookeeper/log</p></blockquote><p>配置 myid：</p><blockquote><p>echo 1 &gt; zookeeper/data/myid</p></blockquote><p>给三台主机的名称分别配置为<code>1,2,3</code>。</p><p><strong>最后：在另外两台主机上使用任意方法重复如上配置并修改主机名配置完成</strong></p><h1 id="启动-zookeeper"><a href="#启动-zookeeper" class="headerlink" title="启动 zookeeper"></a>启动 zookeeper</h1><p>进入启动目录</p><blockquote><p>cd /apps/zookeeper/bin</p></blockquote><p>启动</p><blockquote><p>zkServer.sh start</p></blockquote><p>查看状态</p><blockquote><p>zkServer.sh status</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Using config: /apps/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Mode: leader</span><br><span class="line">----</span><br><span class="line">Using config: /apps/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><p><strong>以上，zookeeper 的基本安装配置完毕。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 配置</title>
      <link href="/post/99732d8a.html"/>
      <url>/post/99732d8a.html</url>
      
        <content type="html"><![CDATA[<p>本文说明如何在 Parallels 虚拟机上安装 CentOS 7 以及对其的一些基本配置，几个常用配置文件的说明和 JDK, Tomcat 和 Mysql 的安装。</p><a id="more"></a><h1 id="CentOS-7-基本配置"><a href="#CentOS-7-基本配置" class="headerlink" title="CentOS 7 基本配置"></a>CentOS 7 基本配置</h1><h2 id="安装-centos-7"><a href="#安装-centos-7" class="headerlink" title="安装 centos 7"></a>安装 centos 7</h2><p>首先下载镜像文件，我装的是 <em>CentOS-7-x86_64-Minimal-1708.iso</em>。我从网易的镜像下载，下载完后上传了一份到百度云盘：</p><blockquote><p>网易镜像地址：<a href="http://mirrors.163.com/centos/7/isos/x86_64/" target="_blank" rel="noopener">http://mirrors.163.com/centos/7/isos/x86_64/</a><br>百度云盘链接:<a href="http://pan.baidu.com/s/1gf7w1uN" target="_blank" rel="noopener">http://pan.baidu.com/s/1gf7w1uN</a>  密码:5lbx</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5430305-bb9bfa40b0c66271.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第一步"></p><p><img src="http://upload-images.jianshu.io/upload_images/5430305-19fde3fa988edc5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第二步"></p><p><strong>之后按照引导即可完成，有问题可以参看 <a href="http://www.jianshu.com/p/423ba6e48aaa" target="_blank" rel="noopener">Mac利用PD虚拟机安装Centos7</a></strong>。</p><p><img src="http://upload-images.jianshu.io/upload_images/5430305-70c6843b6887d7ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="桥接模式"></p><h2 id="更换-yum-源"><a href="#更换-yum-源" class="headerlink" title="更换 yum 源"></a>更换 yum 源</h2><p>yum 是一种包管理工具，就像 Java 中常用的 maven，或者安卓中用的 Gradle，再或者 Node.js 中的 npm。通过他我们能够统一地下载安装软件。但是由于网络原因下载缓慢，所以要把源换成国内的。更换过程如下：</p><p>备份：</p><blockquote><p>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</p></blockquote><p>去下面的源下载对应版本repo文件, 放入<code>/etc/yum.repos.d/</code></p><p>repo文件下载地址：</p><blockquote><p>网易:<a href="http://mirrors.163.com/.help/centos.html" target="_blank" rel="noopener">http://mirrors.163.com/.help/centos.html</a><br>阿里:<a href="http://mirrors.aliyun.com/repo/" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/</a></p></blockquote><p>运行以下命令生成缓存</p><blockquote><p>yum clean all<br>yum makecache</p></blockquote><p><strong>yum 源配置完成</strong></p><h2 id="通过-yum-安装一些基本软件"><a href="#通过-yum-安装一些基本软件" class="headerlink" title="通过 yum 安装一些基本软件"></a>通过 yum 安装一些基本软件</h2><p>net-tools 提供dig, nslookup, ipconfig等，用于配置网络：</p><blockquote><p>yum install net-tools</p></blockquote><p>添加 wget 下载文件：</p><blockquote><p>yum install wget</p></blockquote><h2 id="创建一个普通用户并赋予-root-权限"><a href="#创建一个普通用户并赋予-root-权限" class="headerlink" title="创建一个普通用户并赋予 root 权限"></a>创建一个普通用户并赋予 root 权限</h2><p>用普通账号进行登录可以避免 root 用户进行错误操作，而且用普通用户登录就像给服务器建立了两道墙，必须先用普通用户登录再设置能用 root 账号登录，所以后面还要配置禁止 root 用户用过 SSH 登录。</p><p>创建普通用户</p><blockquote><p>useradd shui<br>passwd shui<br>输入密码</p></blockquote><p>这个普通用户有时也需要使用 root 权限，所以讲他加入到<code>sudoers</code> 用户组，允许其使用<code>sudo</code>临时调用 root 权限</p><blockquote><p>echo ‘shui ALL=(ALL) ALL’&gt;&gt; /etc/sudoers<br>tail -1 /etc/sudoers<br>shui ALL=(ALL) ALL</p></blockquote><h2 id="禁止-root-使用-ssh-登入"><a href="#禁止-root-使用-ssh-登入" class="headerlink" title="禁止 root 使用 ssh 登入"></a>禁止 root 使用 ssh 登入</h2><p>进入配置文件：</p><blockquote><p>/etc/ssh/sshd_config</p></blockquote><p>找到如下语句进行修改</p><blockquote><p>PermitRootLogin yes</p></blockquote><p>把它改成</p><blockquote><p>PermitRootLogin no</p></blockquote><p>重启 sshd</p><blockquote><p>systemctl restart sshd.service</p></blockquote><p>这样别人就要必须要获取普通用户账号密码，然后才能破解 root</p><h2 id="将防火墙换成-iptables"><a href="#将防火墙换成-iptables" class="headerlink" title="将防火墙换成 iptables"></a>将防火墙换成 iptables</h2><p>CentOS 7.0 默认使用的是 firewall 作为防火墙，常用的是 iptables。先关闭 firewall 再安装 iptables。</p><p>关闭 firewall</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#停止firewall</span><br><span class="line">systemctl stop firewalld.service </span><br><span class="line">#禁止firewall开机启动</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><p>安装 iptables</p><blockquote><p>yum -y install iptables-services</p></blockquote><p>启动 iptables</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#重启防火墙使配置生效</span><br><span class="line">systemctl restart iptables.service </span><br><span class="line">#设置防火墙开机启动</span><br><span class="line">systemctl enable iptables.service</span><br></pre></td></tr></table></figure><h2 id="关闭-SELinux"><a href="#关闭-SELinux" class="headerlink" title="关闭 SELinux"></a>关闭 SELinux</h2><p>查看 SELinux 状态</p><blockquote><p>/usr/sbin/sestatus -v | grep SELinux<br>SELinux status:  enabled # 表示为开启状态</p></blockquote><p>永久关闭，重启生效</p><blockquote><p>vi /etc/selinux/config<br>#修改内容如下<br>SELINUX=disabled</p></blockquote><h2 id="更改系统语言"><a href="#更改系统语言" class="headerlink" title="更改系统语言"></a>更改系统语言</h2><p>查看当前系统语言</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">localectl</span><br><span class="line"></span><br><span class="line">System Locale: LANG=zh_CN.UTF-8</span><br><span class="line">       VC Keymap: cn</span><br><span class="line">      X11 Layout: cn</span><br></pre></td></tr></table></figure><p>查看系统中存在的语言列表，因为很长通过 grep 来查找需要的语言是否存在</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">localectl list-locales | grep US</span><br><span class="line"></span><br><span class="line">en_US</span><br><span class="line">en_US.iso88591</span><br><span class="line">en_US.iso885915</span><br><span class="line">en_US.utf8</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>设置自己要改的语言</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localectl set-locale LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="http://www.jianshu.com/p/d8573f9d1f96" target="_blank" rel="noopener">CentOS yum 源的配置与使用</a></p><p><a href="https://www.hkpug.net/2014/09/18/%E5%AE%89%E8%A3%9D-centos-7-%E5%BE%8C%E5%BF%85%E5%81%9A%E7%9A%84%E4%B8%83%E4%BB%B6%E4%BA%8B/" target="_blank" rel="noopener">安裝 CentOS 7 後必做的七件事</a></p><p><a href="https://my.9xhost.net/knowledgebase/article/33/change-system-language-in-centos-7/" target="_blank" rel="noopener">Change system language in centos 7</a></p><h1 id="一些配置文件的修改"><a href="#一些配置文件的修改" class="headerlink" title="一些配置文件的修改"></a>一些配置文件的修改</h1><h2 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h2><p>可以用<code>hostname</code>来查看你的主机名，修改主机名配置文件：</p><blockquote><p>vi /etc/hostname</p></blockquote><p>重启生效</p><blockquote><p>reboot</p></blockquote><h2 id="修改-ip-地址"><a href="#修改-ip-地址" class="headerlink" title="修改 ip 地址"></a>修改 ip 地址</h2><blockquote><p>vi /etc/sysconfig/network-scripts/ifcfg-eth0</p></blockquote><p>在网卡中配置如下内容可以设置静态 ip</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.0.11</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">DNS1=192.168.0.1</span><br><span class="line">DNS2=8.8.8.8</span><br></pre></td></tr></table></figure><p>配置完之后保存重启网络</p><blockquote><p>service network restart</p></blockquote><h1 id="设置-ip-和-hostname-的映射"><a href="#设置-ip-和-hostname-的映射" class="headerlink" title="设置 ip 和 hostname 的映射"></a>设置 ip 和 hostname 的映射</h1><blockquote><p>vi /etc/hosts</p></blockquote><p>添加上 ip 和 hostname 的键值对，举例前面设置<code>hostname</code>为 main 设置<code>ip</code>为 192.168.0.11 在最后追加一行：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.0.11 main</span><br></pre></td></tr></table></figure><p>之后可以用主机名进行访问</p><h1 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h1><p>将 JDK 安装包上传，上传可以使用 scp,rz 从本机上传，也可以直接下载。</p><p>解压 JDK 安装包：</p><blockquote><p>tar -zxvf jdk-8u151-linux-x64.tar.gz -C /usr/local</p></blockquote><p>配置环境变量：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line"># 追加内容如下</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_151</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><p>加载环境变量：</p><blockquote><p>source /etc/profile</p></blockquote><p>更多</p><p><a href="http://www.cnblogs.com/samcn/archive/2011/03/16/1986248.html" target="_blank" rel="noopener">linux配置java环境变量(详细)</a></p><h1 id="安装-Tomcat"><a href="#安装-Tomcat" class="headerlink" title="安装 Tomcat"></a>安装 Tomcat</h1><p><a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">点击此处下载安装包</a>。本文使用的版本是<code>apache-tomcat-8.5.23.tar.gz</code>，下载后再安装包传到 Linux 主机。</p><p>解压安装包：</p><blockquote><p>tar -zxvf apache-tomcat-8.5.23.tar.gz -C /usr/local/</p></blockquote><p>启动 tomacat</p><blockquote><p>/usr/local/apache-tomcat-8.5.23/bin/startup.sh</p></blockquote><p>查看 tomcat 进程</p><blockquote><p>ps -ef | grep tomcat</p></blockquote><p>访问<code>http://192.168.2.224:8080/</code>即主机 ip + tomcat 端口。小猫出现表示成功。</p><h1 id="安装-Mysql"><a href="#安装-Mysql" class="headerlink" title="安装 Mysql"></a>安装 Mysql</h1><p>Mysql 安装之前先留个心，安装过程中可能会需要记录密码，有些默认没有密码，请留心有没有提示记录密码，然而没看见也没关系就是要再折腾一下。本文演示用<code>yum</code>安装 mysql 数据库。</p><h2 id="配置YUM源"><a href="#配置YUM源" class="headerlink" title="配置YUM源"></a>配置YUM源</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 下载mysql源安装包</span><br><span class="line">shell&gt; wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line"># 安装mysql源</span><br><span class="line">shell&gt; yum localinstall mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line"># 检查mysql源是否安装成功</span><br><span class="line">yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br><span class="line"></span><br><span class="line"># 成功显示如下</span><br><span class="line">mysql-connectors-community/x86_64       MySQL Connectors Community            42</span><br><span class="line">mysql-tools-community/x86_64            MySQL Tools Community                 51</span><br><span class="line">mysql57-community/x86_64                MySQL 5.7 Community Server           227</span><br></pre></td></tr></table></figure><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><blockquote><p>yum install mysql-community-server</p></blockquote><h2 id="启动-mysql"><a href="#启动-mysql" class="headerlink" title="启动 mysql"></a>启动 mysql</h2><blockquote><p>systemctl start mysqld</p></blockquote><p>查看MySQL的启动状态</p><blockquote><p>systemctl status mysqld</p></blockquote><h2 id="修改-root-默认密码"><a href="#修改-root-默认密码" class="headerlink" title="修改 root 默认密码"></a>修改 root 默认密码</h2><p>mysql安装完成之后，在<code>/var/log/mysqld.log</code>文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：</p><blockquote><p>grep ‘temporary password’ /var/log/mysqld.log<br>2017-11-15T16:26:37.970235Z 1 [Note] A temporary password is generated for root@localhost: d54aqgZr69&gt;d</p></blockquote><p>此时默认的密码就是<code>d54aqgZr69&gt;d</code>，用 root 身份登录之后修改密码：</p><blockquote><p>mysql -uroot -p<br>ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘MyNewPass1!’;</p></blockquote><p><em>注：mysql 的密码需要有一定复杂度</em></p><p><strong>更多请参考:</strong><a href="http://www.centoscn.com/mysql/2016/0626/7537.html" target="_blank" rel="noopener">CentOS7下安装MySQL5.7安装与配置（YUM）</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 权限</title>
      <link href="/post/40efde90.html"/>
      <url>/post/40efde90.html</url>
      
        <content type="html"><![CDATA[<p>Linux 是多用户的操作系统，同一时间可以有多个用户同时操作同一台计算机。为了让用户和用户之间不相互影响，必须要有一种机制来保障每一个用户的行为不会越界对其他用户造成不必要的影响。</p><a id="more"></a><h1 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h1><p>了解 Linux 的权限管理首先要了解用户和组的概念。Linux 引入了用户和用户组的概念，一个用户可以拥有多个文件和目录， 用户对这个文件或目录的访问权限拥有控制权。同时用户可以属于一个或者多个用户组，用户组中的用户拥有<strong>同属于这个组的</strong>对文件的访问控制权。</p><p>Linux 会给每个用户分配一个 uid（标识用户） 和 gid (标识用户组)，在创建用户的时候默认就会创建一个和用户名同名的用户组，我可以用<code>id</code>命令来查看：</p><blockquote><p>id<br>uid=0(root) gid=0(root) 组=0(root) 环境=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</p></blockquote><p>这些信息都是配置在配置文件中的，我们有必要了解这些信息在哪些配置文件中,他们主要配置在三个文件中<code>/etc/shadow</code>,<code>/etc/passwd</code>和<code>/etc/group</code>。</p><blockquote><p>用户帐户 定义在/etc/passwd 文件里面，用户组定义在/etc/group 文件里面。当用户帐户和用户组创建以后， 这些文件随着文件/etc/shadow 的变动而修改，文件/etc/shadow 包含了关于用户密码的信息。 对于每个用户帐号，文件/etc/passwd 定义了用户（登录）名、uid、gid、帐号的真实姓名、家目录 和登录 shell。如果你查看一下文件/etc/passwd 和文件/etc/group 的内容，你会注意到除了普通 用户帐号之外，还有超级用户（uid 0）帐号，和各种各样的系统用户。</p></blockquote><h1 id="基本的用户管理"><a href="#基本的用户管理" class="headerlink" title="基本的用户管理"></a>基本的用户管理</h1><h2 id="创建一个普通用户"><a href="#创建一个普通用户" class="headerlink" title="创建一个普通用户"></a>创建一个普通用户</h2><p>添加用户</p><blockquote><p>useradd  shui</p></blockquote><p>设置密码</p><blockquote><p>passwd shui  按提示输入密码即可</p></blockquote><p>这样就会创建一个新的用户，我们可以在<code>/etc/group</code>中看到新建的默认用户组的信息<code>shui:x:1000:</code>也可以再<code>/etc/shadow</code>,<code>/etc/passwd</code>看到相关信息。</p><h2 id="为用户配置sudo权限"><a href="#为用户配置sudo权限" class="headerlink" title="为用户配置sudo权限"></a>为用户配置sudo权限</h2><p>配置sudo权限就是将永不加入到<code>sudoers</code>用户组中，这是一个特殊的用户组，在这个用户组中的用户可以通过在命令前面添加<code>sudo</code>临时获取<code>root</code>的权限。</p><p>用root编辑 vi /etc/sudoers</p><p>在文件的如下位置，为hadoop添加一行即可</p><blockquote><p>root    ALL=(ALL)       ALL<br>shui  ALL=(ALL)       ALL</p></blockquote><p>或者使用如下语句也是相同效果</p><blockquote><p>echo ‘shui ALL=(ALL) ALL’&gt;&gt; /etc/sudoers</p></blockquote><p><em>然后，hadoop用户就可以用sudo来执行系统级别的指令</em></p><h1 id="文件权限的操作"><a href="#文件权限的操作" class="headerlink" title="文件权限的操作"></a>文件权限的操作</h1><p>前面说过用户具有对文件的的访问控制权，访问控制权具有<strong>可读、可写、可操作</strong>三种，我们来具体看一下</p><h2 id="linux-文件权限的描述格式解读"><a href="#linux-文件权限的描述格式解读" class="headerlink" title="linux 文件权限的描述格式解读"></a>linux 文件权限的描述格式解读</h2><p>用<code>ll</code>命令来看一下根目录下的文件信息,我们复制其中的一部分：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dr-xr-xr-x.   5 root root 4096 11月  2 10:34 boot</span><br><span class="line">drwxr-xr-x.  20 root root 3140 11月  2 10:36 dev</span><br><span class="line">drwxr-xr-x.  74 root root 8192 11月  2 20:48 etc</span><br><span class="line">drwxr-xr-x.   3 root root   18 11月  2 19:03 home</span><br></pre></td></tr></table></figure><p><strong>每个文件的信息大同小异，关注最前面的十个字符，他就表示文件的操作权限。</strong></p><p>以/etc目录的信息为例<code>drwxr-xr-x.  74 root root 8192 11月  2 20:48 etc</code></p><p>第一位表示文件类型,d 表示这是一个文件夹，文件属性还有以下内容</p><p><img src="http://upload-images.jianshu.io/upload_images/5430305-a18c76f78238c675.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件类型"></p><p>后面的九位分别代表用户权限、用户组权限和其他用户权限</p><p><img src="http://upload-images.jianshu.io/upload_images/5430305-7f8a457aae28df46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="权限属性"></p><ul><li>r:表示可读 read</li><li>w:表示可惜 write</li><li>x:表示可执行 excute</li></ul><p>/etc 目录的权限 <code>rwxr-xr-x</code> 就表示，root 用户具有可读可写可操作的权限，文件所有者的组成员可以访问该目录，但是不能新建、重命名、删除文件，其他成员可以访问该目录，但是不能新建、重命名、删除文件。</p><p><img src="http://upload-images.jianshu.io/upload_images/5430305-51db58cc1b768d91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="权限表"></p><h1 id="chmod-更改权限"><a href="#chmod-更改权限" class="headerlink" title="chmod 更改权限"></a>chmod 更改权限</h1><p>只有<code>root</code>和文件的所有者才能更改文件的权限，更改文件的权限有两种方式，一种是使用符号，另一种是使用八进制数字。</p><h2 id="符号方式修改文件权限"><a href="#符号方式修改文件权限" class="headerlink" title="符号方式修改文件权限"></a>符号方式修改文件权限</h2><p>符号即前面<code>rwx</code>对应的含义，<code>ugoa</code>则分别表示用户(user)、用户组(group)、其他人(other)和所有(all),一组示例来演示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod g-rw haha.dat    表示将haha.dat对所属组的rw权限取消</span><br><span class="line">chmod o-rw haha.dat 表示将haha.dat对其他人的rw权限取消</span><br><span class="line">chmod u+x haha.dat      表示将haha.dat对所属用户的权限增加x</span><br></pre></td></tr></table></figure><h2 id="八进制的方式来修改权限"><a href="#八进制的方式来修改权限" class="headerlink" title="八进制的方式来修改权限"></a>八进制的方式来修改权限</h2><p>一个八进制数字可以表示三个二进制数，二进制的 111 对应八进制的 7，而 111 正好可以表示 rwx 的含义，1 则代表有权限 0 则代表没有权限。</p><table><thead><tr><th>八进制</th><th>二进制</th><th>符号</th></tr></thead><tbody><tr><td>0</td><td>000</td><td>—</td></tr><tr><td>1</td><td>001</td><td>—-x</td></tr><tr><td>2</td><td>010</td><td>-w-</td></tr><tr><td>3</td><td>011</td><td>-wx</td></tr><tr><td>4</td><td>100</td><td>r–</td></tr><tr><td>5</td><td>101</td><td>r-x</td></tr><tr><td>6</td><td>110</td><td>rw-</td></tr><tr><td>7</td><td>111</td><td>rwx</td></tr></tbody></table><p>例如：</p><blockquote><p>chmod 664 haha.dat<br>修改成   rw-rw-r–</p></blockquote><p>一些人喜欢使用八进制表示法，而另一些人则非常喜欢符号表示法。符号表示法的优点是， 允许你设置文件模式的某个属性，而不影响其他的属性。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu配置JDK</title>
      <link href="/post/1d66a96c.html"/>
      <url>/post/1d66a96c.html</url>
      
        <content type="html"><![CDATA[<p>wget下载jdk8</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz"</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xzf jdk-8u141-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>配置环境变量</p><p>vim /etc/profile</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/home/shui/java/jdk1.8.0_141</span><br><span class="line">JRE_HOME=/home/shui/java/jdk1.8.0_141/jre</span><br><span class="line">CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br></pre></td></tr></table></figure><p>使配置生效</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME JRE_HOME CLASS_PATH PATH</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
